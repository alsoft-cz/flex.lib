----------------------------------------------------------------------------------------------------
module winsock =
-- Win32 API Binding
-- Translation to Flex Copyright (C) 2003-2004 A && L soft
----------------------------------------------------------------------------------------------------

with
    windef,winnt,basetsd,winbase;

-- /* WINSOCK.H--definitions to be used with the WINSOCK.DLL
--  * Copyright (c) Microsoft Corporation. All rights reserved.
--  *
--  * This header file corresponds to version 1.1 of the Windows Sockets specification.
--  *
--  * This file includes parts which are Copyright (c) 1982-1986 Regents
--  * of the University of California.  All rights reserved.  The
--  * Berkeley Software License Agreement specifies the terms and
--  * conditions for redistribution.
--  *
--  */
-- #pragma  once
-- /*
--  * Pull in WINDOWS.H if necessary
--  */
-- /*
--  * Basic system type definitions, taken from the BSD file sys/types.h.
--  */
type
u_char            = character 8;
u_short           = unsigned 16;
u_int             = DWORD;
u_long            = DWORD;
s_long            = winnt.LONG;
-- /*
--  * The new type to be used in all
--  * instances which refer to sockets.
--  */
type
t_SOCKET          = UINT_PTR;
-- /*
--  * Select uses arrays of SOCKETs.  These macros manipulate such
--  * arrays.  FD_SETSIZE may be defined by the user before including
--  * this file, but the default here should be >= 64.
--  *
--  * CAVEAT IMPLEMENTOR and USER: THESE MACROS AND TYPES MUST BE
--  * INCLUDED IN WINSOCK.H EXACTLY AS SHOWN HERE.
--  */
const
  FD_SETSIZE        = 64;
  SOCKET_ERROR      = -1;
  INVALID_SOCKET    : t_SOCKET = 0;

type
  t_fd_set          = record
fd_count        : u_int;
fd_array        : array 0..FD_SETSIZE-1 of t_SOCKET;
  end record;

type
  t_001 = s_long;
t_002=^t_fd_set for machine_pointer use true;

__WSAFDIsSet      = procedure (
    _001            : t_SOCKET;
    _002            : t_002)
                      return t_001;
-- /*
--  * Structure used in select() call, taken from the BSD file sys/time.h.
--  */
type
  t_timeval         = record
tv_sec          : s_long;
tv_usec         : s_long;
  end record;

-- /*
--  * Operations on timevals.
--  *
--  * NB: timercmp does not work for >= or <=.
--  */
-- /*
--  * Commands for ioctlsocket(),  taken from the BSD file fcntl.h.
--  *
--  *
--  * Ioctl's have the command encoded in the lower word,
--  * and the size of any in or out parameters in the upper
--  * word.  The high 2 bits of the upper word are used
--  * to encode the in/out status of the parameter; for now
--  * we restrict parameters to at most 128 bytes.
--  */
const
  IOCPARM_MASK      = $7F;

const
  IOC_VOID          = $20000000;

const
  IOC_OUT           = $40000000;

const
  IOC_IN            = $80000000;

-- /* 0x20000000 distinguishes new &
--                                            old ioctl's */
-- /* Socket I/O Controls 
-- /*
--  * Structures returned by network data base library, taken from the
--  * BSD file netdb.h.  All addresses are supplied in host order, and
--  * returned in network order (suitable for use in system calls).
--  */
type
  t_hostent         = record
h_name          : ^character 8;
h_aliases       : ^^character 8;
h_addrtype      : signed 16;
h_length        : signed 16;
h_addr_list     : ^^character 8;
  end record;

-- /*
--  * It is assumed here that a network number
--  * fits in 32 bits.
--  */
type
  netent            = record
n_name          : ^character 8;
n_aliases       : ^^character 8;
n_addrtype      : signed 16;
n_net           : u_long;
  end record;

type
  t_servent         = record
s_name          : ^character 8;
s_aliases       : ^^character 8;
s_port          : signed 16;
s_proto         : ^character 8;
  end record;

type
  t_protoent        = record
p_name          : ^character 8;
p_aliases       : ^^character 8;
p_proto         : signed 16;
  end record;

-- /*
--  * Constants and structures defined by the internet system,
--  * Per RFC 790, September 1981, taken from the BSD file netinet/in.h.
--  */
-- /*
--  * Protocols
--  */
const
  IPPROTO_IP        = 0;

const
  IPPROTO_ICMP      = 1;

const
  IPPROTO_IGMP      = 2;

const
  IPPROTO_GGP       = 3;

const
  IPPROTO_TCP       = 6;

const
  IPPROTO_PUP       = 12;

const
  IPPROTO_UDP       = 17;

const
  IPPROTO_IDP       = 22;

const
  IPPROTO_ND        = 77;

const
  IPPROTO_RAW       = 255;

const
  IPPROTO_MAX       = 256;

-- /*
--  * Port/socket numbers: network standard functions
--  */
const
  IPPORT_ECHO       = 7;

const
  IPPORT_DISCARD    = 9;

const
  IPPORT_SYSTAT     = 11;

const
  IPPORT_DAYTIME    = 13;

const
  IPPORT_NETSTAT    = 15;

const
  IPPORT_FTP        = 21;

const
  IPPORT_TELNET     = 23;

const
  IPPORT_SMTP       = 25;

const
  IPPORT_TIMESERVER = 37;

const
  IPPORT_NAMESERVER = 42;

const
  IPPORT_WHOIS      = 43;

const
  IPPORT_MTP        = 57;

-- /*
--  * Port/socket numbers: host specific functions
--  */
const
  IPPORT_TFTP       = 69;

const
  IPPORT_RJE        = 77;

const
  IPPORT_FINGER     = 79;

const
  IPPORT_TTYLINK    = 87;

const
  IPPORT_SUPDUP     = 95;

-- /*
--  * UNIX TCP sockets
--  */
const
  IPPORT_EXECSERVER = 512;

const
  IPPORT_LOGINSERVER= 513;

const
  IPPORT_CMDSERVER  = 514;

const
  IPPORT_EFSSERVER  = 520;

-- /*
--  * UNIX UDP sockets
--  */
const
  IPPORT_BIFFUDP    = 512;

const
  IPPORT_WHOSERVER  = 513;

const
  IPPORT_ROUTESERVER= 520;

-- /* 520+1 also used 
-- /*
--  * Ports < IPPORT_RESERVED are reserved for
--  * privileged processes (e.g. root).
--  */
const
  IPPORT_RESERVED   = 1024;

-- /*
--  * Link numbers
--  */
const
  IMPLINK_IP        = 155;

const
  IMPLINK_LOWEXPER  = 156;

const
  IMPLINK_HIGHEXPER = 158;

-- /*
--  * Internet address (old style... should be updated)
--  */
type
  t_in_addr         = record
S_un             : record
  S_un_b            : record
s_b1            : u_char;
s_b2            : u_char;
s_b3            : u_char;
s_b4            : u_char;
  end record for position use 0;
  S_un_w            : record
s_w1            : u_short;
s_w2            : u_short;
  end record for position use 0;
      S_addr        : u_long for position use 0;
    end record;
  end record;

-- /*
--  * Definitions of bits in internet address integers.
--  * On subnets, the decomposition of addresses to host and net parts
--  * is done according to subnet mask, not the masks here.
--  */
const
  IN_CLASSA_NET     = $FF000000;

const
  IN_CLASSA_NSHIFT  = 24;

const
  IN_CLASSA_HOST    = $FFFFFF;

const
  IN_CLASSA_MAX     = 128;

const
  IN_CLASSB_NET     = $FFFF0000;

const
  IN_CLASSB_NSHIFT  = 16;

const
  IN_CLASSB_HOST    = $FFFF;

const
  IN_CLASSB_MAX     = 65536;

const
  IN_CLASSC_NET     = $FFFFFF00;

const
  IN_CLASSC_NSHIFT  = 8;

const
  IN_CLASSC_HOST    = $FF;

const
  INADDR_LOOPBACK   = $7F000001;

const
  INADDR_NONE       = $FFFFFFFF;

-- /*
--  * Socket address, internet style.
--  */
type
  t_sockaddr_in     = record
sin_family      : signed 16;
sin_port        : u_short;
  sin_addr          : t_in_addr;
sin_zero        : array 0..7 of character 8;
  end record;

const
  WSADESCRIPTION_LEN= 256;

const
  WSASYS_STATUS_LEN = 128;

type
  WSAData           = record
wVersion        : WORD;
wHighVersion    : WORD;
szDescription   : array 0..256 of character 8;
szSystemStatus  : array 0..128 of character 8;
iMaxSockets     : unsigned 16;
iMaxUdpDg       : unsigned 16;
lpVendorInfo    : ^character 8;
  end record;

type
LPWSADATA         = ^WSADATA for machine_pointer use true;
-- /*
--  * Options for use with [gs]etsockopt at the IP level.
--  */
const
  IP_OPTIONS        = 1;

const
  IP_MULTICAST_IF   = 2;

const
  IP_MULTICAST_TTL  = 3;

const
  IP_MULTICAST_LOOP = 4;

const
  IP_ADD_MEMBERSHIP = 5;

const
  IP_DROP_MEMBERSHIP= 6;

const
  IP_TTL            = 7;

const
  IP_TOS            = 8;

const
  IP_DONTFRAGMENT   = 9;

const
  IP_DEFAULT_MULTICAST_TTL= 1;

const
  IP_DEFAULT_MULTICAST_LOOP= 1;

const
  IP_MAX_MEMBERSHIPS= 20;

-- /*
--  * Argument structure for IP_ADD_MEMBERSHIP and IP_DROP_MEMBERSHIP.
--  */
type
  ip_mreq           = record
  imr_multiaddr     : t_in_addr;
  imr_interface     : t_in_addr;
  end record;

-- /*
--  * Definitions related to sockets: types, address families, options,
--  * taken from the BSD file sys/socket.h.
--  */
-- /*
--  * This is used instead of -1, since the
--  * SOCKET type is unsigned.
--  */
-- /*
--  * Types
--  */
const
  SOCK_STREAM       = 1;

const
  SOCK_DGRAM        = 2;

const
  SOCK_RAW          = 3;

const
  SOCK_RDM          = 4;

const
  SOCK_SEQPACKET    = 5;

-- /*
--  * Option flags per-socket.
--  */
const
  SO_DEBUG          = $01;

const
  SO_ACCEPTCONN     = $02;

const
  SO_REUSEADDR      = $04;

const
  SO_KEEPALIVE      = $08;

const
  SO_DONTROUTE      = $10;

const
  SO_BROADCAST      = $20;

const
  SO_USELOOPBACK    = $40;

const
  SO_LINGER         = $80;

const
  SO_OOBINLINE      = $0100;

-- /*
--  * Additional options.
--  */
const
  SO_SNDBUF         = $1001;

const
  SO_RCVBUF         = $1002;

const
  SO_SNDLOWAT       = $1003;

const
  SO_RCVLOWAT       = $1004;

const
  SO_SNDTIMEO       = $1005;

const
  SO_RCVTIMEO       = $1006;

const
  SO_ERROR          = $1007;

const
  SO_TYPE           = $1008;

-- /*
--  * Options for connect and disconnect data and options.  Used only by
--  * non-TCP/IP transports such as DECNet, OSI TP4, etc.
--  */
const
  SO_CONNDATA       = $7000;

const
  SO_CONNOPT        = $7001;

const
  SO_DISCDATA       = $7002;

const
  SO_DISCOPT        = $7003;

const
  SO_CONNDATALEN    = $7004;

const
  SO_CONNOPTLEN     = $7005;

const
  SO_DISCDATALEN    = $7006;

const
  SO_DISCOPTLEN     = $7007;

-- /*
--  * Option for opening sockets for synchronous access.
--  */
const
  SO_OPENTYPE       = $7008;

const
  SO_SYNCHRONOUS_ALERT= $10;

const
  SO_SYNCHRONOUS_NONALERT= $20;

-- /*
--  * Other NT-specific options.
--  */
const
  SO_MAXDG          = $7009;

const
  SO_MAXPATHDG      = $700A;

const
  SO_UPDATE_ACCEPT_CONTEXT= $700B;

const
  SO_CONNECT_TIME   = $700C;

-- /*
--  * TCP options.
--  */
const
  TCP_NODELAY       = $01;

const
  TCP_BSDURGENT     = $7000;

-- /*
--  * Address families.
--  */
const
  AF_UNSPEC         = 0;

const
  AF_UNIX           = 1;

const
  AF_INET           = 2;

const
  AF_IMPLINK        = 3;

const
  AF_PUP            = 4;

const
  AF_CHAOS          = 5;

const
  AF_IPX            = 6;

const
  AF_NS             = 6;

const
  AF_ISO            = 7;

const
  AF_ECMA           = 8;

const
  AF_DATAKIT        = 9;

const
  AF_CCITT          = 10;

const
  AF_SNA            = 11;

const
  AF_DECnet         = 12;

const
  AF_DLI            = 13;

const
  AF_LAT            = 14;

const
  AF_HYLINK         = 15;

const
  AF_APPLETALK      = 16;

const
  AF_NETBIOS        = 17;

const
  AF_VOICEVIEW      = 18;

const
  AF_FIREFOX        = 19;

const
  AF_UNKNOWN1       = 20;

const
  AF_BAN            = 21;

const
  AF_MAX            = 22;

-- /*
--  * Structure used by kernel to store most
--  * addresses.
--  */
type
  t_sockaddr        = record
sa_family       : u_short;
sa_data         : array 0..13 of character 8;
  end record;

-- /*
--  * Structure used by kernel to pass protocol
--  * information in raw sockets.
--  */
type
  sockproto         = record
sp_family       : u_short;
sp_protocol     : u_short;
  end record;

-- /*
--  * Protocol families, same as address families for now.
--  */
-- /*
--  * Structure used for manipulating linger option.
--  */
type
  t_linger          = record
l_onoff         : u_short;
l_linger        : u_short;
  end record;

-- /*
--  * Level number for (get/set)sockopt() to apply to socket itself.
--  */
const
  SOL_SOCKET        = $FFFF;

-- /*
--  * Maximum queue length specifiable by listen.
--  */
const
  SOMAXCONN         = 5;

const
  MSG_OOB           = $01;

const
  MSG_PEEK          = $02;

const
  MSG_DONTROUTE     = $04;

const
  MSG_MAXIOVLEN     = 16;

const
  MSG_PARTIAL       = $8000;

-- /*
--  * Define constant based on rfc883, used by gethostbyxxxx() calls.
--  */
const
  MAXGETHOSTSTRUCT  = 1024;

-- /*
--  * Define flags to be used with the WSAAsyncSelect() call.
--  */
const
  FD_READ           = $01;

const
  FD_WRITE          = $02;

const
  FD_OOB            = $04;

const
  FD_ACCEPT         = $08;

const
  FD_CONNECT        = $10;

const
  FD_CLOSE          = $20;

-- /*
--  * WinSock error codes are also defined in winerror.h
--  * Hence the IFDEF.
--  */
-- /*
--  * All Windows Sockets error constants are biased by WSABASEERR from
--  * the "normal"
--  */
-- /*
--  * Windows Sockets definitions of regular Microsoft C error constants
--  */
-- /*
--  * Windows Sockets definitions of regular Berkeley error constants
--  */
-- /*
--  * Extended Windows Sockets error constant definitions
--  */
-- /*
--  * Error return codes from gethostbyname() and gethostbyaddr()
--  * (when using the resolver). Note that these errors are
--  * retrieved via WSAGetLastError() and must therefore follow
--  * the rules for avoiding clashes with error numbers from
--  * specific implementations or language run-time systems.
--  * For this reason the codes are based at WSABASEERR+1001.
--  * Note also that [WSA]NO_ADDRESS is defined only for
--  * compatibility purposes.
--  */
-- /* Authoritative Answer: Host not found 
-- /* Non-Authoritative: Host not found, or SERVERFAIL 
-- /* Non recoverable errors, FORMERR, REFUSED, NOTIMP 
-- /* Valid name, no data record of requested type 
-- /*
--  * WinSock error codes are also defined in winerror.h
--  * Hence the IFDEF.
--  */
-- /*
--  * Compatibility macros.
--  */
-- /* no address, look for MX record 
-- /*
--  * Windows Sockets errors redefined as regular Berkeley error constants.
--  * These are commented out in Windows NT to avoid conflicts with errno.h.
--  * Use the WSA constants instead.
--  */
-- /* Socket function prototypes 

-- /* Microsoft Windows Extension function prototypes 

type
  _TRANSMIT_FILE_BUFFERS = record
Head            : PVOID;
HeadLength      : DWORD;
Tail            : PVOID;
TailLength      : DWORD;
  end record;
  TRANSMIT_FILE_BUFFERS = _TRANSMIT_FILE_BUFFERS;
  PTRANSMIT_FILE_BUFFERS = ^_TRANSMIT_FILE_BUFFERS;
  LPTRANSMIT_FILE_BUFFERS = ^_TRANSMIT_FILE_BUFFERS;

const
  TF_DISCONNECT     = $01;

const
  TF_REUSE_SOCKET   = $02;

const
  TF_WRITE_BEHIND   = $04;

procedure TransmitFile(
    hSocket         : in t_SOCKET; 
    hFile           : in t_HANDLE; 
    nNumberOfBytesToWrite : in DWORD; 
    nNumberOfBytesPerSend : in DWORD; 
    lpOverlapped    : in p_OVERLAPPED; 
    lpTransmitBuffers : in LPTRANSMIT_FILE_BUFFERS; 
    dwReserved      : in DWORD)
                      return BOOL;
#pragma convention(TransmitFile,system);
#pragma import(TransmitFile,'TransmitFile','wsock32.dll');

procedure AcceptEx(
    sListenSocket   : in t_SOCKET; 
    sAcceptSocket   : in t_SOCKET; 
    lpOutputBuffer  : in PVOID; 
    dwReceiveDataLength : in DWORD; 
    dwLocalAddressLength : in DWORD; 
    dwRemoteAddressLength : in DWORD; 
    lpdwBytesReceived : out DWORD ; 
    lpOverlapped    : in p_OVERLAPPED)
                      return BOOL;
#pragma convention(AcceptEx,system);
#pragma import(AcceptEx,'AcceptEx','wsock32.dll');

type
t_113=^t_sockaddr for machine_pointer use true;

t_114=s_long ;

t_115=^t_sockaddr for machine_pointer use true;

t_116=s_long ;

procedure GetAcceptExSockaddrs(
    lpOutputBuffer  : in PVOID; 
    dwReceiveDataLength : in DWORD; 
    dwLocalAddressLength : in DWORD; 
    dwRemoteAddressLength : in DWORD; 
    LocalSockaddr   : out t_113; 
    LocalSockaddrLength : out t_114; 
    RemoteSockaddr  : out t_115; 
    RemoteSockaddrLength : out t_116);
#pragma convention(GetAcceptExSockaddrs,system);
#pragma import(GetAcceptExSockaddrs,'GetAcceptExSockaddrs','wsock32.dll');

-- /* Microsoft Windows Extended data types 
type
  SOCKADDR          = t_sockaddr;
  SOCKADDR_IN       = t_sockaddr_in;
  LINGER            = t_linger;
  IN_ADDR           = t_in_addr;
  FD_SET            = t_fd_set;
  HOSTENT           = t_hostent;
  SERVENT           = t_servent;
  PROTOENT          = t_protoent;
  TIMEVAL           = t_timeval;


  PSOCKADDR         = ^t_sockaddr for machine_pointer use true;
  LPSOCKADDR        = ^t_sockaddr for machine_pointer use true;
  PSOCKADDR_IN      = ^t_sockaddr_in for machine_pointer use true;
  LPSOCKADDR_IN     = ^t_sockaddr_in for machine_pointer use true;
  PLINGER           = ^t_linger for machine_pointer use true;
  LPLINGER          = ^t_linger for machine_pointer use true;
  PIN_ADDR          = ^t_in_addr for machine_pointer use true;
  LPIN_ADDR         = ^t_in_addr for machine_pointer use true;
  PFD_SET           = ^t_fd_set for machine_pointer use true;
  LPFD_SET          = ^t_fd_set for machine_pointer use true;
  PHOSTENT          = ^t_hostent for machine_pointer use true;
  LPHOSTENT         = ^t_hostent for machine_pointer use true;
  PSERVENT          = ^t_servent for machine_pointer use true;
  LPSERVENT         = ^t_servent for machine_pointer use true;
  PPROTOENT         = ^t_protoent for machine_pointer use true;
  LPPROTOENT        = ^t_protoent for machine_pointer use true;
  PTIMEVAL          = ^t_timeval for machine_pointer use true;
  LPTIMEVAL         = ^t_timeval for machine_pointer use true;
-- /*
--  * Windows message parameter composition and decomposition
--  * macros.
--  *
--  * WSAMAKEASYNCREPLY is intended for use by the Windows Sockets implementation
--  * when constructing the response to a WSAAsyncGetXByY() routine.
--  */
-- /*
--  * WSAMAKESELECTREPLY is intended for use by the Windows Sockets implementation
--  * when constructing the response to WSAAsyncSelect().
--  */
-- /*
--  * WSAGETASYNCBUFLEN is intended for use by the Windows Sockets application
--  * to extract the buffer length from the lParam in the response
--  * to a WSAGetXByY().
--  */
-- /*
--  * WSAGETASYNCERROR is intended for use by the Windows Sockets application
--  * to extract the error code from the lParam in the response
--  * to a WSAGetXByY().
--  */
-- /*
--  * WSAGETSELECTEVENT is intended for use by the Windows Sockets application
--  * to extract the event code from the lParam in the response
--  * to a WSAAsyncSelect().
--  */
-- /*
--  * WSAGETSELECTERROR is intended for use by the Windows Sockets application
--  * to extract the error code from the lParam in the response
--  * to a WSAAsyncSelect().
--  */

end winsock;
