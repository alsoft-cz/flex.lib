----------------------------------------------------------------------------------------------------
module wingdi =
-- Windows header [converted by h2flex]
--
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

with
    windef,winnt,basetsd;

-- /**************************************************************************
-- *                                                                         *
-- * wingdi.h -- GDI procedure declarations, constant definitions and macros *
-- *                                                                         *
-- * Copyright (c) Microsoft Corp. All rights reserved.                      *
-- *                                                                         *
-- **************************************************************************/
-- 
--  Define API decoration for direct importing of DLL references.
-- 
-- 
--  Define API decoration for direct importing of DLL references.
-- 
-- /* Binary raster ops 
const
  R2_BLACK          = 1;

const
  R2_NOTMERGEPEN    = 2;

const
  R2_MASKNOTPEN     = 3;

const
  R2_NOTCOPYPEN     = 4;

const
  R2_MASKPENNOT     = 5;

const
  R2_NOT            = 6;

const
  R2_XORPEN         = 7;

const
  R2_NOTMASKPEN     = 8;

const
  R2_MASKPEN        = 9;

const
  R2_NOTXORPEN      = 10;

const
  R2_NOP            = 11;

const
  R2_MERGENOTPEN    = 12;

const
  R2_COPYPEN        = 13;

const
  R2_MERGEPENNOT    = 14;

const
  R2_MERGEPEN       = 15;

const
  R2_WHITE          = 16;

const
  R2_LAST           = 16;

-- /* Ternary raster operations 
-- /* Quaternary raster codes 
-- /* Region Flags 
const
  ERROR             = 0;

const
  NULLREGION        = 1;

const
  SIMPLEREGION      = 2;

const
  COMPLEXREGION     = 3;

-- /* CombineRgn() Styles 
const
  RGN_AND           = 1;

const
  RGN_OR            = 2;

const
  RGN_XOR           = 3;

const
  RGN_DIFF          = 4;

const
  RGN_COPY          = 5;

-- /* StretchBlt() Modes 
const
  BLACKONWHITE      = 1;

const
  WHITEONBLACK      = 2;

const
  COLORONCOLOR      = 3;

const
  HALFTONE          = 4;

const
  MAXSTRETCHBLTMODE = 4;

-- /* New StretchBlt() Modes 
-- /* PolyFill() Modes 
const
  ALTERNATE         = 1;

const
  WINDING           = 2;

const
  POLYFILL_LAST     = 2;

-- /* Layout Orientation Options 
const
  LAYOUT_RTL        = $01;

const
  LAYOUT_BTT        = $02;

const
  LAYOUT_VBH        = $04;

const
  LAYOUT_BITMAPORIENTATIONPRESERVED= $08;

-- /* Text Alignment Options 
const
  TA_NOUPDATECP     = 0;

const
  TA_UPDATECP       = 1;

const
  TA_LEFT           = 0;

const
  TA_RIGHT          = 2;

const
  TA_CENTER         = 6;

const
  TA_TOP            = 0;

const
  TA_BOTTOM         = 8;

const
  TA_BASELINE       = 24;

const
  TA_RTLREADING     = 256;

const
  ETO_OPAQUE        = $02;

const
  ETO_CLIPPED       = $04;

const
  ETO_GLYPH_INDEX   = $10;

const
  ETO_RTLREADING    = $80;

const
  ETO_NUMERICSLOCAL = $0400;

const
  ETO_NUMERICSLATIN = $0800;

const
  ETO_IGNORELANGUAGE= $1000;

const
  ETO_PDY           = $2000;

const
  ASPECT_FILTERING  = $01;

-- /* Bounds Accumulation APIs 
const
  DCB_RESET         = $01;

const
  DCB_ACCUMULATE    = $02;

const
  DCB_ENABLE        = $04;

const
  DCB_DISABLE       = $08;

-- /* Metafile Functions 
const
  META_SETBKCOLOR   = $0201;

const
  META_SETBKMODE    = $0102;

const
  META_SETMAPMODE   = $0103;

const
  META_SETROP2      = $0104;

const
  META_SETRELABS    = $0105;

const
  META_SETPOLYFILLMODE= $0106;

const
  META_SETSTRETCHBLTMODE= $0107;

const
  META_SETTEXTCHAREXTRA= $0108;

const
  META_SETTEXTCOLOR = $0209;

const
  META_SETTEXTJUSTIFICATION= $020A;

const
  META_SETWINDOWORG = $020B;

const
  META_SETWINDOWEXT = $020C;

const
  META_SETVIEWPORTORG= $020D;

const
  META_SETVIEWPORTEXT= $020E;

const
  META_OFFSETWINDOWORG= $020F;

const
  META_SCALEWINDOWEXT= $0410;

const
  META_OFFSETVIEWPORTORG= $0211;

const
  META_SCALEVIEWPORTEXT= $0412;

const
  META_LINETO       = $0213;

const
  META_MOVETO       = $0214;

const
  META_EXCLUDECLIPRECT= $0415;

const
  META_INTERSECTCLIPRECT= $0416;

const
  META_ARC          = $0817;

const
  META_ELLIPSE      = $0418;

const
  META_FLOODFILL    = $0419;

const
  META_PIE          = $081A;

const
  META_RECTANGLE    = $041B;

const
  META_ROUNDRECT    = $061C;

const
  META_PATBLT       = $061D;

const
  META_SAVEDC       = $1E;

const
  META_SETPIXEL     = $041F;

const
  META_OFFSETCLIPRGN= $0220;

const
  META_TEXTOUT      = $0521;

const
  META_BITBLT       = $0922;

const
  META_STRETCHBLT   = $0B23;

const
  META_POLYGON      = $0324;

const
  META_POLYLINE     = $0325;

const
  META_ESCAPE       = $0626;

const
  META_RESTOREDC    = $0127;

const
  META_FILLREGION   = $0228;

const
  META_FRAMEREGION  = $0429;

const
  META_INVERTREGION = $012A;

const
  META_PAINTREGION  = $012B;

const
  META_SELECTCLIPREGION= $012C;

const
  META_SELECTOBJECT = $012D;

const
  META_SETTEXTALIGN = $012E;

const
  META_CHORD        = $0830;

const
  META_SETMAPPERFLAGS= $0231;

const
  META_EXTTEXTOUT   = $0A32;

const
  META_SETDIBTODEV  = $0D33;

const
  META_SELECTPALETTE= $0234;

const
  META_REALIZEPALETTE= $35;

const
  META_ANIMATEPALETTE= $0436;

const
  META_SETPALENTRIES= $37;

const
  META_POLYPOLYGON  = $0538;

const
  META_RESIZEPALETTE= $0139;

const
  META_DIBBITBLT    = $0940;

const
  META_DIBSTRETCHBLT= $0B41;

const
  META_DIBCREATEPATTERNBRUSH= $0142;

const
  META_STRETCHDIB   = $0F43;

const
  META_EXTFLOODFILL = $0548;

const
  META_SETLAYOUT    = $0149;

const
  META_DELETEOBJECT = $01F0;

const
  META_CREATEPALETTE= $F7;

const
  META_CREATEPATTERNBRUSH= $01F9;

const
  META_CREATEPENINDIRECT= $02FA;

const
  META_CREATEFONTINDIRECT= $02FB;

const
  META_CREATEBRUSHINDIRECT= $02FC;

const
  META_CREATEREGION = $06FF;

type
  _DRAWPATRECT      = record
ptPosition      : t_POINT;
ptSize          : t_POINT;
wStyle          : WORD;
wPattern        : WORD;
  end record;
  DRAWPATRECT       = _DRAWPATRECT;
  PDRAWPATRECT      = ^_DRAWPATRECT;

-- /* GDI Escapes 
const
  NEWFRAME          = 1;

const
  abort_doc         = 2;

const
  NEXTBAND          = 3;

const
  SETCOLORTABLE     = 4;

const
  GETCOLORTABLE     = 5;

const
  FLUSHOUTPUT       = 6;

const
  DRAFTMODE         = 7;

const
  QUERYESCSUPPORT   = 8;

const
  set_abort_proc    = 9;

const
  start_doc         = 10;

const
  end_doc           = 11;

const
  GETPHYSPAGESIZE   = 12;

const
  GETPRINTINGOFFSET = 13;

const
  GETSCALINGFACTOR  = 14;

const
  MFCOMMENT         = 15;

const
  GETPENWIDTH       = 16;

const
  SETCOPYCOUNT      = 17;

const
  SELECTPAPERSOURCE = 18;

const
  DEVICEDATA        = 19;

const
  PASSTHROUGH       = 19;

const
  GETTECHNOLGY      = 20;

const
  GETTECHNOLOGY     = 20;

const
  SETLINECAP        = 21;

const
  SETLINEJOIN       = 22;

const
  set_miter_limit   = 23;

const
  BANDINFO          = 24;

const
  DRAWPATTERNRECT   = 25;

const
  GETVECTORPENSIZE  = 26;

const
  GETVECTORBRUSHSIZE= 27;

const
  ENABLEDUPLEX      = 28;

const
  GETSETPAPERBINS   = 29;

const
  GETSETPRINTORIENT = 30;

const
  ENUMPAPERBINS     = 31;

const
  SETDIBSCALING     = 32;

const
  EPSPRINTING       = 33;

const
  ENUMPAPERMETRICS  = 34;

const
  GETSETPAPERMETRICS= 35;

const
  POSTSCRIPT_DATA   = 37;

const
  POSTSCRIPT_IGNORE = 38;

const
  MOUSETRAILS       = 39;

const
  GETDEVICEUNITS    = 42;

const
  GETEXTENDEDTEXTMETRICS= 256;

const
  GETEXTENTTABLE    = 257;

const
  GETPAIRKERNTABLE  = 258;

const
  GETTRACKKERNTABLE = 259;

const
  ext_text_out      = 512;

const
  GETFACENAME       = 513;

const
  DOWNLOADFACE      = 514;

const
  ENABLERELATIVEWIDTHS= 768;

const
  ENABLEPAIRKERNING = 769;

const
  SETKERNTRACK      = 770;

const
  SETALLJUSTVALUES  = 771;

const
  SETCHARSET        = 772;

const
  stretch_blt       = 2048;

const
  METAFILE_DRIVER   = 2049;

const
  GETSETSCREENPARAMS= 3072;

const
  QUERYDIBSUPPORT   = 3073;

const
  BEGIN_PATH        = 4096;

const
  CLIP_TO_PATH      = 4097;

const
  END_PATH          = 4098;

const
  EXT_DEVICE_CAPS   = 4099;

const
  RESTORE_CTM       = 4100;

const
  SAVE_CTM          = 4101;

const
  SET_ARC_DIRECTION = 4102;

const
  SET_BACKGROUND_COLOR= 4103;

const
  SET_POLY_MODE     = 4104;

const
  SET_SCREEN_ANGLE  = 4105;

const
  SET_SPREAD        = 4106;

const
  TRANSFORM_CTM     = 4107;

const
  SET_CLIP_BOX      = 4108;

const
  SET_BOUNDS        = 4109;

const
  SET_MIRROR_MODE   = 4110;

const
  OPENCHANNEL       = 4110;

const
  DOWNLOADHEADER    = 4111;

const
  CLOSECHANNEL      = 4112;

const
  POSTSCRIPT_PASSTHROUGH= 4115;

const
  ENCAPSULATED_POSTSCRIPT= 4116;

const
  POSTSCRIPT_IDENTIFY= 4117;

const
  POSTSCRIPT_INJECTION= 4118;

const
  CHECKJPEGFORMAT   = 4119;

const
  CHECKPNGFORMAT    = 4120;

const
  GET_PS_FEATURESETTING= 4121;

const
  SPCLPASSTHROUGH2  = 4568;

-- /*
--  * Parameters for POSTSCRIPT_IDENTIFY escape
--  */
const
  PSIDENT_GDICENTRIC= 0;

const
  PSIDENT_PSCENTRIC = 1;

-- /*
--  * Header structure for the input buffer to POSTSCRIPT_INJECTION escape
--  */
type
  _PSINJECTDATA     = record
DataBytes       : DWORD;
InjectionPoint  : WORD;
PageNumber      : WORD;
  end record;
  PSINJECTDATA      = _PSINJECTDATA;
  PPSINJECTDATA     = ^_PSINJECTDATA;

-- /*
--  * Constants for PSINJECTDATA.InjectionPoint field
--  */
const
  PSINJECT_BEGINSTREAM= 1;

const
  PSINJECT_PSADOBE  = 2;

const
  PSINJECT_PAGESATEND= 3;

const
  PSINJECT_PAGES    = 4;

const
  PSINJECT_DOCNEEDEDRES= 5;

const
  PSINJECT_DOCSUPPLIEDRES= 6;

const
  PSINJECT_PAGEORDER= 7;

const
  PSINJECT_ORIENTATION= 8;

const
  PSINJECT_BOUNDINGBOX= 9;

const
  PSINJECT_DOCUMENTPROCESSCOLORS= 10;

const
  PSINJECT_COMMENTS = 11;

const
  PSINJECT_BEGINDEFAULTS= 12;

const
  PSINJECT_ENDDEFAULTS= 13;

const
  PSINJECT_BEGINPROLOG= 14;

const
  PSINJECT_ENDPROLOG= 15;

const
  PSINJECT_BEGINSETUP= 16;

const
  PSINJECT_ENDSETUP = 17;

const
  PSINJECT_TRAILER  = 18;

const
  PSINJECT_EOF      = 19;

const
  PSINJECT_ENDSTREAM= 20;

const
  PSINJECT_DOCUMENTPROCESSCOLORSATEND= 21;

const
  PSINJECT_PAGENUMBER= 100;

const
  PSINJECT_BEGINPAGESETUP= 101;

const
  PSINJECT_ENDPAGESETUP= 102;

const
  PSINJECT_PAGETRAILER= 103;

const
  PSINJECT_PLATECOLOR= 104;

const
  PSINJECT_SHOWPAGE = 105;

const
  PSINJECT_PAGEBBOX = 106;

const
  PSINJECT_ENDPAGECOMMENTS= 107;

const
  PSINJECT_VMSAVE   = 200;

const
  PSINJECT_VMRESTORE= 201;

-- /*
--  * Parameter for GET_PS_FEATURESETTING escape
--  */
const
  FEATURESETTING_NUP= 0;

const
  FEATURESETTING_OUTPUT= 1;

const
  FEATURESETTING_PSLEVEL= 2;

const
  FEATURESETTING_CUSTPAPER= 3;

const
  FEATURESETTING_MIRROR= 4;

const
  FEATURESETTING_NEGATIVE= 5;

const
  FEATURESETTING_PROTOCOL= 6;

-- 
--  The range of selectors between FEATURESETTING_PRIVATE_BEGIN and
--  FEATURESETTING_PRIVATE_END is reserved by Microsoft for private use
-- 
const
  FEATURESETTING_PRIVATE_BEGIN= $1000;

const
  FEATURESETTING_PRIVATE_END= $1FFF;

-- /*
--  * Information about output options
--  */
type
  _PSFEATURE_OUTPUT = record
bPageIndependent : BOOL;
bSetPageDevice  : BOOL;
  end record;
  PSFEATURE_OUTPUT  = _PSFEATURE_OUTPUT;
  PPSFEATURE_OUTPUT = ^_PSFEATURE_OUTPUT;

-- /*
--  * Information about custom paper size
--  */
type
  _PSFEATURE_CUSTPAPER = record
lOrientation    : LONG;
lWidth          : LONG;
lHeight         : LONG;
lWidthOffset    : LONG;
lHeightOffset   : LONG;
  end record;
  PSFEATURE_CUSTPAPER = _PSFEATURE_CUSTPAPER;
  PPSFEATURE_CUSTPAPER = ^_PSFEATURE_CUSTPAPER;

-- /* Value returned for FEATURESETTING_PROTOCOL 
const
  PSPROTOCOL_ASCII  = 0;

const
  PSPROTOCOL_BCP    = 1;

const
  PSPROTOCOL_TBCP   = 2;

const
  PSPROTOCOL_BINARY = 3;

-- /* Flag returned from QUERYDIBSUPPORT 
const
  QDI_SETDIBITS     = 1;

const
  QDI_GETDIBITS     = 2;

const
  QDI_DIBTOSCREEN   = 4;

const
  QDI_STRETCHDIB    = 8;

-- /* Spooler Error Codes 
const
  SP_NOTREPORTED    = $4000;

const
  PR_JOBSTATUS      = $00;

-- /* Object Definitions for EnumObjects() 
const
  OBJ_PEN           = 1;

const
  OBJ_BRUSH         = 2;

const
  OBJ_DC            = 3;

const
  OBJ_METADC        = 4;

const
  OBJ_PAL           = 5;

const
  OBJ_FONT          = 6;

const
  OBJ_BITMAP        = 7;

const
  OBJ_REGION        = 8;

const
  OBJ_METAFILE      = 9;

const
  OBJ_MEMDC         = 10;

const
  OBJ_EXTPEN        = 11;

const
  OBJ_ENHMETADC     = 12;

const
  OBJ_ENHMETAFILE   = 13;

const
  OBJ_COLORSPACE    = 14;

-- /* xform stuff 
const
  MWT_IDENTITY      = 1;

const
  MWT_LEFTMULTIPLY  = 2;

const
  MWT_RIGHTMULTIPLY = 3;

type
  tagXFORM          = record
eM11            : t_FLOAT;
eM12            : t_FLOAT;
eM21            : t_FLOAT;
eM22            : t_FLOAT;
eDx             : t_FLOAT;
eDy             : t_FLOAT;
  end record;
  t_XFORM           = tagXFORM;
  PXFORM            = ^tagXFORM;
  LPXFORM           = ^tagXFORM;

-- /* Bitmap Header Definition 
type
  tagBITMAP         = record
bmType          : LONG;
bmWidth         : LONG;
bmHeight        : LONG;
bmWidthBytes    : LONG;
bmPlanes        : WORD;
bmBitsPixel     : WORD;
bmBits          : LPVOID;
  end record;
  BITMAP            = tagBITMAP;
  PBITMAP           = ^tagBITMAP;
  NPBITMAP          = ^tagBITMAP;
  LPBITMAP          = ^tagBITMAP;

-- ignored #include <pshpack1.h>
type
  tagRGBTRIPLE      = record
rgbtBlue        : BYTE;
rgbtGreen       : BYTE;
rgbtRed         : BYTE;
  end record;
  RGBTRIPLE         = tagRGBTRIPLE;

-- ignored #include <poppack.h>
type
  tagRGBQUAD        = record
rgbBlue         : BYTE;
rgbGreen        : BYTE;
rgbRed          : BYTE;
rgbReserved     : BYTE;
  end record;
  RGBQUAD           = tagRGBQUAD;

type
LPRGBQUAD         = ^RGBQUAD for machine_pointer use true;
-- /* Image Color Matching color definitions 
const
  CS_ENABLE         = $01;

const
  CS_DISABLE        = $02;

const
  CS_DELETE_TRANSFORM= $03;

-- /* Logcolorspace signature 
const
  LCS_SIGNATURE     = 1347637059;

-- /* Logcolorspace lcsType values 
const
  LCS_sRGB          = 1934772034;

const
  LCS_WINDOWS_COLOR_SPACE= 1466527264;

type
t_LCSCSTYPE       = LONG;
const
  LCS_CALIBRATED_RGB= $00;

type
LCSGAMUTMATCH     = LONG;
const
  LCS_GM_BUSINESS   = $01;

const
  LCS_GM_GRAPHICS   = $02;

const
  LCS_GM_IMAGES     = $04;

const
  LCS_GM_ABS_COLORIMETRIC= $08;

-- /* ICM Defines for results from CheckColorInGamut() 
const
  CM_OUT_OF_GAMUT   = 255;

const
  CM_IN_GAMUT       = 0;

-- /* UpdateICMRegKey Constants               
const
  ICM_ADDPROFILE    = 1;

const
  ICM_DELETEPROFILE = 2;

const
  ICM_QUERYPROFILE  = 3;

const
  ICM_SETDEFAULTPROFILE= 4;

const
  ICM_REGISTERICMATCHER= 5;

const
  ICM_UNREGISTERICMATCHER= 6;

const
  ICM_QUERYMATCH    = 7;

-- /* Macros to retrieve CMYK values from a COLORREF 
type
FXPT16DOT16       = signed 32;
LPFXPT16DOT16     = ^signed 32 for machine_pointer use true;
type
FXPT2DOT30        = signed 32;
LPFXPT2DOT30      = ^signed 32 for machine_pointer use true;
-- /* ICM Color Definitions 
--  The following two structures are used for defining RGB's in terms of CIEXYZ.
type
  tagCIEXYZ         = record
ciexyzX         : FXPT2DOT30;
ciexyzY         : FXPT2DOT30;
ciexyzZ         : FXPT2DOT30;
  end record;
  CIEXYZ            = tagCIEXYZ;

type
LPCIEXYZ          = ^CIEXYZ for machine_pointer use true;
type
  tagICEXYZTRIPLE   = record
ciexyzRed       : CIEXYZ;
ciexyzGreen     : CIEXYZ;
ciexyzBlue      : CIEXYZ;
  end record;
  CIEXYZTRIPLE      = tagICEXYZTRIPLE;

type
LPCIEXYZTRIPLE    = ^CIEXYZTRIPLE for machine_pointer use true;
--  The next structures the logical color space. Unlike pens and brushes,
--  but like palettes, there is only one way to create a LogColorSpace.
--  A pointer to it must be passed, its elements can't be pushed as
--  arguments.
type
  tagLOGCOLORSPACEA = record
lcsSignature    : DWORD;
lcsVersion      : DWORD;
lcsSize         : DWORD;
lcsCSType       : t_LCSCSTYPE;
lcsIntent       : LCSGAMUTMATCH;
lcsEndpoints    : CIEXYZTRIPLE;
lcsGammaRed     : DWORD;
lcsGammaGreen   : DWORD;
lcsGammaBlue    : DWORD;
lcsFilename     : array 0..MAX_PATH-1 of CHAR;
  end record;
  LOGCOLORSPACEA    = tagLOGCOLORSPACEA;
  LPLOGCOLORSPACEA  = ^tagLOGCOLORSPACEA;

type
  tagLOGCOLORSPACEW = record
lcsSignature    : DWORD;
lcsVersion      : DWORD;
lcsSize         : DWORD;
lcsCSType       : t_LCSCSTYPE;
lcsIntent       : LCSGAMUTMATCH;
lcsEndpoints    : CIEXYZTRIPLE;
lcsGammaRed     : DWORD;
lcsGammaGreen   : DWORD;
lcsGammaBlue    : DWORD;
lcsFilename     : array 0..MAX_PATH-1 of WCHAR;
  end record;
  LOGCOLORSPACEW    = tagLOGCOLORSPACEW;
  LPLOGCOLORSPACEW  = ^tagLOGCOLORSPACEW;

#if #declared UNICODE; then;
type
LOGCOLORSPACE     = LOGCOLORSPACEW;
type
LPLOGCOLORSPACE   = LPLOGCOLORSPACEW;
#else;
type
LOGCOLORSPACE     = LOGCOLORSPACEA;
type
LPLOGCOLORSPACE   = LPLOGCOLORSPACEA;
#end if;

-- /* structures for defining DIBs 
type
  tagBITMAPCOREHEADER = record
bcSize          : DWORD;
bcWidth         : WORD;
bcHeight        : WORD;
bcPlanes        : WORD;
bcBitCount      : WORD;
  end record;
  BITMAPCOREHEADER  = tagBITMAPCOREHEADER;
  LPBITMAPCOREHEADER = ^tagBITMAPCOREHEADER;
  PBITMAPCOREHEADER = ^tagBITMAPCOREHEADER;

type
  tagBITMAPINFOHEADER = record
biSize          : DWORD;
biWidth         : LONG;
biHeight        : LONG;
biPlanes        : WORD;
biBitCount      : WORD;
biCompression   : DWORD;
biSizeImage     : DWORD;
biXPelsPerMeter : LONG;
biYPelsPerMeter : LONG;
biClrUsed       : DWORD;
biClrImportant  : DWORD;
  end record;
  BITMAPINFOHEADER  = tagBITMAPINFOHEADER;
  LPBITMAPINFOHEADER = ^tagBITMAPINFOHEADER;
  PBITMAPINFOHEADER = ^tagBITMAPINFOHEADER;

type
  BITMAPV4HEADER    = record
bV4Size         : DWORD;
bV4Width        : LONG;
bV4Height       : LONG;
bV4Planes       : WORD;
bV4BitCount     : WORD;
bV4V4Compression : DWORD;
bV4SizeImage    : DWORD;
bV4XPelsPerMeter : LONG;
bV4YPelsPerMeter : LONG;
bV4ClrUsed      : DWORD;
bV4ClrImportant : DWORD;
bV4RedMask      : DWORD;
bV4GreenMask    : DWORD;
bV4BlueMask     : DWORD;
bV4AlphaMask    : DWORD;
bV4CSType       : DWORD;
bV4Endpoints    : CIEXYZTRIPLE;
bV4GammaRed     : DWORD;
bV4GammaGreen   : DWORD;
bV4GammaBlue    : DWORD;
  end record;
  LPBITMAPV4HEADER  = ^BITMAPV4HEADER;
  PBITMAPV4HEADER   = ^BITMAPV4HEADER;

type
  BITMAPV5HEADER    = record
bV5Size         : DWORD;
bV5Width        : LONG;
bV5Height       : LONG;
bV5Planes       : WORD;
bV5BitCount     : WORD;
bV5Compression  : DWORD;
bV5SizeImage    : DWORD;
bV5XPelsPerMeter : LONG;
bV5YPelsPerMeter : LONG;
bV5ClrUsed      : DWORD;
bV5ClrImportant : DWORD;
bV5RedMask      : DWORD;
bV5GreenMask    : DWORD;
bV5BlueMask     : DWORD;
bV5AlphaMask    : DWORD;
bV5CSType       : DWORD;
bV5Endpoints    : CIEXYZTRIPLE;
bV5GammaRed     : DWORD;
bV5GammaGreen   : DWORD;
bV5GammaBlue    : DWORD;
bV5Intent       : DWORD;
bV5ProfileData  : DWORD;
bV5ProfileSize  : DWORD;
bV5Reserved     : DWORD;
  end record;
  LPBITMAPV5HEADER  = ^BITMAPV5HEADER;
  PBITMAPV5HEADER   = ^BITMAPV5HEADER;

--  Values for bV5CSType
const
  PROFILE_LINKED    = 1279872587;

const
  PROFILE_EMBEDDED  = 1296188740;

-- /* constants for the biCompression field 
const
  BI_RGB            = 0;

const
  BI_RLE8           = 1;

const
  BI_RLE4           = 2;

const
  BI_BITFIELDS      = 3;

const
  BI_JPEG           = 4;

const
  BI_PNG            = 5;

type
  tagBITMAPINFO     = record
bmiHeader       : BITMAPINFOHEADER;
bmiColors       : array 0..0 of RGBQUAD;
  end record;
  BITMAPINFO        = tagBITMAPINFO;
  LPBITMAPINFO      = ^tagBITMAPINFO;
  PBITMAPINFO       = ^tagBITMAPINFO;

type
  tagBITMAPCOREINFO = record
bmciHeader      : BITMAPCOREHEADER;
bmciColors      : array 0..0 of RGBTRIPLE;
  end record;
  BITMAPCOREINFO    = tagBITMAPCOREINFO;
  LPBITMAPCOREINFO  = ^tagBITMAPCOREINFO;
  PBITMAPCOREINFO   = ^tagBITMAPCOREINFO;

-- ignored #include <pshpack2.h>
type
  tagBITMAPFILEHEADER = record
bfType          : WORD;
bfSize          : DWORD;
bfReserved1     : WORD;
bfReserved2     : WORD;
bfOffBits       : DWORD;
  end record;
  BITMAPFILEHEADER  = tagBITMAPFILEHEADER;
  LPBITMAPFILEHEADER = ^tagBITMAPFILEHEADER;
  PBITMAPFILEHEADER = ^tagBITMAPFILEHEADER;

-- ignored #include <poppack.h>
type
  tagFONTSIGNATURE  = record
fsUsb           : array 0..3 of DWORD;
fsCsb           : array 0..1 of DWORD;
  end record;
  FONTSIGNATURE     = tagFONTSIGNATURE;
  PFONTSIGNATURE    = ^tagFONTSIGNATURE;
  LPFONTSIGNATURE   = ^tagFONTSIGNATURE;

type
  tagCHARSETINFO    = record
ciCharset       : UINT;
ciACP           : UINT;
fs              : FONTSIGNATURE;
  end record;
  CHARSETINFO       = tagCHARSETINFO;
  PCHARSETINFO      = ^tagCHARSETINFO;
  NPCHARSETINFO     = ^tagCHARSETINFO;
  LPCHARSETINFO     = ^tagCHARSETINFO;

const
  TCI_SRCCHARSET    = 1;

const
  TCI_SRCCODEPAGE   = 2;

const
  TCI_SRCFONTSIG    = 3;

const
  TCI_SRCLOCALE     = $1000;

type
  tagLOCALESIGNATURE = record
lsUsb           : array 0..3 of DWORD;
lsCsbDefault    : array 0..1 of DWORD;
lsCsbSupported  : array 0..1 of DWORD;
  end record;
  LOCALESIGNATURE   = tagLOCALESIGNATURE;
  PLOCALESIGNATURE  = ^tagLOCALESIGNATURE;
  LPLOCALESIGNATURE = ^tagLOCALESIGNATURE;

-- /* Clipboard Metafile Picture Structure 
type
  tagHANDLETABLE    = record
objectHandle    : array 0..0 of HGDIOBJ;
  end record;
  HANDLETABLE       = tagHANDLETABLE;
  PHANDLETABLE      = ^tagHANDLETABLE;
  LPHANDLETABLE     = ^tagHANDLETABLE;

type
  tagMETARECORD     = record
rdSize          : DWORD;
rdFunction      : WORD;
rdParm          : array 0..0 of WORD;
  end record;
  METARECORD        = tagMETARECORD;

type
  PMETARECORD       = ^tagMETARECORD;
type
  LPMETARECORD      = ^tagMETARECORD;
type
  tagMETAFILEPICT   = record
mm              : LONG;
xExt            : LONG;
yExt            : LONG;
hMF             : HMETAFILE;
  end record;
  METAFILEPICT      = tagMETAFILEPICT;
  LPMETAFILEPICT    = ^tagMETAFILEPICT;

-- ignored #include <pshpack2.h>
type
  tagMETAHEADER     = record
mtType          : WORD;
mtHeaderSize    : WORD;
mtVersion       : WORD;
mtSize          : DWORD;
mtNoObjects     : WORD;
mtMaxRecord     : DWORD;
mtNoParameters  : WORD;
  end record;
  METAHEADER        = tagMETAHEADER;

type
  PMETAHEADER       = ^tagMETAHEADER;
type
  LPMETAHEADER      = ^tagMETAHEADER;
-- ignored #include <poppack.h>
-- /* Enhanced Metafile structures 
type
  tagENHMETARECORD  = record
iType           : DWORD;
nSize           : DWORD;
dParm           : array 0..0 of DWORD;
  end record;
  ENHMETARECORD     = tagENHMETARECORD;
  PENHMETARECORD    = ^tagENHMETARECORD;
  LPENHMETARECORD   = ^tagENHMETARECORD;

type
  tagENHMETAHEADER  = record
iType           : DWORD;
nSize           : DWORD;
rclBounds       : RECTL;
rclFrame        : RECTL;
dSignature      : DWORD;
nVersion        : DWORD;
nBytes          : DWORD;
nRecords        : DWORD;
nHandles        : WORD;
sReserved       : WORD;
nDescription    : DWORD;
offDescription  : DWORD;
nPalEntries     : DWORD;
szlDevice       : SIZEL;
szlMillimeters  : SIZEL;
cbPixelFormat   : DWORD;
offPixelFormat  : DWORD;
bOpenGL         : DWORD;
szlMicrometers  : SIZEL;
  end record;
  ENHMETAHEADER     = tagENHMETAHEADER;
  PENHMETAHEADER    = ^tagENHMETAHEADER;
  LPENHMETAHEADER   = ^tagENHMETAHEADER;

-- /* tmPitchAndFamily flags 
const
  TMPF_FIXED_PITCH  = $01;

const
  TMPF_VECTOR       = $02;

const
  TMPF_DEVICE       = $08;

const
  TMPF_TRUETYPE     = $04;

-- 
--  BCHAR definition for APPs
-- 
#if #declared UNICODE; then;
type
BCHAR             = WCHAR;
#else;
type
BCHAR             = BYTE;
#end if;

type
  tagTEXTMETRICA    = record
tmHeight        : LONG;
tmAscent        : LONG;
tmDescent       : LONG;
tmInternalLeading : LONG;
tmExternalLeading : LONG;
tmAveCharWidth  : LONG;
tmMaxCharWidth  : LONG;
tmWeight        : LONG;
tmOverhang      : LONG;
tmDigitizedAspectX : LONG;
tmDigitizedAspectY : LONG;
tmFirstChar     : BYTE;
tmLastChar      : BYTE;
tmDefaultChar   : BYTE;
tmBreakChar     : BYTE;
tmItalic        : BYTE;
tmUnderlined    : BYTE;
tmStruckOut     : BYTE;
tmPitchAndFamily : BYTE;
tmCharSet       : BYTE;
  end record;
  TEXTMETRICA       = tagTEXTMETRICA;
  PTEXTMETRICA      = ^tagTEXTMETRICA;
  NPTEXTMETRICA     = ^tagTEXTMETRICA;
  LPTEXTMETRICA     = ^tagTEXTMETRICA;

type
  tagTEXTMETRICW    = record
tmHeight        : LONG;
tmAscent        : LONG;
tmDescent       : LONG;
tmInternalLeading : LONG;
tmExternalLeading : LONG;
tmAveCharWidth  : LONG;
tmMaxCharWidth  : LONG;
tmWeight        : LONG;
tmOverhang      : LONG;
tmDigitizedAspectX : LONG;
tmDigitizedAspectY : LONG;
tmFirstChar     : WCHAR;
tmLastChar      : WCHAR;
tmDefaultChar   : WCHAR;
tmBreakChar     : WCHAR;
tmItalic        : BYTE;
tmUnderlined    : BYTE;
tmStruckOut     : BYTE;
tmPitchAndFamily : BYTE;
tmCharSet       : BYTE;
  end record;
  TEXTMETRICW       = tagTEXTMETRICW;
  PTEXTMETRICW      = ^tagTEXTMETRICW;
  NPTEXTMETRICW     = ^tagTEXTMETRICW;
  LPTEXTMETRICW     = ^tagTEXTMETRICW;

#if #declared UNICODE; then;
type
TEXTMETRIC        = TEXTMETRICW;
type
PTEXTMETRIC       = PTEXTMETRICW;
type
NPTEXTMETRIC      = NPTEXTMETRICW;
type
LPTEXTMETRIC      = LPTEXTMETRICW;
#else;
type
TEXTMETRIC        = TEXTMETRICA;
type
PTEXTMETRIC       = PTEXTMETRICA;
type
NPTEXTMETRIC      = NPTEXTMETRICA;
type
LPTEXTMETRIC      = LPTEXTMETRICA;
#end if;

-- /* ntmFlags field flags 
const
  NTM_REGULAR       = $40;

const
  NTM_BOLD          = $20;

const
  NTM_ITALIC        = $01;

-- /* new in NT 5.0 
const
  NTM_NONNEGATIVE_AC= $10000;

const
  NTM_PS_OPENTYPE   = $20000;

const
  NTM_TT_OPENTYPE   = $40000;

const
  NTM_MULTIPLEMASTER= $80000;

const
  NTM_TYPE1         = $100000;

const
  NTM_DSIG          = $200000;

-- ignored #include <pshpack4.h>
type
  tagNEWTEXTMETRICA = record
tmHeight        : LONG;
tmAscent        : LONG;
tmDescent       : LONG;
tmInternalLeading : LONG;
tmExternalLeading : LONG;
tmAveCharWidth  : LONG;
tmMaxCharWidth  : LONG;
tmWeight        : LONG;
tmOverhang      : LONG;
tmDigitizedAspectX : LONG;
tmDigitizedAspectY : LONG;
tmFirstChar     : BYTE;
tmLastChar      : BYTE;
tmDefaultChar   : BYTE;
tmBreakChar     : BYTE;
tmItalic        : BYTE;
tmUnderlined    : BYTE;
tmStruckOut     : BYTE;
tmPitchAndFamily : BYTE;
tmCharSet       : BYTE;
ntmFlags        : DWORD;
ntmSizeEM       : UINT;
ntmCellHeight   : UINT;
ntmAvgWidth     : UINT;
  end record;
  NEWTEXTMETRICA    = tagNEWTEXTMETRICA;
  PNEWTEXTMETRICA   = ^tagNEWTEXTMETRICA;
  NPNEWTEXTMETRICA  = ^tagNEWTEXTMETRICA;
  LPNEWTEXTMETRICA  = ^tagNEWTEXTMETRICA;

type
  tagNEWTEXTMETRICW = record
tmHeight        : LONG;
tmAscent        : LONG;
tmDescent       : LONG;
tmInternalLeading : LONG;
tmExternalLeading : LONG;
tmAveCharWidth  : LONG;
tmMaxCharWidth  : LONG;
tmWeight        : LONG;
tmOverhang      : LONG;
tmDigitizedAspectX : LONG;
tmDigitizedAspectY : LONG;
tmFirstChar     : WCHAR;
tmLastChar      : WCHAR;
tmDefaultChar   : WCHAR;
tmBreakChar     : WCHAR;
tmItalic        : BYTE;
tmUnderlined    : BYTE;
tmStruckOut     : BYTE;
tmPitchAndFamily : BYTE;
tmCharSet       : BYTE;
ntmFlags        : DWORD;
ntmSizeEM       : UINT;
ntmCellHeight   : UINT;
ntmAvgWidth     : UINT;
  end record;
  NEWTEXTMETRICW    = tagNEWTEXTMETRICW;
  PNEWTEXTMETRICW   = ^tagNEWTEXTMETRICW;
  NPNEWTEXTMETRICW  = ^tagNEWTEXTMETRICW;
  LPNEWTEXTMETRICW  = ^tagNEWTEXTMETRICW;

#if #declared UNICODE; then;
type
NEWTEXTMETRIC     = NEWTEXTMETRICW;
type
PNEWTEXTMETRIC    = PNEWTEXTMETRICW;
type
NPNEWTEXTMETRIC   = NPNEWTEXTMETRICW;
type
LPNEWTEXTMETRIC   = LPNEWTEXTMETRICW;
#else;
type
NEWTEXTMETRIC     = NEWTEXTMETRICA;
type
PNEWTEXTMETRIC    = PNEWTEXTMETRICA;
type
NPNEWTEXTMETRIC   = NPNEWTEXTMETRICA;
type
LPNEWTEXTMETRIC   = LPNEWTEXTMETRICA;
#end if;

-- ignored #include <poppack.h>
type
  tagNEWTEXTMETRICEXA = record
ntmTm           : NEWTEXTMETRICA;
ntmFontSig      : FONTSIGNATURE;
  end record;
  NEWTEXTMETRICEXA  = tagNEWTEXTMETRICEXA;

type
  tagNEWTEXTMETRICEXW = record
ntmTm           : NEWTEXTMETRICW;
ntmFontSig      : FONTSIGNATURE;
  end record;
  NEWTEXTMETRICEXW  = tagNEWTEXTMETRICEXW;

#if #declared UNICODE; then;
type
NEWTEXTMETRICEX   = NEWTEXTMETRICEXW;
#else;
type
NEWTEXTMETRICEX   = NEWTEXTMETRICEXA;
#end if;

-- /* GDI Logical Objects: 
-- /* Pel Array 
type
  tagPELARRAY       = record
paXCount        : LONG;
paYCount        : LONG;
paXExt          : LONG;
paYExt          : LONG;
paRGBs          : BYTE;
  end record;
  PELARRAY          = tagPELARRAY;
  PPELARRAY         = ^tagPELARRAY;
  NPPELARRAY        = ^tagPELARRAY;
  LPPELARRAY        = ^tagPELARRAY;

-- /* Logical Brush (or Pattern) 
type
  tagLOGBRUSH       = record
lbStyle         : UINT;
lbColor         : COLORREF;
lbHatch         : ULONG_PTR;
  end record;
  LOGBRUSH          = tagLOGBRUSH;
  PLOGBRUSH         = ^tagLOGBRUSH;
  NPLOGBRUSH        = ^tagLOGBRUSH;
  LPLOGBRUSH        = ^tagLOGBRUSH;

type
  tagLOGBRUSH32     = record
lbStyle         : UINT;
lbColor         : COLORREF;
lbHatch         : ULONG;
  end record;
  LOGBRUSH32        = tagLOGBRUSH32;
  PLOGBRUSH32       = ^tagLOGBRUSH32;
  NPLOGBRUSH32      = ^tagLOGBRUSH32;
  LPLOGBRUSH32      = ^tagLOGBRUSH32;

type
PATTERN           = LOGBRUSH;
type
PPATTERN          = ^PATTERN for machine_pointer use true;
type
NPPATTERN         = ^PATTERN for machine_pointer use true;
type
LPPATTERN         = ^PATTERN for machine_pointer use true;
-- /* Logical Pen 
type
  tagLOGPEN         = record
lopnStyle       : UINT;
lopnWidth       : t_POINT;
lopnColor       : COLORREF;
  end record;
  LOGPEN            = tagLOGPEN;
  PLOGPEN           = ^tagLOGPEN;
  NPLOGPEN          = ^tagLOGPEN;
  LPLOGPEN          = ^tagLOGPEN;

type
  tagEXTLOGPEN      = record
elpPenStyle     : DWORD;
elpWidth        : DWORD;
elpBrushStyle   : UINT;
elpColor        : COLORREF;
elpHatch        : ULONG_PTR;
elpNumEntries   : DWORD;
elpStyleEntry   : array 0..0 of DWORD;
  end record;
  EXTLOGPEN         = tagEXTLOGPEN;
  PEXTLOGPEN        = ^tagEXTLOGPEN;
  NPEXTLOGPEN       = ^tagEXTLOGPEN;
  LPEXTLOGPEN       = ^tagEXTLOGPEN;

type
  tagPALETTEENTRY   = record
peRed           : BYTE;
peGreen         : BYTE;
peBlue          : BYTE;
peFlags         : BYTE;
  end record;
  PALETTEENTRY      = tagPALETTEENTRY;
  PPALETTEENTRY     = ^tagPALETTEENTRY;
  LPPALETTEENTRY    = ^tagPALETTEENTRY;

-- /* Logical Palette 
type
  tagLOGPALETTE     = record
palVersion      : WORD;
palNumEntries   : WORD;
palPalEntry     : array 0..0 of PALETTEENTRY;
  end record;
  LOGPALETTE        = tagLOGPALETTE;
  PLOGPALETTE       = ^tagLOGPALETTE;
  NPLOGPALETTE      = ^tagLOGPALETTE;
  LPLOGPALETTE      = ^tagLOGPALETTE;

-- /* Logical Font 
const
  LF_FACESIZE       = 32;

type
  tagLOGFONTA       = record
lfHeight        : LONG;
lfWidth         : LONG;
lfEscapement    : LONG;
lfOrientation   : LONG;
lfWeight        : LONG;
lfItalic        : BYTE;
lfUnderline     : BYTE;
lfStrikeOut     : BYTE;
lfCharSet       : BYTE;
lfOutPrecision  : BYTE;
lfClipPrecision : BYTE;
lfQuality       : BYTE;
lfPitchAndFamily : BYTE;
lfFaceName      : array 0..LF_FACESIZE-1 of CHAR;
  end record;
  LOGFONTA          = tagLOGFONTA;
  PLOGFONTA         = ^tagLOGFONTA;
  NPLOGFONTA        = ^tagLOGFONTA;
  LPLOGFONTA        = ^tagLOGFONTA;

type
  tagLOGFONTW       = record
lfHeight        : LONG;
lfWidth         : LONG;
lfEscapement    : LONG;
lfOrientation   : LONG;
lfWeight        : LONG;
lfItalic        : BYTE;
lfUnderline     : BYTE;
lfStrikeOut     : BYTE;
lfCharSet       : BYTE;
lfOutPrecision  : BYTE;
lfClipPrecision : BYTE;
lfQuality       : BYTE;
lfPitchAndFamily : BYTE;
lfFaceName      : array 0..LF_FACESIZE-1 of WCHAR;
  end record;
  LOGFONTW          = tagLOGFONTW;
  PLOGFONTW         = ^tagLOGFONTW;
  NPLOGFONTW        = ^tagLOGFONTW;
  LPLOGFONTW        = ^tagLOGFONTW;

#if #declared UNICODE; then;
type
LOGFONT           = LOGFONTW;
type
PLOGFONT          = PLOGFONTW;
type
NPLOGFONT         = NPLOGFONTW;
type
LPLOGFONT         = LPLOGFONTW;
#else;
type
LOGFONT           = LOGFONTA;
type
PLOGFONT          = PLOGFONTA;
type
NPLOGFONT         = NPLOGFONTA;
type
LPLOGFONT         = LPLOGFONTA;
#end if;

const
  LF_FULLFACESIZE   = 64;

-- /* Structure passed to FONTENUMPROC 
type
  tagENUMLOGFONTA   = record
elfLogFont      : LOGFONTA;
elfFullName     : array 0..LF_FULLFACESIZE-1 of BYTE;
elfStyle        : array 0..LF_FACESIZE-1 of BYTE;
  end record;
  ENUMLOGFONTA      = tagENUMLOGFONTA;
  LPENUMLOGFONTA    = ^tagENUMLOGFONTA;

-- /* Structure passed to FONTENUMPROC 
type
  tagENUMLOGFONTW   = record
elfLogFont      : LOGFONTW;
elfFullName     : array 0..LF_FULLFACESIZE-1 of WCHAR;
elfStyle        : array 0..LF_FACESIZE-1 of WCHAR;
  end record;
  ENUMLOGFONTW      = tagENUMLOGFONTW;
  LPENUMLOGFONTW    = ^tagENUMLOGFONTW;

#if #declared UNICODE; then;
type
ENUMLOGFONT       = ENUMLOGFONTW;
type
LPENUMLOGFONT     = LPENUMLOGFONTW;
#else;
type
ENUMLOGFONT       = ENUMLOGFONTA;
type
LPENUMLOGFONT     = LPENUMLOGFONTA;
#end if;

type
  tagENUMLOGFONTEXA = record
elfLogFont      : LOGFONTA;
elfFullName     : array 0..LF_FULLFACESIZE-1 of BYTE;
elfStyle        : array 0..LF_FACESIZE-1 of BYTE;
elfScript       : array 0..LF_FACESIZE-1 of BYTE;
  end record;
  ENUMLOGFONTEXA    = tagENUMLOGFONTEXA;
  LPENUMLOGFONTEXA  = ^tagENUMLOGFONTEXA;

type
  tagENUMLOGFONTEXW = record
elfLogFont      : LOGFONTW;
elfFullName     : array 0..LF_FULLFACESIZE-1 of WCHAR;
elfStyle        : array 0..LF_FACESIZE-1 of WCHAR;
elfScript       : array 0..LF_FACESIZE-1 of WCHAR;
  end record;
  ENUMLOGFONTEXW    = tagENUMLOGFONTEXW;
  LPENUMLOGFONTEXW  = ^tagENUMLOGFONTEXW;

#if #declared UNICODE; then;
type
ENUMLOGFONTEX     = ENUMLOGFONTEXW;
type
LPENUMLOGFONTEX   = LPENUMLOGFONTEXW;
#else;
type
ENUMLOGFONTEX     = ENUMLOGFONTEXA;
type
LPENUMLOGFONTEX   = LPENUMLOGFONTEXA;
#end if;

const
  OUT_DEFAULT_PRECIS= 0;

const
  OUT_STRING_PRECIS = 1;

const
  OUT_CHARACTER_PRECIS= 2;

const
  OUT_STROKE_PRECIS = 3;

const
  OUT_TT_PRECIS     = 4;

const
  OUT_DEVICE_PRECIS = 5;

const
  OUT_RASTER_PRECIS = 6;

const
  OUT_TT_ONLY_PRECIS= 7;

const
  OUT_OUTLINE_PRECIS= 8;

const
  OUT_SCREEN_OUTLINE_PRECIS= 9;

const
  OUT_PS_ONLY_PRECIS= 10;

const
  CLIP_DEFAULT_PRECIS= 0;

const
  CLIP_CHARACTER_PRECIS= 1;

const
  CLIP_STROKE_PRECIS= 2;

const
  CLIP_MASK         = $0F;

const
  DEFAULT_QUALITY   = 0;

const
  DRAFT_QUALITY     = 1;

const
  PROOF_QUALITY     = 2;

const
  NONANTIALIASED_QUALITY= 3;

const
  ANTIALIASED_QUALITY= 4;

const
  CLEARTYPE_QUALITY = 5;

const
  CLEARTYPE_NATURAL_QUALITY= 6;

const
  DEFAULT_PITCH     = 0;

const
  FIXED_PITCH       = 1;

const
  VARIABLE_PITCH    = 2;

const
  MONO_FONT         = 8;

const
  ANSI_CHARSET      = 0;

const
  DEFAULT_CHARSET   = 1;

const
  SYMBOL_CHARSET    = 2;

const
  SHIFTJIS_CHARSET  = 128;

const
  HANGEUL_CHARSET   = 129;

const
  HANGUL_CHARSET    = 129;

const
  GB2312_CHARSET    = 134;

const
  CHINESEBIG5_CHARSET= 136;

const
  OEM_CHARSET       = 255;

const
  JOHAB_CHARSET     = 130;

const
  HEBREW_CHARSET    = 177;

const
  ARABIC_CHARSET    = 178;

const
  GREEK_CHARSET     = 161;

const
  TURKISH_CHARSET   = 162;

const
  VIETNAMESE_CHARSET= 163;

const
  THAI_CHARSET      = 222;

const
  EASTEUROPE_CHARSET= 238;

const
  RUSSIAN_CHARSET   = 204;

const
  MAC_CHARSET       = 77;

const
  BALTIC_CHARSET    = 186;

const
  FS_LATIN1         = $01;

const
  FS_LATIN2         = $02;

const
  FS_CYRILLIC       = $04;

const
  FS_GREEK          = $08;

const
  FS_TURKISH        = $10;

const
  FS_HEBREW         = $20;

const
  FS_ARABIC         = $40;

const
  FS_BALTIC         = $80;

const
  FS_VIETNAMESE     = $0100;

const
  FS_THAI           = $10000;

const
  FS_JISJAPAN       = $20000;

const
  FS_CHINESESIMP    = $40000;

const
  FS_WANSUNG        = $80000;

const
  FS_CHINESETRAD    = $100000;

const
  FS_JOHAB          = $200000;

const
  FS_SYMBOL         = $80000000;

-- /* Font Families 
-- /* Times Roman, Century Schoolbook, etc. 
-- /* Helvetica, Swiss, etc. 
-- /* Pica, Elite, Courier, etc. 
-- /* Font Weights 
const
  FW_DONTCARE       = 0;

const
  FW_THIN           = 100;

const
  FW_EXTRALIGHT     = 200;

const
  FW_LIGHT          = 300;

const
  FW_NORMAL         = 400;

const
  FW_MEDIUM         = 500;

const
  FW_SEMIBOLD       = 600;

const
  FW_BOLD           = 700;

const
  FW_EXTRABOLD      = 800;

const
  FW_HEAVY          = 900;

const
  PANOSE_COUNT      = 10;

const
  PAN_FAMILYTYPE_INDEX= 0;

const
  PAN_SERIFSTYLE_INDEX= 1;

const
  PAN_WEIGHT_INDEX  = 2;

const
  PAN_PROPORTION_INDEX= 3;

const
  PAN_CONTRAST_INDEX= 4;

const
  PAN_STROKEVARIATION_INDEX= 5;

const
  PAN_ARMSTYLE_INDEX= 6;

const
  PAN_LETTERFORM_INDEX= 7;

const
  PAN_MIDLINE_INDEX = 8;

const
  PAN_XHEIGHT_INDEX = 9;

const
  PAN_CULTURE_LATIN = 0;

type
  tagPANOSE         = record
bFamilyType     : BYTE;
bSerifStyle     : BYTE;
bWeight         : BYTE;
bProportion     : BYTE;
bContrast       : BYTE;
bStrokeVariation : BYTE;
bArmStyle       : BYTE;
bLetterform     : BYTE;
bMidline        : BYTE;
bXHeight        : BYTE;
  end record;
  PANOSE            = tagPANOSE;
  LPPANOSE          = ^tagPANOSE;

const
  PAN_ANY           = 0;

const
  PAN_NO_FIT        = 1;

const
  PAN_FAMILY_TEXT_DISPLAY= 2;

const
  PAN_FAMILY_SCRIPT = 3;

const
  PAN_FAMILY_DECORATIVE= 4;

const
  PAN_FAMILY_PICTORIAL= 5;

const
  PAN_SERIF_COVE    = 2;

const
  PAN_SERIF_OBTUSE_COVE= 3;

const
  PAN_SERIF_SQUARE_COVE= 4;

const
  PAN_SERIF_OBTUSE_SQUARE_COVE= 5;

const
  PAN_SERIF_SQUARE  = 6;

const
  PAN_SERIF_THIN    = 7;

const
  PAN_SERIF_BONE    = 8;

const
  PAN_SERIF_EXAGGERATED= 9;

const
  PAN_SERIF_TRIANGLE= 10;

const
  PAN_SERIF_NORMAL_SANS= 11;

const
  PAN_SERIF_OBTUSE_SANS= 12;

const
  PAN_SERIF_PERP_SANS= 13;

const
  PAN_SERIF_FLARED  = 14;

const
  PAN_SERIF_ROUNDED = 15;

const
  PAN_WEIGHT_VERY_LIGHT= 2;

const
  PAN_WEIGHT_LIGHT  = 3;

const
  PAN_WEIGHT_THIN   = 4;

const
  PAN_WEIGHT_BOOK   = 5;

const
  PAN_WEIGHT_MEDIUM = 6;

const
  PAN_WEIGHT_DEMI   = 7;

const
  PAN_WEIGHT_BOLD   = 8;

const
  PAN_WEIGHT_HEAVY  = 9;

const
  PAN_WEIGHT_BLACK  = 10;

const
  PAN_WEIGHT_NORD   = 11;

const
  PAN_PROP_OLD_STYLE= 2;

const
  PAN_PROP_MODERN   = 3;

const
  PAN_PROP_EVEN_WIDTH= 4;

const
  PAN_PROP_EXPANDED = 5;

const
  PAN_PROP_CONDENSED= 6;

const
  PAN_PROP_VERY_EXPANDED= 7;

const
  PAN_PROP_VERY_CONDENSED= 8;

const
  PAN_PROP_MONOSPACED= 9;

const
  PAN_CONTRAST_NONE = 2;

const
  PAN_CONTRAST_VERY_LOW= 3;

const
  PAN_CONTRAST_LOW  = 4;

const
  PAN_CONTRAST_MEDIUM_LOW= 5;

const
  PAN_CONTRAST_MEDIUM= 6;

const
  PAN_CONTRAST_MEDIUM_HIGH= 7;

const
  PAN_CONTRAST_HIGH = 8;

const
  PAN_CONTRAST_VERY_HIGH= 9;

const
  PAN_STROKE_GRADUAL_DIAG= 2;

const
  PAN_STROKE_GRADUAL_TRAN= 3;

const
  PAN_STROKE_GRADUAL_VERT= 4;

const
  PAN_STROKE_GRADUAL_HORZ= 5;

const
  PAN_STROKE_RAPID_VERT= 6;

const
  PAN_STROKE_RAPID_HORZ= 7;

const
  PAN_STROKE_INSTANT_VERT= 8;

const
  PAN_STRAIGHT_ARMS_HORZ= 2;

const
  PAN_STRAIGHT_ARMS_WEDGE= 3;

const
  PAN_STRAIGHT_ARMS_VERT= 4;

const
  PAN_STRAIGHT_ARMS_SINGLE_SERIF= 5;

const
  PAN_STRAIGHT_ARMS_DOUBLE_SERIF= 6;

const
  PAN_BENT_ARMS_HORZ= 7;

const
  PAN_BENT_ARMS_WEDGE= 8;

const
  PAN_BENT_ARMS_VERT= 9;

const
  PAN_BENT_ARMS_SINGLE_SERIF= 10;

const
  PAN_BENT_ARMS_DOUBLE_SERIF= 11;

const
  PAN_LETT_NORMAL_CONTACT= 2;

const
  PAN_LETT_NORMAL_WEIGHTED= 3;

const
  PAN_LETT_NORMAL_BOXED= 4;

const
  PAN_LETT_NORMAL_FLATTENED= 5;

const
  PAN_LETT_NORMAL_ROUNDED= 6;

const
  PAN_LETT_NORMAL_OFF_CENTER= 7;

const
  PAN_LETT_NORMAL_SQUARE= 8;

const
  PAN_LETT_OBLIQUE_CONTACT= 9;

const
  PAN_LETT_OBLIQUE_WEIGHTED= 10;

const
  PAN_LETT_OBLIQUE_BOXED= 11;

const
  PAN_LETT_OBLIQUE_FLATTENED= 12;

const
  PAN_LETT_OBLIQUE_ROUNDED= 13;

const
  PAN_LETT_OBLIQUE_OFF_CENTER= 14;

const
  PAN_LETT_OBLIQUE_SQUARE= 15;

const
  PAN_MIDLINE_STANDARD_TRIMMED= 2;

const
  PAN_MIDLINE_STANDARD_POINTED= 3;

const
  PAN_MIDLINE_STANDARD_SERIFED= 4;

const
  PAN_MIDLINE_HIGH_TRIMMED= 5;

const
  PAN_MIDLINE_HIGH_POINTED= 6;

const
  PAN_MIDLINE_HIGH_SERIFED= 7;

const
  PAN_MIDLINE_CONSTANT_TRIMMED= 8;

const
  PAN_MIDLINE_CONSTANT_POINTED= 9;

const
  PAN_MIDLINE_CONSTANT_SERIFED= 10;

const
  PAN_MIDLINE_LOW_TRIMMED= 11;

const
  PAN_MIDLINE_LOW_POINTED= 12;

const
  PAN_MIDLINE_LOW_SERIFED= 13;

const
  PAN_XHEIGHT_CONSTANT_SMALL= 2;

const
  PAN_XHEIGHT_CONSTANT_STD= 3;

const
  PAN_XHEIGHT_CONSTANT_LARGE= 4;

const
  PAN_XHEIGHT_DUCKING_SMALL= 5;

const
  PAN_XHEIGHT_DUCKING_STD= 6;

const
  PAN_XHEIGHT_DUCKING_LARGE= 7;

const
  ELF_VENDOR_SIZE   = 4;

-- /* The extended logical font       
-- /* An extension of the ENUMLOGFONT 
type
  tagEXTLOGFONTA    = record
elfLogFont      : LOGFONTA;
elfFullName     : array 0..LF_FULLFACESIZE-1 of BYTE;
elfStyle        : array 0..LF_FACESIZE-1 of BYTE;
elfVersion      : DWORD;
elfStyleSize    : DWORD;
elfMatch        : DWORD;
elfReserved     : DWORD;
elfVendorId     : array 0..ELF_VENDOR_SIZE-1 of BYTE;
elfCulture      : DWORD;
elfPanose       : PANOSE;
  end record;
  EXTLOGFONTA       = tagEXTLOGFONTA;
  PEXTLOGFONTA      = ^tagEXTLOGFONTA;
  NPEXTLOGFONTA     = ^tagEXTLOGFONTA;
  LPEXTLOGFONTA     = ^tagEXTLOGFONTA;

type
  tagEXTLOGFONTW    = record
elfLogFont      : LOGFONTW;
elfFullName     : array 0..LF_FULLFACESIZE-1 of WCHAR;
elfStyle        : array 0..LF_FACESIZE-1 of WCHAR;
elfVersion      : DWORD;
elfStyleSize    : DWORD;
elfMatch        : DWORD;
elfReserved     : DWORD;
elfVendorId     : array 0..ELF_VENDOR_SIZE-1 of BYTE;
elfCulture      : DWORD;
elfPanose       : PANOSE;
  end record;
  EXTLOGFONTW       = tagEXTLOGFONTW;
  PEXTLOGFONTW      = ^tagEXTLOGFONTW;
  NPEXTLOGFONTW     = ^tagEXTLOGFONTW;
  LPEXTLOGFONTW     = ^tagEXTLOGFONTW;

#if #declared UNICODE; then;
type
EXTLOGFONT        = EXTLOGFONTW;
type
PEXTLOGFONT       = PEXTLOGFONTW;
type
NPEXTLOGFONT      = NPEXTLOGFONTW;
type
LPEXTLOGFONT      = LPEXTLOGFONTW;
#else;
type
EXTLOGFONT        = EXTLOGFONTA;
type
PEXTLOGFONT       = PEXTLOGFONTA;
type
NPEXTLOGFONT      = NPEXTLOGFONTA;
type
LPEXTLOGFONT      = LPEXTLOGFONTA;
#end if;

const
  ELF_VERSION       = 0;

const
  ELF_CULTURE_LATIN = 0;

-- /* EnumFonts Masks 
const
  RASTER_FONTTYPE   = $01;

const
  DEVICE_FONTTYPE   = $02;

const
  TRUETYPE_FONTTYPE = $04;

-- /* palette entry flags 
const
  PC_RESERVED       = $01;

const
  PC_EXPLICIT       = $02;

const
  PC_NOCOLLAPSE     = $04;

-- /* Background Modes 
const
  TRANSPARENT       = 1;

const
  OPAQUE            = 2;

const
  BKMODE_LAST       = 2;

-- /* Graphics Modes 
const
  GM_COMPATIBLE     = 1;

const
  GM_ADVANCED       = 2;

const
  GM_LAST           = 2;

-- /* PolyDraw and GetPath point types 
const
  PT_CLOSEFIGURE    = $01;

const
  PT_LINETO         = $02;

const
  PT_BEZIERTO       = $04;

const
  PT_MOVETO         = $06;

-- /* Mapping Modes 
const
  MM_TEXT           = 1;

const
  MM_LOMETRIC       = 2;

const
  MM_HIMETRIC       = 3;

const
  MM_LOENGLISH      = 4;

const
  MM_HIENGLISH      = 5;

const
  MM_TWIPS          = 6;

const
  MM_ISOTROPIC      = 7;

const
  MM_ANISOTROPIC    = 8;

-- /* Min and Max Mapping Mode values 
-- /* Coordinate Modes 
const
  ABSOLUTE          = 1;

const
  RELATIVE          = 2;

-- /* Stock Logical Objects 
const
  WHITE_BRUSH       = 0;

const
  LTGRAY_BRUSH      = 1;

const
  GRAY_BRUSH        = 2;

const
  DKGRAY_BRUSH      = 3;

const
  BLACK_BRUSH       = 4;

const
  NULL_BRUSH        = 5;

const
  WHITE_PEN         = 6;

const
  BLACK_PEN         = 7;

const
  NULL_PEN          = 8;

const
  OEM_FIXED_FONT    = 10;

const
  ANSI_FIXED_FONT   = 11;

const
  ANSI_VAR_FONT     = 12;

const
  SYSTEM_FONT       = 13;

const
  DEVICE_DEFAULT_FONT= 14;

const
  DEFAULT_PALETTE   = 15;

const
  SYSTEM_FIXED_FONT = 16;

const
  DEFAULT_GUI_FONT  = 17;

const
  DC_BRUSH          = 18;

const
  DC_PEN            = 19;

const
  STOCK_LAST        = 19;

const
  CLR_INVALID       = $FFFFFFFF;

-- /* Brush Styles 
const
  BS_SOLID          = 0;

const
  BS_NULL           = 1;

const
  BS_HATCHED        = 2;

const
  BS_PATTERN        = 3;

const
  BS_INDEXED        = 4;

const
  BS_DIBPATTERN     = 5;

const
  BS_DIBPATTERNPT   = 6;

const
  BS_PATTERN8X8     = 7;

const
  BS_DIBPATTERN8X8  = 8;

const
  BS_MONOPATTERN    = 9;

-- /* Hatch Styles 
const
  HS_HORIZONTAL     = 0;

const
  HS_VERTICAL       = 1;

const
  HS_FDIAGONAL      = 2;

const
  HS_BDIAGONAL      = 3;

const
  HS_CROSS          = 4;

const
  HS_DIAGCROSS      = 5;

-- /* Pen Styles 
const
  PS_SOLID          = 0;

const
  PS_DASH           = 1;

const
  PS_DOT            = 2;

const
  PS_DASHDOT        = 3;

const
  PS_DASHDOTDOT     = 4;

const
  PS_NULL           = 5;

const
  PS_INSIDEFRAME    = 6;

const
  PS_USERSTYLE      = 7;

const
  PS_ALTERNATE      = 8;

const
  PS_STYLE_MASK     = $0F;

const
  PS_ENDCAP_ROUND   = $00;

const
  PS_ENDCAP_SQUARE  = $0100;

const
  PS_ENDCAP_FLAT    = $0200;

const
  PS_ENDCAP_MASK    = $0F00;

const
  PS_JOIN_ROUND     = $00;

const
  PS_JOIN_BEVEL     = $1000;

const
  PS_JOIN_MITER     = $2000;

const
  PS_JOIN_MASK      = $F000;

const
  PS_COSMETIC       = $00;

const
  PS_GEOMETRIC      = $10000;

const
  PS_TYPE_MASK      = $F0000;

const
  AD_COUNTERCLOCKWISE= 1;

const
  AD_CLOCKWISE      = 2;

-- /* Device Parameters for GetDeviceCaps() 
const
  DRIVERVERSION     = 0;

const
  TECHNOLOGY        = 2;

const
  HORZSIZE          = 4;

const
  VERTSIZE          = 6;

const
  HORZRES           = 8;

const
  VERTRES           = 10;

const
  BITSPIXEL         = 12;

const
  PLANES            = 14;

const
  NUMBRUSHES        = 16;

const
  NUMPENS           = 18;

const
  NUMMARKERS        = 20;

const
  NUMFONTS          = 22;

const
  NUMCOLORS         = 24;

const
  PDEVICESIZE       = 26;

const
  CURVECAPS         = 28;

const
  LINECAPS          = 30;

const
  POLYGONALCAPS     = 32;

const
  TEXTCAPS          = 34;

const
  CLIPCAPS          = 36;

const
  RASTERCAPS        = 38;

const
  ASPECTX           = 40;

const
  ASPECTY           = 42;

const
  ASPECTXY          = 44;

const
  LOGPIXELSX        = 88;

const
  LOGPIXELSY        = 90;

const
  SIZEPALETTE       = 104;

const
  NUMRESERVED       = 106;

const
  COLORRES          = 108;

--  Printing related DeviceCaps. These replace the appropriate Escapes
const
  PHYSICALWIDTH     = 110;

const
  PHYSICALHEIGHT    = 111;

const
  PHYSICALOFFSETX   = 112;

const
  PHYSICALOFFSETY   = 113;

const
  SCALINGFACTORX    = 114;

const
  SCALINGFACTORY    = 115;

--  Display driver specific
const
  VREFRESH          = 116;

-- /* display device (for displays only) in Hz
const
  DESKTOPVERTRES    = 117;

-- /* pixels                                  
const
  DESKTOPHORZRES    = 118;

-- /* pixels                                  
const
  BLTALIGNMENT      = 119;

const
  SHADEBLENDCAPS    = 120;

const
  COLORMGMTCAPS     = 121;

-- /* Device Capability Masks: 
-- /* Device Technologies 
const
  DT_PLOTTER        = 0;

const
  DT_RASDISPLAY     = 1;

const
  DT_RASPRINTER     = 2;

const
  DT_RASCAMERA      = 3;

const
  DT_CHARSTREAM     = 4;

const
  DT_METAFILE       = 5;

const
  DT_DISPFILE       = 6;

-- /* Curve Capabilities 
const
  CC_NONE           = 0;

const
  CC_CIRCLES        = 1;

const
  CC_PIE            = 2;

const
  CC_CHORD          = 4;

const
  CC_ELLIPSES       = 8;

const
  CC_WIDE           = 16;

const
  CC_STYLED         = 32;

const
  CC_WIDESTYLED     = 64;

const
  CC_INTERIORS      = 128;

const
  CC_ROUNDRECT      = 256;

-- /* Line Capabilities 
const
  LC_NONE           = 0;

const
  LC_POLYLINE       = 2;

const
  LC_MARKER         = 4;

const
  LC_POLYMARKER     = 8;

const
  LC_WIDE           = 16;

const
  LC_STYLED         = 32;

const
  LC_WIDESTYLED     = 64;

const
  LC_INTERIORS      = 128;

-- /* Polygonal Capabilities 
const
  PC_NONE           = 0;

const
  PC_POLYGON        = 1;

const
  PC_RECTANGLE      = 2;

const
  PC_WINDPOLYGON    = 4;

const
  PC_TRAPEZOID      = 4;

const
  PC_SCANLINE       = 8;

const
  PC_WIDE           = 16;

const
  PC_STYLED         = 32;

const
  PC_WIDESTYLED     = 64;

const
  PC_INTERIORS      = 128;

const
  PC_POLYPOLYGON    = 256;

const
  PC_PATHS          = 512;

-- /* Clipping Capabilities 
const
  CP_NONE           = 0;

const
  CP_RECTANGLE      = 1;

const
  CP_REGION         = 2;

-- /* Text Capabilities 
const
  TC_OP_CHARACTER   = $01;

const
  TC_OP_STROKE      = $02;

const
  TC_CP_STROKE      = $04;

const
  TC_CR_90          = $08;

const
  TC_CR_ANY         = $10;

const
  TC_SF_X_YINDEP    = $20;

const
  TC_SA_DOUBLE      = $40;

const
  TC_SA_INTEGER     = $80;

const
  TC_SA_CONTIN      = $0100;

const
  TC_EA_DOUBLE      = $0200;

const
  TC_IA_ABLE        = $0400;

const
  TC_UA_ABLE        = $0800;

const
  TC_SO_ABLE        = $1000;

const
  TC_RA_ABLE        = $2000;

const
  TC_VA_ABLE        = $4000;

const
  TC_RESERVED       = $8000;

const
  TC_SCROLLBLT      = $10000;

-- /* Raster Capabilities 
const
  RC_BITBLT         = 1;

const
  RC_BANDING        = 2;

const
  RC_SCALING        = 4;

const
  RC_BITMAP64       = 8;

const
  RC_GDI20_OUTPUT   = $10;

const
  RC_GDI20_STATE    = $20;

const
  RC_SAVEBITMAP     = $40;

const
  RC_DI_BITMAP      = $80;

const
  RC_PALETTE        = $0100;

const
  RC_DIBTODEV       = $0200;

const
  RC_BIGFONT        = $0400;

const
  RC_STRETCHBLT     = $0800;

const
  RC_FLOODFILL      = $1000;

const
  RC_STRETCHDIB     = $2000;

const
  RC_OP_DX_OUTPUT   = $4000;

const
  RC_DEVBITS        = $8000;

-- /* Shading and blending caps 
const
  SB_NONE           = $00;

const
  SB_CONST_ALPHA    = $01;

const
  SB_PIXEL_ALPHA    = $02;

const
  SB_PREMULT_ALPHA  = $04;

const
  SB_GRAD_RECT      = $10;

const
  SB_GRAD_TRI       = $20;

-- /* Color Management caps 
const
  CM_NONE           = $00;

const
  CM_DEVICE_ICM     = $01;

const
  CM_GAMMA_RAMP     = $02;

const
  CM_CMYK_COLOR     = $04;

-- /* DIB color table identifiers 
const
  DIB_RGB_COLORS    = 0;

const
  DIB_PAL_COLORS    = 1;

-- /* constants for Get/SetSystemPaletteUse() 
const
  SYSPAL_ERROR      = 0;

const
  SYSPAL_STATIC     = 1;

const
  SYSPAL_NOSTATIC   = 2;

const
  SYSPAL_NOSTATIC256= 3;

-- /* constants for CreateDIBitmap 
const
  CBM_INIT          = $04;

-- /* ExtFloodFill style flags 
const
  FLOODFILLBORDER   = 0;

const
  FLOODFILLSURFACE  = 1;

-- /* size of a device name string 
const
  CCHDEVICENAME     = 32;

-- /* size of a form name string 
const
  CCHFORMNAME       = 32;

type
  _devicemodeA      = record
dmDeviceName    : array 0..CCHDEVICENAME-1 of BYTE;
dmSpecVersion   : WORD;
dmDriverVersion : WORD;
dmSize          : WORD;
dmDriverExtra   : WORD;
dmFields        : DWORD;
t_001            : record
dmOrientation   : signed 16;
dmPaperSize     : signed 16;
dmPaperLength   : signed 16;
dmPaperWidth    : signed 16;
dmScale         : signed 16;
dmCopies        : signed 16;
dmDefaultSource : signed 16;
dmPrintQuality  : signed 16;
dmPosition      : POINTL;
dmDisplayOrientation : DWORD;
dmDisplayFixedOutput : DWORD;
    end record;
dmColor         : signed 16;
dmDuplex        : signed 16;
dmYResolution   : signed 16;
dmTTOption      : signed 16;
dmCollate       : signed 16;
dmFormName      : array 0..CCHFORMNAME-1 of BYTE;
dmLogPixels     : WORD;
dmBitsPerPel    : DWORD;
dmPelsWidth     : DWORD;
dmPelsHeight    : DWORD;
t_002            : record
      dmDisplayFlags : DWORD for position use 0;
      dmNup         : DWORD for position use 0;
    end record;
dmDisplayFrequency : DWORD;
dmICMMethod     : DWORD;
dmICMIntent     : DWORD;
dmMediaType     : DWORD;
dmDitherType    : DWORD;
dmReserved1     : DWORD;
dmReserved2     : DWORD;
dmPanningWidth  : DWORD;
dmPanningHeight : DWORD;
  end record;
  DEVMODEA          = _devicemodeA;
  PDEVMODEA         = ^_devicemodeA;
  NPDEVMODEA        = ^_devicemodeA;
  LPDEVMODEA        = ^_devicemodeA;

type
  _devicemodeW      = record
dmDeviceName    : array 0..CCHDEVICENAME-1 of WCHAR;
dmSpecVersion   : WORD;
dmDriverVersion : WORD;
dmSize          : WORD;
dmDriverExtra   : WORD;
dmFields        : DWORD;
t_003            : record
dmOrientation   : signed 16;
dmPaperSize     : signed 16;
dmPaperLength   : signed 16;
dmPaperWidth    : signed 16;
dmScale         : signed 16;
dmCopies        : signed 16;
dmDefaultSource : signed 16;
dmPrintQuality  : signed 16;
dmPosition      : POINTL;
dmDisplayOrientation : DWORD;
dmDisplayFixedOutput : DWORD;
    end record;
dmColor         : signed 16;
dmDuplex        : signed 16;
dmYResolution   : signed 16;
dmTTOption      : signed 16;
dmCollate       : signed 16;
dmFormName      : array 0..CCHFORMNAME-1 of WCHAR;
dmLogPixels     : WORD;
dmBitsPerPel    : DWORD;
dmPelsWidth     : DWORD;
dmPelsHeight    : DWORD;
t_004            : record
      dmDisplayFlags : DWORD for position use 0;
      dmNup         : DWORD for position use 0;
    end record;
dmDisplayFrequency : DWORD;
dmICMMethod     : DWORD;
dmICMIntent     : DWORD;
dmMediaType     : DWORD;
dmDitherType    : DWORD;
dmReserved1     : DWORD;
dmReserved2     : DWORD;
dmPanningWidth  : DWORD;
dmPanningHeight : DWORD;
  end record;
  DEVMODEW          = _devicemodeW;
  PDEVMODEW         = ^_devicemodeW;
  NPDEVMODEW        = ^_devicemodeW;
  LPDEVMODEW        = ^_devicemodeW;

#if #declared UNICODE; then;
type
DEVMODE           = DEVMODEW;
type
PDEVMODE          = PDEVMODEW;
type
NPDEVMODE         = NPDEVMODEW;
type
LPDEVMODE         = LPDEVMODEW;
#else;
type
DEVMODE           = DEVMODEA;
type
PDEVMODE          = PDEVMODEA;
type
NPDEVMODE         = NPDEVMODEA;
type
LPDEVMODE         = LPDEVMODEA;
#end if;

-- /* current version of specification 
const
  DM_SPECVERSION    = $0401;

-- /* field selection bits 
const
  DM_ORIENTATION    = $01;

const
  DM_PAPERSIZE      = $02;

const
  DM_PAPERLENGTH    = $04;

const
  DM_PAPERWIDTH     = $08;

const
  DM_SCALE          = $10;

const
  DM_POSITION       = $20;

const
  DM_NUP            = $40;

const
  DM_DISPLAYORIENTATION= $80;

const
  DM_COPIES         = $0100;

const
  DM_DEFAULTSOURCE  = $0200;

const
  DM_PRINTQUALITY   = $0400;

const
  DM_COLOR          = $0800;

const
  DM_DUPLEX         = $1000;

const
  DM_YRESOLUTION    = $2000;

const
  DM_TTOPTION       = $4000;

const
  DM_COLLATE        = $8000;

const
  DM_FORMNAME       = $10000;

const
  DM_LOGPIXELS      = $20000;

const
  DM_BITSPERPEL     = $40000;

const
  DM_PELSWIDTH      = $80000;

const
  DM_PELSHEIGHT     = $100000;

const
  DM_DISPLAYFLAGS   = $200000;

const
  DM_DISPLAYFREQUENCY= $400000;

const
  DM_ICMMETHOD      = $800000;

const
  DM_ICMINTENT      = $1000000;

const
  DM_MEDIATYPE      = $2000000;

const
  DM_DITHERTYPE     = $4000000;

const
  DM_PANNINGWIDTH   = $8000000;

const
  DM_PANNINGHEIGHT  = $10000000;

const
  DM_DISPLAYFIXEDOUTPUT= $20000000;

-- /* orientation selections 
const
  DMORIENT_PORTRAIT = 1;

const
  DMORIENT_LANDSCAPE= 2;

-- /* paper selections 
const
  DMPAPER_LETTER    = 1;

const
  DMPAPER_LETTERSMALL= 2;

const
  DMPAPER_TABLOID   = 3;

const
  DMPAPER_LEDGER    = 4;

const
  DMPAPER_LEGAL     = 5;

const
  DMPAPER_STATEMENT = 6;

const
  DMPAPER_EXECUTIVE = 7;

const
  DMPAPER_A3        = 8;

const
  DMPAPER_A4        = 9;

const
  DMPAPER_A4SMALL   = 10;

const
  DMPAPER_A5        = 11;

const
  DMPAPER_B4        = 12;

const
  DMPAPER_B5        = 13;

const
  DMPAPER_FOLIO     = 14;

const
  DMPAPER_QUARTO    = 15;

const
  DMPAPER_10X14     = 16;

const
  DMPAPER_11X17     = 17;

const
  DMPAPER_NOTE      = 18;

const
  DMPAPER_ENV_9     = 19;

const
  DMPAPER_ENV_10    = 20;

const
  DMPAPER_ENV_11    = 21;

const
  DMPAPER_ENV_12    = 22;

const
  DMPAPER_ENV_14    = 23;

const
  DMPAPER_CSHEET    = 24;

const
  DMPAPER_DSHEET    = 25;

const
  DMPAPER_ESHEET    = 26;

const
  DMPAPER_ENV_DL    = 27;

const
  DMPAPER_ENV_C5    = 28;

const
  DMPAPER_ENV_C3    = 29;

const
  DMPAPER_ENV_C4    = 30;

const
  DMPAPER_ENV_C6    = 31;

const
  DMPAPER_ENV_C65   = 32;

const
  DMPAPER_ENV_B4    = 33;

const
  DMPAPER_ENV_B5    = 34;

const
  DMPAPER_ENV_B6    = 35;

const
  DMPAPER_ENV_ITALY = 36;

const
  DMPAPER_ENV_MONARCH= 37;

const
  DMPAPER_ENV_PERSONAL= 38;

const
  DMPAPER_FANFOLD_US= 39;

const
  DMPAPER_FANFOLD_STD_GERMAN= 40;

const
  DMPAPER_FANFOLD_LGL_GERMAN= 41;

const
  DMPAPER_ISO_B4    = 42;

const
  DMPAPER_JAPANESE_POSTCARD= 43;

const
  DMPAPER_9X11      = 44;

const
  DMPAPER_10X11     = 45;

const
  DMPAPER_15X11     = 46;

const
  DMPAPER_ENV_INVITE= 47;

const
  DMPAPER_RESERVED_48= 48;

const
  DMPAPER_RESERVED_49= 49;

const
  DMPAPER_LETTER_EXTRA= 50;

const
  DMPAPER_LEGAL_EXTRA= 51;

const
  DMPAPER_TABLOID_EXTRA= 52;

const
  DMPAPER_A4_EXTRA  = 53;

const
  DMPAPER_LETTER_TRANSVERSE= 54;

const
  DMPAPER_A4_TRANSVERSE= 55;

const
  DMPAPER_LETTER_EXTRA_TRANSVERSE= 56;

const
  DMPAPER_A_PLUS    = 57;

const
  DMPAPER_B_PLUS    = 58;

const
  DMPAPER_LETTER_PLUS= 59;

const
  DMPAPER_A4_PLUS   = 60;

const
  DMPAPER_A5_TRANSVERSE= 61;

const
  DMPAPER_B5_TRANSVERSE= 62;

const
  DMPAPER_A3_EXTRA  = 63;

const
  DMPAPER_A5_EXTRA  = 64;

const
  DMPAPER_B5_EXTRA  = 65;

const
  DMPAPER_A2        = 66;

const
  DMPAPER_A3_TRANSVERSE= 67;

const
  DMPAPER_A3_EXTRA_TRANSVERSE= 68;

const
  DMPAPER_DBL_JAPANESE_POSTCARD= 69;

const
  DMPAPER_A6        = 70;

const
  DMPAPER_JENV_KAKU2= 71;

const
  DMPAPER_JENV_KAKU3= 72;

const
  DMPAPER_JENV_CHOU3= 73;

const
  DMPAPER_JENV_CHOU4= 74;

const
  DMPAPER_LETTER_ROTATED= 75;

const
  DMPAPER_A3_ROTATED= 76;

const
  DMPAPER_A4_ROTATED= 77;

const
  DMPAPER_A5_ROTATED= 78;

const
  DMPAPER_B4_JIS_ROTATED= 79;

const
  DMPAPER_B5_JIS_ROTATED= 80;

const
  DMPAPER_JAPANESE_POSTCARD_ROTATED= 81;

const
  DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED= 82;

const
  DMPAPER_A6_ROTATED= 83;

const
  DMPAPER_JENV_KAKU2_ROTATED= 84;

const
  DMPAPER_JENV_KAKU3_ROTATED= 85;

const
  DMPAPER_JENV_CHOU3_ROTATED= 86;

const
  DMPAPER_JENV_CHOU4_ROTATED= 87;

const
  DMPAPER_B6_JIS    = 88;

const
  DMPAPER_B6_JIS_ROTATED= 89;

const
  DMPAPER_12X11     = 90;

const
  DMPAPER_JENV_YOU4 = 91;

const
  DMPAPER_JENV_YOU4_ROTATED= 92;

const
  DMPAPER_P16K      = 93;

const
  DMPAPER_P32K      = 94;

const
  DMPAPER_P32KBIG   = 95;

const
  DMPAPER_PENV_1    = 96;

const
  DMPAPER_PENV_2    = 97;

const
  DMPAPER_PENV_3    = 98;

const
  DMPAPER_PENV_4    = 99;

const
  DMPAPER_PENV_5    = 100;

const
  DMPAPER_PENV_6    = 101;

const
  DMPAPER_PENV_7    = 102;

const
  DMPAPER_PENV_8    = 103;

const
  DMPAPER_PENV_9    = 104;

const
  DMPAPER_PENV_10   = 105;

const
  DMPAPER_P16K_ROTATED= 106;

const
  DMPAPER_P32K_ROTATED= 107;

const
  DMPAPER_P32KBIG_ROTATED= 108;

const
  DMPAPER_PENV_1_ROTATED= 109;

const
  DMPAPER_PENV_2_ROTATED= 110;

const
  DMPAPER_PENV_3_ROTATED= 111;

const
  DMPAPER_PENV_4_ROTATED= 112;

const
  DMPAPER_PENV_5_ROTATED= 113;

const
  DMPAPER_PENV_6_ROTATED= 114;

const
  DMPAPER_PENV_7_ROTATED= 115;

const
  DMPAPER_PENV_8_ROTATED= 116;

const
  DMPAPER_PENV_9_ROTATED= 117;

const
  DMPAPER_PENV_10_ROTATED= 118;

const
  DMPAPER_USER      = 256;

-- /* bin selections 
const
  DMBIN_UPPER       = 1;

const
  DMBIN_ONLYONE     = 1;

const
  DMBIN_LOWER       = 2;

const
  DMBIN_MIDDLE      = 3;

const
  DMBIN_MANUAL      = 4;

const
  DMBIN_ENVELOPE    = 5;

const
  DMBIN_ENVMANUAL   = 6;

const
  DMBIN_AUTO        = 7;

const
  DMBIN_TRACTOR     = 8;

const
  DMBIN_SMALLFMT    = 9;

const
  DMBIN_LARGEFMT    = 10;

const
  DMBIN_LARGECAPACITY= 11;

const
  DMBIN_CASSETTE    = 14;

const
  DMBIN_FORMSOURCE  = 15;

const
  DMBIN_USER        = 256;

-- /* print qualities 
-- /* color enable/disable for color printers 
const
  DMCOLOR_MONOCHROME= 1;

const
  DMCOLOR_COLOR     = 2;

-- /* duplex enable 
const
  DMDUP_SIMPLEX     = 1;

const
  DMDUP_VERTICAL    = 2;

const
  DMDUP_HORIZONTAL  = 3;

-- /* TrueType options 
const
  DMTT_BITMAP       = 1;

const
  DMTT_DOWNLOAD     = 2;

const
  DMTT_SUBDEV       = 3;

const
  DMTT_DOWNLOAD_OUTLINE= 4;

-- /* Collation selections 
const
  DMCOLLATE_FALSE   = 0;

const
  DMCOLLATE_TRUE    = 1;

-- /* DEVMODE dmDisplayOrientation specifiations 
const
  DMDO_DEFAULT      = 0;

const
  DMDO_90           = 1;

const
  DMDO_180          = 2;

const
  DMDO_270          = 3;

-- /* DEVMODE dmDisplayFixedOutput specifiations 
const
  DMDFO_DEFAULT     = 0;

const
  DMDFO_STRETCH     = 1;

const
  DMDFO_CENTER      = 2;

-- /* DEVMODE dmDisplayFlags flags 
--  #define DM_GRAYSCALE 0x00000001 /* This flag is no longer valid */
--  #define DM_INTERLACED 0x00000002 /* This flag is no longer valid */
const
  DMDISPLAYFLAGS_TEXTMODE= $04;

-- /* dmNup , multiple logical page per physical page options 
const
  DMNUP_SYSTEM      = 1;

const
  DMNUP_ONEUP       = 2;

-- /* ICM methods 
const
  DMICMMETHOD_NONE  = 1;

const
  DMICMMETHOD_SYSTEM= 2;

const
  DMICMMETHOD_DRIVER= 3;

const
  DMICMMETHOD_DEVICE= 4;

const
  DMICMMETHOD_USER  = 256;

-- /* ICM Intents 
const
  DMICM_SATURATE    = 1;

const
  DMICM_CONTRAST    = 2;

const
  DMICM_COLORIMETRIC= 3;

const
  DMICM_ABS_COLORIMETRIC= 4;

const
  DMICM_USER        = 256;

-- /* Media types 
const
  DMMEDIA_STANDARD  = 1;

const
  DMMEDIA_TRANSPARENCY= 2;

const
  DMMEDIA_GLOSSY    = 3;

const
  DMMEDIA_USER      = 256;

-- /* Dither types 
const
  DMDITHER_NONE     = 1;

const
  DMDITHER_COARSE   = 2;

const
  DMDITHER_FINE     = 3;

const
  DMDITHER_LINEART  = 4;

const
  DMDITHER_ERRORDIFFUSION= 5;

const
  DMDITHER_RESERVED6= 6;

const
  DMDITHER_RESERVED7= 7;

const
  DMDITHER_RESERVED8= 8;

const
  DMDITHER_RESERVED9= 9;

const
  DMDITHER_GRAYSCALE= 10;

const
  DMDITHER_USER     = 256;

type
  _DISPLAY_DEVICEA  = record
cb              : DWORD;
DeviceName      : array 0..31 of CHAR;
DeviceString    : array 0..127 of CHAR;
StateFlags      : DWORD;
DeviceID        : array 0..127 of CHAR;
DeviceKey       : array 0..127 of CHAR;
  end record;
  DISPLAY_DEVICEA   = _DISPLAY_DEVICEA;
  PDISPLAY_DEVICEA  = ^_DISPLAY_DEVICEA;
  LPDISPLAY_DEVICEA = ^_DISPLAY_DEVICEA;

type
  _DISPLAY_DEVICEW  = record
cb              : DWORD;
DeviceName      : array 0..31 of WCHAR;
DeviceString    : array 0..127 of WCHAR;
StateFlags      : DWORD;
DeviceID        : array 0..127 of WCHAR;
DeviceKey       : array 0..127 of WCHAR;
  end record;
  DISPLAY_DEVICEW   = _DISPLAY_DEVICEW;
  PDISPLAY_DEVICEW  = ^_DISPLAY_DEVICEW;
  LPDISPLAY_DEVICEW = ^_DISPLAY_DEVICEW;

#if #declared UNICODE; then;
type
DISPLAY_DEVICE    = DISPLAY_DEVICEW;
type
PDISPLAY_DEVICE   = PDISPLAY_DEVICEW;
type
LPDISPLAY_DEVICE  = LPDISPLAY_DEVICEW;
#else;
type
DISPLAY_DEVICE    = DISPLAY_DEVICEA;
type
PDISPLAY_DEVICE   = PDISPLAY_DEVICEA;
type
LPDISPLAY_DEVICE  = LPDISPLAY_DEVICEA;
#end if;

const
  DISPLAY_DEVICE_ATTACHED_TO_DESKTOP= $01;

const
  DISPLAY_DEVICE_MULTI_DRIVER= $02;

const
  DISPLAY_DEVICE_PRIMARY_DEVICE= $04;

const
  DISPLAY_DEVICE_MIRRORING_DRIVER= $08;

const
  DISPLAY_DEVICE_VGA_COMPATIBLE= $10;

const
  DISPLAY_DEVICE_REMOVABLE= $20;

const
  DISPLAY_DEVICE_MODESPRUNED= $8000000;

const
  DISPLAY_DEVICE_REMOTE= $4000000;

const
  DISPLAY_DEVICE_DISCONNECT= $2000000;

-- /* Child device state 
const
  DISPLAY_DEVICE_ACTIVE= $01;

const
  DISPLAY_DEVICE_ATTACHED= $02;

-- /* GetRegionData/ExtCreateRegion 
const
  RDH_RECTANGLES    = 1;

type
  _RGNDATAHEADER    = record
dwSize          : DWORD;
iType           : DWORD;
nCount          : DWORD;
nRgnSize        : DWORD;
rcBound         : RECT;
  end record;
  RGNDATAHEADER     = _RGNDATAHEADER;
  PRGNDATAHEADER    = ^_RGNDATAHEADER;

type
  _RGNDATA          = record
rdh             : RGNDATAHEADER;
Buffer          : array 0..0 of character 8;
  end record;
  RGNDATA           = _RGNDATA;
  PRGNDATA          = ^_RGNDATA;
  NPRGNDATA         = ^_RGNDATA;
  LPRGNDATA         = ^_RGNDATA;

-- /* for GetRandomRgn 
const
  SYSRGN            = 4;

type
  _ABC              = record
abcA            : signed 32;
abcB            : UINT;
abcC            : signed 32;
  end record;
  ABC               = _ABC;
  PABC              = ^_ABC;
  NPABC             = ^_ABC;
  LPABC             = ^_ABC;

type
  _ABCFLOAT         = record
abcfA           : t_FLOAT;
abcfB           : t_FLOAT;
abcfC           : t_FLOAT;
  end record;
  ABCFLOAT          = _ABCFLOAT;
  PABCFLOAT         = ^_ABCFLOAT;
  NPABCFLOAT        = ^_ABCFLOAT;
  LPABCFLOAT        = ^_ABCFLOAT;

type
  _OUTLINETEXTMETRICA = record
otmSize         : UINT;
otmTextMetrics  : TEXTMETRICA;
otmFiller       : BYTE;
otmPanoseNumber : PANOSE;
otmfsSelection  : UINT;
otmfsType       : UINT;
otmsCharSlopeRise : signed 32;
otmsCharSlopeRun : signed 32;
otmItalicAngle  : signed 32;
otmEMSquare     : UINT;
otmAscent       : signed 32;
otmDescent      : signed 32;
otmLineGap      : UINT;
otmsCapEmHeight : UINT;
otmsXHeight     : UINT;
otmrcFontBox    : RECT;
otmMacAscent    : signed 32;
otmMacDescent   : signed 32;
otmMacLineGap   : UINT;
otmusMinimumPPEM : UINT;
otmptSubscriptSize : t_POINT;
otmptSubscriptOffset : t_POINT;
otmptSuperscriptSize : t_POINT;
otmptSuperscriptOffset : t_POINT;
otmsStrikeoutSize : UINT;
otmsStrikeoutPosition : signed 32;
otmsUnderscoreSize : signed 32;
otmsUnderscorePosition : signed 32;
otmpFamilyName  : PSTR;
otmpFaceName    : PSTR;
otmpStyleName   : PSTR;
otmpFullName    : PSTR;
  end record;
  OUTLINETEXTMETRICA = _OUTLINETEXTMETRICA;
  POUTLINETEXTMETRICA = ^_OUTLINETEXTMETRICA;
  NPOUTLINETEXTMETRICA = ^_OUTLINETEXTMETRICA;
  LPOUTLINETEXTMETRICA = ^_OUTLINETEXTMETRICA;

type
  _OUTLINETEXTMETRICW = record
otmSize         : UINT;
otmTextMetrics  : TEXTMETRICW;
otmFiller       : BYTE;
otmPanoseNumber : PANOSE;
otmfsSelection  : UINT;
otmfsType       : UINT;
otmsCharSlopeRise : signed 32;
otmsCharSlopeRun : signed 32;
otmItalicAngle  : signed 32;
otmEMSquare     : UINT;
otmAscent       : signed 32;
otmDescent      : signed 32;
otmLineGap      : UINT;
otmsCapEmHeight : UINT;
otmsXHeight     : UINT;
otmrcFontBox    : RECT;
otmMacAscent    : signed 32;
otmMacDescent   : signed 32;
otmMacLineGap   : UINT;
otmusMinimumPPEM : UINT;
otmptSubscriptSize : t_POINT;
otmptSubscriptOffset : t_POINT;
otmptSuperscriptSize : t_POINT;
otmptSuperscriptOffset : t_POINT;
otmsStrikeoutSize : UINT;
otmsStrikeoutPosition : signed 32;
otmsUnderscoreSize : signed 32;
otmsUnderscorePosition : signed 32;
otmpFamilyName  : PSTR;
otmpFaceName    : PSTR;
otmpStyleName   : PSTR;
otmpFullName    : PSTR;
  end record;
  OUTLINETEXTMETRICW = _OUTLINETEXTMETRICW;
  POUTLINETEXTMETRICW = ^_OUTLINETEXTMETRICW;
  NPOUTLINETEXTMETRICW = ^_OUTLINETEXTMETRICW;
  LPOUTLINETEXTMETRICW = ^_OUTLINETEXTMETRICW;

#if #declared UNICODE; then;
type
OUTLINETEXTMETRIC = OUTLINETEXTMETRICW;
type
POUTLINETEXTMETRIC = POUTLINETEXTMETRICW;
type
NPOUTLINETEXTMETRIC = NPOUTLINETEXTMETRICW;
type
LPOUTLINETEXTMETRIC = LPOUTLINETEXTMETRICW;
#else;
type
OUTLINETEXTMETRIC = OUTLINETEXTMETRICA;
type
POUTLINETEXTMETRIC = POUTLINETEXTMETRICA;
type
NPOUTLINETEXTMETRIC = NPOUTLINETEXTMETRICA;
type
LPOUTLINETEXTMETRIC = LPOUTLINETEXTMETRICA;
#end if;

type
  tagPOLYTEXTA      = record
x               : signed 32;
y               : signed 32;
n               : UINT;
lpstr           : LPCSTR;
uiFlags         : UINT;
rcl             : RECT;
pdx             : ^signed 32;
  end record;
  POLYTEXTA         = tagPOLYTEXTA;
  PPOLYTEXTA        = ^tagPOLYTEXTA;
  NPPOLYTEXTA       = ^tagPOLYTEXTA;
  LPPOLYTEXTA       = ^tagPOLYTEXTA;

type
  tagPOLYTEXTW      = record
x               : signed 32;
y               : signed 32;
n               : UINT;
lpstr           : LPCWSTR;
uiFlags         : UINT;
rcl             : RECT;
pdx             : ^signed 32;
  end record;
  POLYTEXTW         = tagPOLYTEXTW;
  PPOLYTEXTW        = ^tagPOLYTEXTW;
  NPPOLYTEXTW       = ^tagPOLYTEXTW;
  LPPOLYTEXTW       = ^tagPOLYTEXTW;

#if #declared UNICODE; then;
type
POLYTEXT          = POLYTEXTW;
type
PPOLYTEXT         = PPOLYTEXTW;
type
NPPOLYTEXT        = NPPOLYTEXTW;
type
LPPOLYTEXT        = LPPOLYTEXTW;
#else;
type
POLYTEXT          = POLYTEXTA;
type
PPOLYTEXT         = PPOLYTEXTA;
type
NPPOLYTEXT        = NPPOLYTEXTA;
type
LPPOLYTEXT        = LPPOLYTEXTA;
#end if;

type
  _FIXED            = record
fract           : WORD;
value           : signed 16;
  end record;
  t_FIXED           = _FIXED;

type
  _MAT2             = record
eM11            : t_FIXED;
eM12            : t_FIXED;
eM21            : t_FIXED;
eM22            : t_FIXED;
  end record;
  MAT2              = _MAT2;
  LPMAT2            = ^_MAT2;

type
  _GLYPHMETRICS     = record
gmBlackBoxX     : UINT;
gmBlackBoxY     : UINT;
gmptGlyphOrigin : t_POINT;
gmCellIncX      : signed 16;
gmCellIncY      : signed 16;
  end record;
  GLYPHMETRICS      = _GLYPHMETRICS;
  LPGLYPHMETRICS    = ^_GLYPHMETRICS;

--  GetGlyphOutline constants
const
  GGO_METRICS       = 0;

const
  GGO_BITMAP        = 1;

const
  GGO_NATIVE        = 2;

const
  GGO_BEZIER        = 3;

const
  GGO_GRAY2_BITMAP  = 4;

const
  GGO_GRAY4_BITMAP  = 5;

const
  GGO_GRAY8_BITMAP  = 6;

const
  GGO_GLYPH_INDEX   = $80;

const
  GGO_UNHINTED      = $0100;

const
  TT_POLYGON_TYPE   = 24;

const
  TT_PRIM_LINE      = 1;

const
  TT_PRIM_QSPLINE   = 2;

const
  TT_PRIM_CSPLINE   = 3;

type
  tagPOINTFX        = record
x               : t_FIXED;
y               : t_FIXED;
  end record;
  POINTFX           = tagPOINTFX;
  LPPOINTFX         = ^tagPOINTFX;

type
  tagTTPOLYCURVE    = record
wType           : WORD;
cpfx            : WORD;
apfx            : array 0..0 of POINTFX;
  end record;
  TTPOLYCURVE       = tagTTPOLYCURVE;
  LPTTPOLYCURVE     = ^tagTTPOLYCURVE;

type
  tagTTPOLYGONHEADER = record
cb              : DWORD;
dwType          : DWORD;
pfxStart        : POINTFX;
  end record;
  TTPOLYGONHEADER   = tagTTPOLYGONHEADER;
  LPTTPOLYGONHEADER = ^tagTTPOLYGONHEADER;

const
  GCP_DBCS          = $01;

const
  GCP_REORDER       = $02;

const
  GCP_USEKERNING    = $08;

const
  GCP_GLYPHSHAPE    = $10;

const
  GCP_LIGATE        = $20;

-- //#define GCP_GLYPHINDEXING 0x0080
const
  GCP_DIACRITIC     = $0100;

const
  GCP_KASHIDA       = $0400;

const
  GCP_ERROR         = $8000;

const
  FLI_MASK          = $103B;

const
  GCP_JUSTIFY       = $10000;

-- //#define GCP_NODIACRITICS 0x00020000L
const
  FLI_GLYPHS        = $40000;

const
  GCP_CLASSIN       = $80000;

const
  GCP_MAXEXTENT     = $100000;

const
  GCP_JUSTIFYIN     = $200000;

const
  GCP_DISPLAYZWG    = $400000;

const
  GCP_SYMSWAPOFF    = $800000;

const
  GCP_NUMERICOVERRIDE= $1000000;

const
  GCP_NEUTRALOVERRIDE= $2000000;

const
  GCP_NUMERICSLATIN = $4000000;

const
  GCP_NUMERICSLOCAL = $8000000;

const
  GCPCLASS_LATIN    = 1;

const
  GCPCLASS_HEBREW   = 2;

const
  GCPCLASS_ARABIC   = 2;

const
  GCPCLASS_NEUTRAL  = 3;

const
  GCPCLASS_LOCALNUMBER= 4;

const
  GCPCLASS_LATINNUMBER= 5;

const
  GCPCLASS_LATINNUMERICTERMINATOR= 6;

const
  GCPCLASS_LATINNUMERICSEPARATOR= 7;

const
  GCPCLASS_NUMERICSEPARATOR= 8;

const
  GCPCLASS_PREBOUNDLTR= $80;

const
  GCPCLASS_PREBOUNDRTL= $40;

const
  GCPCLASS_POSTBOUNDLTR= $20;

const
  GCPCLASS_POSTBOUNDRTL= $10;

const
  GCPGLYPH_LINKBEFORE= $8000;

const
  GCPGLYPH_LINKAFTER= $4000;

type
  tagGCP_RESULTSA   = record
lStructSize     : DWORD;
lpOutString     : LPSTR;
lpOrder         : ^UINT;
lpDx            : ^signed 32;
lpCaretPos      : ^signed 32;
lpClass         : LPSTR;
lpGlyphs        : LPWSTR;
nGlyphs         : UINT;
nMaxFit         : signed 32;
  end record;
  GCP_RESULTSA      = tagGCP_RESULTSA;
  LPGCP_RESULTSA    = ^tagGCP_RESULTSA;

type
  tagGCP_RESULTSW   = record
lStructSize     : DWORD;
lpOutString     : LPWSTR;
lpOrder         : ^UINT;
lpDx            : ^signed 32;
lpCaretPos      : ^signed 32;
lpClass         : LPSTR;
lpGlyphs        : LPWSTR;
nGlyphs         : UINT;
nMaxFit         : signed 32;
  end record;
  GCP_RESULTSW      = tagGCP_RESULTSW;
  LPGCP_RESULTSW    = ^tagGCP_RESULTSW;

#if #declared UNICODE; then;
type
GCP_RESULTS       = GCP_RESULTSW;
type
LPGCP_RESULTS     = LPGCP_RESULTSW;
#else;
type
GCP_RESULTS       = GCP_RESULTSA;
type
LPGCP_RESULTS     = LPGCP_RESULTSA;
#end if;

type
  _RASTERIZER_STATUS = record
nSize           : signed 16;
wFlags          : signed 16;
nLanguageID     : signed 16;
  end record;
  RASTERIZER_STATUS = _RASTERIZER_STATUS;
  LPRASTERIZER_STATUS = ^_RASTERIZER_STATUS;

-- /* bits defined in wFlags of RASTERIZER_STATUS 
const
  TT_AVAILABLE      = $01;

const
  TT_ENABLED        = $02;

-- /* Pixel format descriptor 
type
  tagPIXELFORMATDESCRIPTOR = record
nSize           : WORD;
nVersion        : WORD;
dwFlags         : DWORD;
iPixelType      : BYTE;
cColorBits      : BYTE;
cRedBits        : BYTE;
cRedShift       : BYTE;
cGreenBits      : BYTE;
cGreenShift     : BYTE;
cBlueBits       : BYTE;
cBlueShift      : BYTE;
cAlphaBits      : BYTE;
cAlphaShift     : BYTE;
cAccumBits      : BYTE;
cAccumRedBits   : BYTE;
cAccumGreenBits : BYTE;
cAccumBlueBits  : BYTE;
cAccumAlphaBits : BYTE;
cDepthBits      : BYTE;
cStencilBits    : BYTE;
cAuxBuffers     : BYTE;
iLayerType      : BYTE;
bReserved       : BYTE;
dwLayerMask     : DWORD;
dwVisibleMask   : DWORD;
dwDamageMask    : DWORD;
  end record;
  PIXELFORMATDESCRIPTOR = tagPIXELFORMATDESCRIPTOR;
  PPIXELFORMATDESCRIPTOR = ^tagPIXELFORMATDESCRIPTOR;
  LPPIXELFORMATDESCRIPTOR = ^tagPIXELFORMATDESCRIPTOR;

-- /* pixel types 
const
  PFD_TYPE_RGBA     = 0;

const
  PFD_TYPE_COLORINDEX= 1;

-- /* layer types 
const
  PFD_MAIN_PLANE    = 0;

const
  PFD_OVERLAY_PLANE = 1;

-- /* PIXELFORMATDESCRIPTOR flags 
const
  PFD_DOUBLEBUFFER  = $01;

const
  PFD_STEREO        = $02;

const
  PFD_DRAW_TO_WINDOW= $04;

const
  PFD_DRAW_TO_BITMAP= $08;

const
  PFD_SUPPORT_GDI   = $10;

const
  PFD_SUPPORT_OPENGL= $20;

const
  PFD_GENERIC_FORMAT= $40;

const
  PFD_NEED_PALETTE  = $80;

const
  PFD_NEED_SYSTEM_PALETTE= $0100;

const
  PFD_SWAP_EXCHANGE = $0200;

const
  PFD_SWAP_COPY     = $0400;

const
  PFD_SWAP_LAYER_BUFFERS= $0800;

const
  PFD_GENERIC_ACCELERATED= $1000;

const
  PFD_SUPPORT_DIRECTDRAW= $2000;

-- /* PIXELFORMATDESCRIPTOR flags for use in ChoosePixelFormat only 
const
  PFD_DEPTH_DONTCARE= $20000000;

const
  PFD_DOUBLEBUFFER_DONTCARE= $40000000;

const
  PFD_STEREO_DONTCARE= $80000000;

type
OLDFONTENUMPROC   = FARPROC;
type
FONTENUMPROCA     = FARPROC;
type
FONTENUMPROCW     = FARPROC;
#if #declared UNICODE; then;
type
FONTENUMPROC      = FONTENUMPROCW;
#else;
type
FONTENUMPROC      = FONTENUMPROCA;
#end if;

type
GOBJENUMPROC      = FARPROC;
type
LINEDDAPROC       = FARPROC;
type
  t_005 = signed 32;

procedure AddFontResourceA(
    _001            : in LPCSTR)
                      return t_005;
#pragma convention(AddFontResourceA,system);
#pragma import(AddFontResourceA,'AddFontResourceA','gdi32.dll');

type
  t_006 = signed 32;

procedure AddFontResourceW(
    _001            : in LPCWSTR)
                      return t_006;
#pragma convention(AddFontResourceW,system);
#pragma import(AddFontResourceW,'AddFontResourceW','gdi32.dll');

#if #declared UNICODE; then;
#template AddFontResource;
  AddFontResourceW 
#end AddFontResource;
#else;
#template AddFontResource;
  AddFontResourceA 
#end AddFontResource;
#end if;

type
t_007=^PALETTEENTRY for machine_pointer use true;

procedure AnimatePalette(
    _001            : in HPALETTE; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : in t_007)
                      return BOOL;
#pragma convention(AnimatePalette,system);
#pragma import(AnimatePalette,'AnimatePalette','gdi32.dll');

type
t_008=signed 32;

t_009=signed 32;

t_010=signed 32;

t_011=signed 32;

t_012=signed 32;

t_013=signed 32;

t_014=signed 32;

t_015=signed 32;

procedure Arc(
    _001            : in t_HDC; 
    _002            : in t_008; 
    _003            : in t_009; 
    _004            : in t_010; 
    _005            : in t_011; 
    _006            : in t_012; 
    _007            : in t_013; 
    _008            : in t_014; 
    _009            : in t_015)
                      return BOOL;
#pragma convention(Arc,system);
#pragma import(Arc,'Arc','gdi32.dll');

type
t_016=signed 32;

t_017=signed 32;

t_018=signed 32;

t_019=signed 32;

t_020=signed 32;

t_021=signed 32;

procedure BitBlt(
    _001            : in t_HDC; 
    _002            : in t_016; 
    _003            : in t_017; 
    _004            : in t_018; 
    _005            : in t_019; 
    _006            : in t_HDC; 
    _007            : in t_020; 
    _008            : in t_021; 
    _009            : in DWORD)
                      return BOOL;
#pragma convention(BitBlt,system);
#pragma import(BitBlt,'BitBlt','gdi32.dll');

procedure CancelDC(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(CancelDC,system);
#pragma import(CancelDC,'CancelDC','gdi32.dll');

type
t_022=signed 32;

t_023=signed 32;

t_024=signed 32;

t_025=signed 32;

t_026=signed 32;

t_027=signed 32;

t_028=signed 32;

t_029=signed 32;

procedure Chord(
    _001            : in t_HDC; 
    _002            : in t_022; 
    _003            : in t_023; 
    _004            : in t_024; 
    _005            : in t_025; 
    _006            : in t_026; 
    _007            : in t_027; 
    _008            : in t_028; 
    _009            : in t_029)
                      return BOOL;
#pragma convention(Chord,system);
#pragma import(Chord,'Chord','gdi32.dll');

type
t_030=^PIXELFORMATDESCRIPTOR for machine_pointer use true;

  t_031 = signed 32;

procedure ChoosePixelFormat(
    _001            : in t_HDC; 
    _002            : in t_030)
                      return t_031;
#pragma convention(ChoosePixelFormat,system);
#pragma import(ChoosePixelFormat,'ChoosePixelFormat','gdi32.dll');

procedure CloseMetaFile(
    _001            : in t_HDC)
                      return HMETAFILE;
#pragma convention(CloseMetaFile,system);
#pragma import(CloseMetaFile,'CloseMetaFile','gdi32.dll');

type
t_032=signed 32;

  t_033 = signed 32;

procedure CombineRgn(
    _001            : in t_HRGN; 
    _002            : in t_HRGN; 
    _003            : in t_HRGN; 
    _004            : in t_032)
                      return t_033;
#pragma convention(CombineRgn,system);
#pragma import(CombineRgn,'CombineRgn','gdi32.dll');

procedure CopyMetaFileA(
    _001            : in HMETAFILE; 
    _002            : in LPCSTR)
                      return HMETAFILE;
#pragma convention(CopyMetaFileA,system);
#pragma import(CopyMetaFileA,'CopyMetaFileA','gdi32.dll');

procedure CopyMetaFileW(
    _001            : in HMETAFILE; 
    _002            : in LPCWSTR)
                      return HMETAFILE;
#pragma convention(CopyMetaFileW,system);
#pragma import(CopyMetaFileW,'CopyMetaFileW','gdi32.dll');

#if #declared UNICODE; then;
#template CopyMetaFile;
  CopyMetaFileW 
#end CopyMetaFile;
#else;
#template CopyMetaFile;
  CopyMetaFileA 
#end CopyMetaFile;
#end if;

type
t_034=signed 32;

t_035=signed 32;

t_036=^unchecked for machine_pointer use true;

procedure CreateBitmap(
    _001            : in t_034; 
    _002            : in t_035; 
    _003            : in UINT; 
    _004            : in UINT; 
    _005            : in t_036)
                      return t_HBITMAP;
#pragma convention(CreateBitmap,system);
#pragma import(CreateBitmap,'CreateBitmap','gdi32.dll');

type
t_037=^BITMAP for machine_pointer use true;

procedure CreateBitmapIndirect(
    _001            : in t_037)
                      return t_HBITMAP;
#pragma convention(CreateBitmapIndirect,system);
#pragma import(CreateBitmapIndirect,'CreateBitmapIndirect','gdi32.dll');

type
t_038=^LOGBRUSH for machine_pointer use true;

procedure CreateBrushIndirect(
    _001            : in t_038)
                      return t_HBRUSH;
#pragma convention(CreateBrushIndirect,system);
#pragma import(CreateBrushIndirect,'CreateBrushIndirect','gdi32.dll');

type
t_039=signed 32;

t_040=signed 32;

procedure CreateCompatibleBitmap(
    _001            : in t_HDC; 
    _002            : in t_039; 
    _003            : in t_040)
                      return t_HBITMAP;
#pragma convention(CreateCompatibleBitmap,system);
#pragma import(CreateCompatibleBitmap,'CreateCompatibleBitmap','gdi32.dll');

type
t_041=signed 32;

t_042=signed 32;

procedure CreateDiscardableBitmap(
    _001            : in t_HDC; 
    _002            : in t_041; 
    _003            : in t_042)
                      return t_HBITMAP;
#pragma convention(CreateDiscardableBitmap,system);
#pragma import(CreateDiscardableBitmap,'CreateDiscardableBitmap','gdi32.dll');

procedure CreateCompatibleDC(
    _001            : in t_HDC)
                      return t_HDC;
#pragma convention(CreateCompatibleDC,system);
#pragma import(CreateCompatibleDC,'CreateCompatibleDC','gdi32.dll');

type
t_043=^DEVMODEA for machine_pointer use true;

procedure CreateDCA(
    _001            : in LPCSTR; 
    _002            : in LPCSTR; 
    _003            : in LPCSTR; 
    _004            : in t_043)
                      return t_HDC;
#pragma convention(CreateDCA,system);
#pragma import(CreateDCA,'CreateDCA','gdi32.dll');

type
t_044=^DEVMODEW for machine_pointer use true;

procedure CreateDCW(
    _001            : in LPCWSTR; 
    _002            : in LPCWSTR; 
    _003            : in LPCWSTR; 
    _004            : in t_044)
                      return t_HDC;
#pragma convention(CreateDCW,system);
#pragma import(CreateDCW,'CreateDCW','gdi32.dll');

#if #declared UNICODE; then;
#template CreateDC;
  CreateDCW 
#end CreateDC;
#else;
#template CreateDC;
  CreateDCA 
#end CreateDC;
#end if;

type
t_045=^BITMAPINFOHEADER for machine_pointer use true;

t_046=^unchecked for machine_pointer use true;

t_047=^BITMAPINFO for machine_pointer use true;

procedure CreateDIBitmap(
    _001            : in t_HDC; 
    _002            : in t_045; 
    _003            : in DWORD; 
    _004            : in t_046; 
    _005            : in t_047; 
    _006            : in UINT)
                      return t_HBITMAP;
#pragma convention(CreateDIBitmap,system);
#pragma import(CreateDIBitmap,'CreateDIBitmap','gdi32.dll');

procedure CreateDIBPatternBrush(
    _001            : in t_HGLOBAL; 
    _002            : in UINT)
                      return t_HBRUSH;
#pragma convention(CreateDIBPatternBrush,system);
#pragma import(CreateDIBPatternBrush,'CreateDIBPatternBrush','gdi32.dll');

type
t_048=^unchecked for machine_pointer use true;

procedure CreateDIBPatternBrushPt(
    _001            : in t_048; 
    _002            : in UINT)
                      return t_HBRUSH;
#pragma convention(CreateDIBPatternBrushPt,system);
#pragma import(CreateDIBPatternBrushPt,'CreateDIBPatternBrushPt','gdi32.dll');

type
t_049=signed 32;

t_050=signed 32;

t_051=signed 32;

t_052=signed 32;

procedure CreateEllipticRgn(
    _001            : in t_049; 
    _002            : in t_050; 
    _003            : in t_051; 
    _004            : in t_052)
                      return t_HRGN;
#pragma convention(CreateEllipticRgn,system);
#pragma import(CreateEllipticRgn,'CreateEllipticRgn','gdi32.dll');

type
t_053=^RECT for machine_pointer use true;

procedure CreateEllipticRgnIndirect(
    _001            : in t_053)
                      return t_HRGN;
#pragma convention(CreateEllipticRgnIndirect,system);
#pragma import(CreateEllipticRgnIndirect,'CreateEllipticRgnIndirect','gdi32.dll');

type
t_054=^LOGFONTA for machine_pointer use true;

procedure CreateFontIndirectA(
    _001            : in t_054)
                      return HFONT;
#pragma convention(CreateFontIndirectA,system);
#pragma import(CreateFontIndirectA,'CreateFontIndirectA','gdi32.dll');

type
t_055=^LOGFONTW for machine_pointer use true;

procedure CreateFontIndirectW(
    _001            : in t_055)
                      return HFONT;
#pragma convention(CreateFontIndirectW,system);
#pragma import(CreateFontIndirectW,'CreateFontIndirectW','gdi32.dll');

#if #declared UNICODE; then;
#template CreateFontIndirect;
  CreateFontIndirectW 
#end CreateFontIndirect;
#else;
#template CreateFontIndirect;
  CreateFontIndirectA 
#end CreateFontIndirect;
#end if;

type
t_056=signed 32;

t_057=signed 32;

t_058=signed 32;

t_059=signed 32;

t_060=signed 32;

procedure CreateFontA(
    _001            : in t_056; 
    _002            : in t_057; 
    _003            : in t_058; 
    _004            : in t_059; 
    _005            : in t_060; 
    _006            : in DWORD; 
    _007            : in DWORD; 
    _008            : in DWORD; 
    _009            : in DWORD; 
    _010            : in DWORD; 
    _011            : in DWORD; 
    _012            : in DWORD; 
    _013            : in DWORD; 
    _014            : in LPCSTR)
                      return HFONT;
#pragma convention(CreateFontA,system);
#pragma import(CreateFontA,'CreateFontA','gdi32.dll');

type
t_061=signed 32;

t_062=signed 32;

t_063=signed 32;

t_064=signed 32;

t_065=signed 32;

procedure CreateFontW(
    _001            : in t_061; 
    _002            : in t_062; 
    _003            : in t_063; 
    _004            : in t_064; 
    _005            : in t_065; 
    _006            : in DWORD; 
    _007            : in DWORD; 
    _008            : in DWORD; 
    _009            : in DWORD; 
    _010            : in DWORD; 
    _011            : in DWORD; 
    _012            : in DWORD; 
    _013            : in DWORD; 
    _014            : in LPCWSTR)
                      return HFONT;
#pragma convention(CreateFontW,system);
#pragma import(CreateFontW,'CreateFontW','gdi32.dll');

#if #declared UNICODE; then;
#template CreateFont;
  CreateFontW 
#end CreateFont;
#else;
#template CreateFont;
  CreateFontA 
#end CreateFont;
#end if;

type
t_066=signed 32;

procedure CreateHatchBrush(
    _001            : in t_066; 
    _002            : in COLORREF)
                      return t_HBRUSH;
#pragma convention(CreateHatchBrush,system);
#pragma import(CreateHatchBrush,'CreateHatchBrush','gdi32.dll');

type
t_067=^DEVMODEA for machine_pointer use true;

procedure CreateICA(
    _001            : in LPCSTR; 
    _002            : in LPCSTR; 
    _003            : in LPCSTR; 
    _004            : in t_067)
                      return t_HDC;
#pragma convention(CreateICA,system);
#pragma import(CreateICA,'CreateICA','gdi32.dll');

type
t_068=^DEVMODEW for machine_pointer use true;

procedure CreateICW(
    _001            : in LPCWSTR; 
    _002            : in LPCWSTR; 
    _003            : in LPCWSTR; 
    _004            : in t_068)
                      return t_HDC;
#pragma convention(CreateICW,system);
#pragma import(CreateICW,'CreateICW','gdi32.dll');

#if #declared UNICODE; then;
#template CreateIC;
  CreateICW 
#end CreateIC;
#else;
#template CreateIC;
  CreateICA 
#end CreateIC;
#end if;

procedure CreateMetaFileA(
    _001            : in LPCSTR)
                      return t_HDC;
#pragma convention(CreateMetaFileA,system);
#pragma import(CreateMetaFileA,'CreateMetaFileA','gdi32.dll');

procedure CreateMetaFileW(
    _001            : in LPCWSTR)
                      return t_HDC;
#pragma convention(CreateMetaFileW,system);
#pragma import(CreateMetaFileW,'CreateMetaFileW','gdi32.dll');

#if #declared UNICODE; then;
#template CreateMetaFile;
  CreateMetaFileW 
#end CreateMetaFile;
#else;
#template CreateMetaFile;
  CreateMetaFileA 
#end CreateMetaFile;
#end if;

type
t_069=^LOGPALETTE for machine_pointer use true;

procedure CreatePalette(
    _001            : in t_069)
                      return HPALETTE;
#pragma convention(CreatePalette,system);
#pragma import(CreatePalette,'CreatePalette','gdi32.dll');

type
t_070=signed 32;

t_071=signed 32;

procedure CreatePen(
    _001            : in t_070; 
    _002            : in t_071; 
    _003            : in COLORREF)
                      return HPEN;
#pragma convention(CreatePen,system);
#pragma import(CreatePen,'CreatePen','gdi32.dll');

type
t_072=^LOGPEN for machine_pointer use true;

procedure CreatePenIndirect(
    _001            : in t_072)
                      return HPEN;
#pragma convention(CreatePenIndirect,system);
#pragma import(CreatePenIndirect,'CreatePenIndirect','gdi32.dll');

type
t_073=^t_POINT for machine_pointer use true;

t_074=^INT for machine_pointer use true;

t_075=signed 32;

t_076=signed 32;

procedure CreatePolyPolygonRgn(
    _001            : in t_073; 
    _002            : in t_074; 
    _003            : in t_075; 
    _004            : in t_076)
                      return t_HRGN;
#pragma convention(CreatePolyPolygonRgn,system);
#pragma import(CreatePolyPolygonRgn,'CreatePolyPolygonRgn','gdi32.dll');

procedure CreatePatternBrush(
    _001            : in t_HBITMAP)
                      return t_HBRUSH;
#pragma convention(CreatePatternBrush,system);
#pragma import(CreatePatternBrush,'CreatePatternBrush','gdi32.dll');

type
t_077=signed 32;

t_078=signed 32;

t_079=signed 32;

t_080=signed 32;

procedure CreateRectRgn(
    _001            : in t_077; 
    _002            : in t_078; 
    _003            : in t_079; 
    _004            : in t_080)
                      return t_HRGN;
#pragma convention(CreateRectRgn,system);
#pragma import(CreateRectRgn,'CreateRectRgn','gdi32.dll');

type
t_081=^RECT for machine_pointer use true;

procedure CreateRectRgnIndirect(
    _001            : in t_081)
                      return t_HRGN;
#pragma convention(CreateRectRgnIndirect,system);
#pragma import(CreateRectRgnIndirect,'CreateRectRgnIndirect','gdi32.dll');

type
t_082=signed 32;

t_083=signed 32;

t_084=signed 32;

t_085=signed 32;

t_086=signed 32;

t_087=signed 32;

procedure CreateRoundRectRgn(
    _001            : in t_082; 
    _002            : in t_083; 
    _003            : in t_084; 
    _004            : in t_085; 
    _005            : in t_086; 
    _006            : in t_087)
                      return t_HRGN;
#pragma convention(CreateRoundRectRgn,system);
#pragma import(CreateRoundRectRgn,'CreateRoundRectRgn','gdi32.dll');

procedure CreateScalableFontResourceA(
    _001            : in DWORD; 
    _002            : in LPCSTR; 
    _003            : in LPCSTR; 
    _004            : in LPCSTR)
                      return BOOL;
#pragma convention(CreateScalableFontResourceA,system);
#pragma import(CreateScalableFontResourceA,'CreateScalableFontResourceA','gdi32.dll');

procedure CreateScalableFontResourceW(
    _001            : in DWORD; 
    _002            : in LPCWSTR; 
    _003            : in LPCWSTR; 
    _004            : in LPCWSTR)
                      return BOOL;
#pragma convention(CreateScalableFontResourceW,system);
#pragma import(CreateScalableFontResourceW,'CreateScalableFontResourceW','gdi32.dll');

#if #declared UNICODE; then;
#template CreateScalableFontResource;
  CreateScalableFontResourceW 
#end CreateScalableFontResource;
#else;
#template CreateScalableFontResource;
  CreateScalableFontResourceA 
#end CreateScalableFontResource;
#end if;

procedure CreateSolidBrush(
    _001            : in COLORREF)
                      return t_HBRUSH;
#pragma convention(CreateSolidBrush,system);
#pragma import(CreateSolidBrush,'CreateSolidBrush','gdi32.dll');

procedure DeleteDC(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(DeleteDC,system);
#pragma import(DeleteDC,'DeleteDC','gdi32.dll');

procedure DeleteMetaFile(
    _001            : in HMETAFILE)
                      return BOOL;
#pragma convention(DeleteMetaFile,system);
#pragma import(DeleteMetaFile,'DeleteMetaFile','gdi32.dll');

procedure DeleteObject(
    _001            : in HGDIOBJ)
                      return BOOL;
#pragma convention(DeleteObject,system);
#pragma import(DeleteObject,'DeleteObject','gdi32.dll');

type
t_088=signed 32;

  t_089 = signed 32;

procedure DescribePixelFormat(
    _001            : in t_HDC; 
    _002            : in t_088; 
    _003            : in UINT; 
    _004            : out tagPIXELFORMATDESCRIPTOR)
                      return t_089;
#pragma convention(DescribePixelFormat,system);
#pragma import(DescribePixelFormat,'DescribePixelFormat','gdi32.dll');

-- /* define types of pointers to ExtDeviceMode() and DeviceCapabilities()
--  * functions for Win 3.1 compatibility
--  */
type
LPFNDEVMODE       = ^procedure (
    _001            : t_HWND;
    _002            : t_HMODULE;
    _003            : LPDEVMODE;
    _004            : LPSTR;
    _005            : LPSTR;
    _006            : LPDEVMODE;
    _007            : LPSTR;
    _008            : UINT)
                      return UINT for machine_pointer use true;
type
LPFNDEVCAPS       = ^procedure (
    _001            : LPSTR;
    _002            : LPSTR;
    _003            : UINT;
    _004            : LPSTR;
    _005            : LPDEVMODE)
                      return DWORD for machine_pointer use true;
-- /* mode selections for the device mode function 
-- /* device capabilities indices 
const
  DC_BINADJUST      = 19;

const
  DC_EMF_COMPLIANT  = 20;

const
  DC_DATATYPE_PRODUCED= 21;

const
  DC_COLLATE        = 22;

const
  DC_MANUFACTURER   = 23;

const
  DC_MODEL          = 24;

const
  DC_PERSONALITY    = 25;

const
  DC_PRINTRATE      = 26;

const
  DC_PRINTRATEUNIT  = 27;

const
  PRINTRATEUNIT_PPM = 1;

const
  PRINTRATEUNIT_CPS = 2;

const
  PRINTRATEUNIT_LPM = 3;

const
  PRINTRATEUNIT_IPM = 4;

const
  DC_PRINTERMEM     = 28;

const
  DC_MEDIAREADY     = 29;

const
  DC_STAPLE         = 30;

const
  DC_PRINTRATEPPM   = 31;

const
  DC_COLORDEVICE    = 32;

const
  DC_NUP            = 33;

const
  DC_MEDIATYPENAMES = 34;

const
  DC_MEDIATYPES     = 35;

-- /* bit fields of the return value (DWORD) for DC_TRUETYPE 
const
  DCTT_BITMAP       = $01;

const
  DCTT_DOWNLOAD     = $02;

const
  DCTT_SUBDEV       = $04;

const
  DCTT_DOWNLOAD_OUTLINE= $08;

-- /* return values for DC_BINADJUST 
const
  DCBA_FACEUPNONE   = $00;

const
  DCBA_FACEUPCENTER = $01;

const
  DCBA_FACEUPLEFT   = $02;

const
  DCBA_FACEUPRIGHT  = $03;

const
  DCBA_FACEDOWNNONE = $0100;

const
  DCBA_FACEDOWNCENTER= $0101;

const
  DCBA_FACEDOWNLEFT = $0102;

const
  DCBA_FACEDOWNRIGHT= $0103;

type
t_090=^DEVMODEA for machine_pointer use true;

  t_091 = signed 32;

procedure DeviceCapabilitiesA(
    _001            : in LPCSTR; 
    _002            : in LPCSTR; 
    _003            : in WORD; 
    _004            : out CHARSTR ; 
    _005            : in t_090)
                      return t_091;
#pragma convention(DeviceCapabilitiesA,system);
#pragma import(DeviceCapabilitiesA,'DeviceCapabilitiesA','winspool.dll');

type
t_092=^DEVMODEW for machine_pointer use true;

  t_093 = signed 32;

procedure DeviceCapabilitiesW(
    _001            : in LPCWSTR; 
    _002            : in LPCWSTR; 
    _003            : in WORD; 
    _004            : out WCHARSTR ; 
    _005            : in t_092)
                      return t_093;
#pragma convention(DeviceCapabilitiesW,system);
#pragma import(DeviceCapabilitiesW,'DeviceCapabilitiesW','winspool.dll');

#if #declared UNICODE; then;
#template DeviceCapabilities;
  DeviceCapabilitiesW 
#end DeviceCapabilities;
#else;
#template DeviceCapabilities;
  DeviceCapabilitiesA 
#end DeviceCapabilities;
#end if;

type
t_094=signed 32;

t_095=signed 32;

  t_096 = signed 32;

procedure DrawEscape(
    _001            : in t_HDC; 
    _002            : in t_094; 
    _003            : in t_095; 
    _004            : in LPCSTR)
                      return t_096;
#pragma convention(DrawEscape,system);
#pragma import(DrawEscape,'DrawEscape','gdi32.dll');

type
t_097=signed 32;

t_098=signed 32;

t_099=signed 32;

t_100=signed 32;

procedure Ellipse(
    _001            : in t_HDC; 
    _002            : in t_097; 
    _003            : in t_098; 
    _004            : in t_099; 
    _005            : in t_100)
                      return BOOL;
#pragma convention(Ellipse,system);
#pragma import(Ellipse,'Ellipse','gdi32.dll');

type
  t_101 = signed 32;

procedure EnumFontFamiliesExA(
    _001            : in t_HDC; 
    _002            : in LPLOGFONTA; 
    _003            : in FONTENUMPROCA; 
    _004            : in t_LPARAM; 
    _005            : in DWORD)
                      return t_101;
#pragma convention(EnumFontFamiliesExA,system);
#pragma import(EnumFontFamiliesExA,'EnumFontFamiliesExA','gdi32.dll');

type
  t_102 = signed 32;

procedure EnumFontFamiliesExW(
    _001            : in t_HDC; 
    _002            : in LPLOGFONTW; 
    _003            : in FONTENUMPROCW; 
    _004            : in t_LPARAM; 
    _005            : in DWORD)
                      return t_102;
#pragma convention(EnumFontFamiliesExW,system);
#pragma import(EnumFontFamiliesExW,'EnumFontFamiliesExW','gdi32.dll');

#if #declared UNICODE; then;
#template EnumFontFamiliesEx;
  EnumFontFamiliesExW 
#end EnumFontFamiliesEx;
#else;
#template EnumFontFamiliesEx;
  EnumFontFamiliesExA 
#end EnumFontFamiliesEx;
#end if;

type
  t_103 = signed 32;

procedure EnumFontFamiliesA(
    _001            : in t_HDC; 
    _002            : in LPCSTR; 
    _003            : in FONTENUMPROCA; 
    _004            : in t_LPARAM)
                      return t_103;
#pragma convention(EnumFontFamiliesA,system);
#pragma import(EnumFontFamiliesA,'EnumFontFamiliesA','gdi32.dll');

type
  t_104 = signed 32;

procedure EnumFontFamiliesW(
    _001            : in t_HDC; 
    _002            : in LPCWSTR; 
    _003            : in FONTENUMPROCW; 
    _004            : in t_LPARAM)
                      return t_104;
#pragma convention(EnumFontFamiliesW,system);
#pragma import(EnumFontFamiliesW,'EnumFontFamiliesW','gdi32.dll');

#if #declared UNICODE; then;
#template EnumFontFamilies;
  EnumFontFamiliesW 
#end EnumFontFamilies;
#else;
#template EnumFontFamilies;
  EnumFontFamiliesA 
#end EnumFontFamilies;
#end if;

type
  t_105 = signed 32;

procedure EnumFontsA(
    _001            : in t_HDC; 
    _002            : in LPCSTR; 
    _003            : in FONTENUMPROCA; 
    _004            : in t_LPARAM)
                      return t_105;
#pragma convention(EnumFontsA,system);
#pragma import(EnumFontsA,'EnumFontsA','gdi32.dll');

type
  t_106 = signed 32;

procedure EnumFontsW(
    _001            : in t_HDC; 
    _002            : in LPCWSTR; 
    _003            : in FONTENUMPROCW; 
    _004            : in t_LPARAM)
                      return t_106;
#pragma convention(EnumFontsW,system);
#pragma import(EnumFontsW,'EnumFontsW','gdi32.dll');

#if #declared UNICODE; then;
#template EnumFonts;
  EnumFontsW 
#end EnumFonts;
#else;
#template EnumFonts;
  EnumFontsA 
#end EnumFonts;
#end if;

type
t_107=signed 32;

  t_108 = signed 32;

procedure EnumObjects(
    _001            : in t_HDC; 
    _002            : in t_107; 
    _003            : in GOBJENUMPROC; 
    _004            : in LPVOID)
                      return t_108;
#pragma convention(EnumObjects,system);
#pragma import(EnumObjects,'EnumObjects','gdi32.dll');

procedure EqualRgn(
    _001            : in t_HRGN; 
    _002            : in t_HRGN)
                      return BOOL;
#pragma convention(EqualRgn,system);
#pragma import(EqualRgn,'EqualRgn','gdi32.dll');

type
t_109=signed 32;

t_110=signed 32;

  t_111 = signed 32;

procedure Escape(
    _001            : in t_HDC; 
    _002            : in t_109; 
    _003            : in t_110; 
    _004            : in LPCSTR; 
    _005            : out unchecked )
                      return t_111;
#pragma convention(Escape,system);
#pragma import(Escape,'Escape','gdi32.dll');

type
t_112=signed 32;

t_113=signed 32;

t_114=signed 32;

  t_115 = signed 32;

procedure ExtEscape(
    _001            : in t_HDC; 
    _002            : in t_112; 
    _003            : in t_113; 
    _004            : in LPCSTR; 
    _005            : in t_114; 
    _006            : out CHARSTR )
                      return t_115;
#pragma convention(ExtEscape,system);
#pragma import(ExtEscape,'ExtEscape','gdi32.dll');

type
t_116=signed 32;

t_117=signed 32;

t_118=signed 32;

t_119=signed 32;

  t_120 = signed 32;

procedure ExcludeClipRect(
    _001            : in t_HDC; 
    _002            : in t_116; 
    _003            : in t_117; 
    _004            : in t_118; 
    _005            : in t_119)
                      return t_120;
#pragma convention(ExcludeClipRect,system);
#pragma import(ExcludeClipRect,'ExcludeClipRect','gdi32.dll');

type
t_121=^t_XFORM for machine_pointer use true;

t_122=^RGNDATA for machine_pointer use true;

procedure ExtCreateRegion(
    _001            : in t_121; 
    _002            : in DWORD; 
    _003            : in t_122)
                      return t_HRGN;
#pragma convention(ExtCreateRegion,system);
#pragma import(ExtCreateRegion,'ExtCreateRegion','gdi32.dll');

type
t_123=signed 32;

t_124=signed 32;

procedure ExtFloodFill(
    _001            : in t_HDC; 
    _002            : in t_123; 
    _003            : in t_124; 
    _004            : in COLORREF; 
    _005            : in UINT)
                      return BOOL;
#pragma convention(ExtFloodFill,system);
#pragma import(ExtFloodFill,'ExtFloodFill','gdi32.dll');

procedure FillRgn(
    _001            : in t_HDC; 
    _002            : in t_HRGN; 
    _003            : in t_HBRUSH)
                      return BOOL;
#pragma convention(FillRgn,system);
#pragma import(FillRgn,'FillRgn','gdi32.dll');

type
t_125=signed 32;

t_126=signed 32;

procedure FloodFill(
    _001            : in t_HDC; 
    _002            : in t_125; 
    _003            : in t_126; 
    _004            : in COLORREF)
                      return BOOL;
#pragma convention(FloodFill,system);
#pragma import(FloodFill,'FloodFill','gdi32.dll');

type
t_127=signed 32;

t_128=signed 32;

procedure FrameRgn(
    _001            : in t_HDC; 
    _002            : in t_HRGN; 
    _003            : in t_HBRUSH; 
    _004            : in t_127; 
    _005            : in t_128)
                      return BOOL;
#pragma convention(FrameRgn,system);
#pragma import(FrameRgn,'FrameRgn','gdi32.dll');

type
  t_129 = signed 32;

procedure GetROP2(
    _001            : in t_HDC)
                      return t_129;
#pragma convention(GetROP2,system);
#pragma import(GetROP2,'GetROP2','gdi32.dll');

procedure GetAspectRatioFilterEx(
    _001            : in t_HDC; 
    _002            : out tagSIZE)
                      return BOOL;
#pragma convention(GetAspectRatioFilterEx,system);
#pragma import(GetAspectRatioFilterEx,'GetAspectRatioFilterEx','gdi32.dll');

procedure GetBkColor(
    _001            : in t_HDC)
                      return COLORREF;
#pragma convention(GetBkColor,system);
#pragma import(GetBkColor,'GetBkColor','gdi32.dll');

procedure GetDCBrushColor(
    _001            : in t_HDC)
                      return COLORREF;
#pragma convention(GetDCBrushColor,system);
#pragma import(GetDCBrushColor,'GetDCBrushColor','gdi32.dll');

procedure GetDCPenColor(
    _001            : in t_HDC)
                      return COLORREF;
#pragma convention(GetDCPenColor,system);
#pragma import(GetDCPenColor,'GetDCPenColor','gdi32.dll');

type
  t_130 = signed 32;

procedure GetBkMode(
    _001            : in t_HDC)
                      return t_130;
#pragma convention(GetBkMode,system);
#pragma import(GetBkMode,'GetBkMode','gdi32.dll');

procedure GetBitmapBits(
    _001            : in t_HBITMAP; 
    _002            : in LONG; 
    _003            : out unchecked )
                      return LONG;
#pragma convention(GetBitmapBits,system);
#pragma import(GetBitmapBits,'GetBitmapBits','gdi32.dll');

procedure GetBitmapDimensionEx(
    _001            : in t_HBITMAP; 
    _002            : out tagSIZE)
                      return BOOL;
#pragma convention(GetBitmapDimensionEx,system);
#pragma import(GetBitmapDimensionEx,'GetBitmapDimensionEx','gdi32.dll');

procedure GetBoundsRect(
    _001            : in t_HDC; 
    _002            : out tagRECT; 
    _003            : in UINT)
                      return UINT;
#pragma convention(GetBoundsRect,system);
#pragma import(GetBoundsRect,'GetBoundsRect','gdi32.dll');

procedure GetBrushOrgEx(
    _001            : in t_HDC; 
    _002            : out tagPOINT)
                      return BOOL;
#pragma convention(GetBrushOrgEx,system);
#pragma import(GetBrushOrgEx,'GetBrushOrgEx','gdi32.dll');

type
t_131=signed 32 ;

procedure GetCharWidthA(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out t_131)
                      return BOOL;
#pragma convention(GetCharWidthA,system);
#pragma import(GetCharWidthA,'GetCharWidthA','gdi32.dll');

type
t_132=signed 32 ;

procedure GetCharWidthW(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out t_132)
                      return BOOL;
#pragma convention(GetCharWidthW,system);
#pragma import(GetCharWidthW,'GetCharWidthW','gdi32.dll');

#if #declared UNICODE; then;
#template GetCharWidth;
  GetCharWidthW 
#end GetCharWidth;
#else;
#template GetCharWidth;
  GetCharWidthA 
#end GetCharWidth;
#end if;

type
t_133=signed 32 ;

procedure GetCharWidth32A(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out t_133)
                      return BOOL;
#pragma convention(GetCharWidth32A,system);
#pragma import(GetCharWidth32A,'GetCharWidth32A','gdi32.dll');

type
t_134=signed 32 ;

procedure GetCharWidth32W(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out t_134)
                      return BOOL;
#pragma convention(GetCharWidth32W,system);
#pragma import(GetCharWidth32W,'GetCharWidth32W','gdi32.dll');

#if #declared UNICODE; then;
#template GetCharWidth32;
  GetCharWidth32W 
#end GetCharWidth32;
#else;
#template GetCharWidth32;
  GetCharWidth32A 
#end GetCharWidth32;
#end if;

procedure GetCharWidthFloatA(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out t_FLOAT )
                      return BOOL;
#pragma convention(GetCharWidthFloatA,system);
#pragma import(GetCharWidthFloatA,'GetCharWidthFloatA','gdi32.dll');

procedure GetCharWidthFloatW(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out t_FLOAT )
                      return BOOL;
#pragma convention(GetCharWidthFloatW,system);
#pragma import(GetCharWidthFloatW,'GetCharWidthFloatW','gdi32.dll');

#if #declared UNICODE; then;
#template GetCharWidthFloat;
  GetCharWidthFloatW 
#end GetCharWidthFloat;
#else;
#template GetCharWidthFloat;
  GetCharWidthFloatA 
#end GetCharWidthFloat;
#end if;

procedure GetCharABCWidthsA(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out _ABC)
                      return BOOL;
#pragma convention(GetCharABCWidthsA,system);
#pragma import(GetCharABCWidthsA,'GetCharABCWidthsA','gdi32.dll');

procedure GetCharABCWidthsW(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out _ABC)
                      return BOOL;
#pragma convention(GetCharABCWidthsW,system);
#pragma import(GetCharABCWidthsW,'GetCharABCWidthsW','gdi32.dll');

#if #declared UNICODE; then;
#template GetCharABCWidths;
  GetCharABCWidthsW 
#end GetCharABCWidths;
#else;
#template GetCharABCWidths;
  GetCharABCWidthsA 
#end GetCharABCWidths;
#end if;

procedure GetCharABCWidthsFloatA(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out _ABCFLOAT)
                      return BOOL;
#pragma convention(GetCharABCWidthsFloatA,system);
#pragma import(GetCharABCWidthsFloatA,'GetCharABCWidthsFloatA','gdi32.dll');

procedure GetCharABCWidthsFloatW(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out _ABCFLOAT)
                      return BOOL;
#pragma convention(GetCharABCWidthsFloatW,system);
#pragma import(GetCharABCWidthsFloatW,'GetCharABCWidthsFloatW','gdi32.dll');

#if #declared UNICODE; then;
#template GetCharABCWidthsFloat;
  GetCharABCWidthsFloatW 
#end GetCharABCWidthsFloat;
#else;
#template GetCharABCWidthsFloat;
  GetCharABCWidthsFloatA 
#end GetCharABCWidthsFloat;
#end if;

type
  t_135 = signed 32;

procedure GetClipBox(
    _001            : in t_HDC; 
    _002            : out tagRECT)
                      return t_135;
#pragma convention(GetClipBox,system);
#pragma import(GetClipBox,'GetClipBox','gdi32.dll');

type
  t_136 = signed 32;

procedure GetClipRgn(
    _001            : in t_HDC; 
    _002            : in t_HRGN)
                      return t_136;
#pragma convention(GetClipRgn,system);
#pragma import(GetClipRgn,'GetClipRgn','gdi32.dll');

type
  t_137 = signed 32;

procedure GetMetaRgn(
    _001            : in t_HDC; 
    _002            : in t_HRGN)
                      return t_137;
#pragma convention(GetMetaRgn,system);
#pragma import(GetMetaRgn,'GetMetaRgn','gdi32.dll');

procedure GetCurrentObject(
    _001            : in t_HDC; 
    _002            : in UINT)
                      return HGDIOBJ;
#pragma convention(GetCurrentObject,system);
#pragma import(GetCurrentObject,'GetCurrentObject','gdi32.dll');

procedure GetCurrentPositionEx(
    _001            : in t_HDC; 
    _002            : out tagPOINT)
                      return BOOL;
#pragma convention(GetCurrentPositionEx,system);
#pragma import(GetCurrentPositionEx,'GetCurrentPositionEx','gdi32.dll');

type
t_138=signed 32;

  t_139 = signed 32;

procedure GetDeviceCaps(
    _001            : in t_HDC; 
    _002            : in t_138)
                      return t_139;
#pragma convention(GetDeviceCaps,system);
#pragma import(GetDeviceCaps,'GetDeviceCaps','gdi32.dll');

type
  t_140 = signed 32;

procedure GetDIBits(
    _001            : in t_HDC; 
    _002            : in t_HBITMAP; 
    _003            : in UINT; 
    _004            : in UINT; 
    _005            : out unchecked ; 
    _006            : in out tagBITMAPINFO; 
    _007            : in UINT)
                      return t_140;
#pragma convention(GetDIBits,system);
#pragma import(GetDIBits,'GetDIBits','gdi32.dll');

procedure GetFontData(
    _001            : in t_HDC; 
    _002            : in DWORD; 
    _003            : in DWORD; 
    _004            : out unchecked ; 
    _005            : in DWORD)
                      return DWORD;
#pragma convention(GetFontData,system);
#pragma import(GetFontData,'GetFontData','gdi32.dll');

type
t_141=^MAT2 for machine_pointer use true;

procedure GetGlyphOutlineA(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out _GLYPHMETRICS; 
    _005            : in DWORD; 
    _006            : out unchecked ; 
    _007            : in t_141)
                      return DWORD;
#pragma convention(GetGlyphOutlineA,system);
#pragma import(GetGlyphOutlineA,'GetGlyphOutlineA','gdi32.dll');

type
t_142=^MAT2 for machine_pointer use true;

procedure GetGlyphOutlineW(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out _GLYPHMETRICS; 
    _005            : in DWORD; 
    _006            : out unchecked ; 
    _007            : in t_142)
                      return DWORD;
#pragma convention(GetGlyphOutlineW,system);
#pragma import(GetGlyphOutlineW,'GetGlyphOutlineW','gdi32.dll');

#if #declared UNICODE; then;
#template GetGlyphOutline;
  GetGlyphOutlineW 
#end GetGlyphOutline;
#else;
#template GetGlyphOutline;
  GetGlyphOutlineA 
#end GetGlyphOutline;
#end if;

type
  t_143 = signed 32;

procedure GetGraphicsMode(
    _001            : in t_HDC)
                      return t_143;
#pragma convention(GetGraphicsMode,system);
#pragma import(GetGraphicsMode,'GetGraphicsMode','gdi32.dll');

type
  t_144 = signed 32;

procedure GetMapMode(
    _001            : in t_HDC)
                      return t_144;
#pragma convention(GetMapMode,system);
#pragma import(GetMapMode,'GetMapMode','gdi32.dll');

procedure GetMetaFileBitsEx(
    _001            : in HMETAFILE; 
    _002            : in UINT; 
    _003            : out unchecked )
                      return UINT;
#pragma convention(GetMetaFileBitsEx,system);
#pragma import(GetMetaFileBitsEx,'GetMetaFileBitsEx','gdi32.dll');

procedure GetMetaFileA(
    _001            : in LPCSTR)
                      return HMETAFILE;
#pragma convention(GetMetaFileA,system);
#pragma import(GetMetaFileA,'GetMetaFileA','gdi32.dll');

procedure GetMetaFileW(
    _001            : in LPCWSTR)
                      return HMETAFILE;
#pragma convention(GetMetaFileW,system);
#pragma import(GetMetaFileW,'GetMetaFileW','gdi32.dll');

#if #declared UNICODE; then;
#template GetMetaFile;
  GetMetaFileW 
#end GetMetaFile;
#else;
#template GetMetaFile;
  GetMetaFileA 
#end GetMetaFile;
#end if;

procedure GetNearestColor(
    _001            : in t_HDC; 
    _002            : in COLORREF)
                      return COLORREF;
#pragma convention(GetNearestColor,system);
#pragma import(GetNearestColor,'GetNearestColor','gdi32.dll');

procedure GetNearestPaletteIndex(
    _001            : in HPALETTE; 
    _002            : in COLORREF)
                      return UINT;
#pragma convention(GetNearestPaletteIndex,system);
#pragma import(GetNearestPaletteIndex,'GetNearestPaletteIndex','gdi32.dll');

procedure GetObjectType(
    h               : in HGDIOBJ)
                      return DWORD;
#pragma convention(GetObjectType,system);
#pragma import(GetObjectType,'GetObjectType','gdi32.dll');

procedure GetOutlineTextMetricsA(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : out _OUTLINETEXTMETRICA)
                      return UINT;
#pragma convention(GetOutlineTextMetricsA,system);
#pragma import(GetOutlineTextMetricsA,'GetOutlineTextMetricsA','gdi32.dll');

procedure GetOutlineTextMetricsW(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : out _OUTLINETEXTMETRICW)
                      return UINT;
#pragma convention(GetOutlineTextMetricsW,system);
#pragma import(GetOutlineTextMetricsW,'GetOutlineTextMetricsW','gdi32.dll');

#if #declared UNICODE; then;
#template GetOutlineTextMetrics;
  GetOutlineTextMetricsW 
#end GetOutlineTextMetrics;
#else;
#template GetOutlineTextMetrics;
  GetOutlineTextMetricsA 
#end GetOutlineTextMetrics;
#end if;

procedure GetPaletteEntries(
    _001            : in HPALETTE; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out tagPALETTEENTRY)
                      return UINT;
#pragma convention(GetPaletteEntries,system);
#pragma import(GetPaletteEntries,'GetPaletteEntries','gdi32.dll');

type
t_145=signed 32;

t_146=signed 32;

procedure GetPixel(
    _001            : in t_HDC; 
    _002            : in t_145; 
    _003            : in t_146)
                      return COLORREF;
#pragma convention(GetPixel,system);
#pragma import(GetPixel,'GetPixel','gdi32.dll');

type
  t_147 = signed 32;

procedure GetPixelFormat(
    _001            : in t_HDC)
                      return t_147;
#pragma convention(GetPixelFormat,system);
#pragma import(GetPixelFormat,'GetPixelFormat','gdi32.dll');

type
  t_148 = signed 32;

procedure GetPolyFillMode(
    _001            : in t_HDC)
                      return t_148;
#pragma convention(GetPolyFillMode,system);
#pragma import(GetPolyFillMode,'GetPolyFillMode','gdi32.dll');

procedure GetRasterizerCaps(
    _001            : out _RASTERIZER_STATUS; 
    _002            : in UINT)
                      return BOOL;
#pragma convention(GetRasterizerCaps,system);
#pragma import(GetRasterizerCaps,'GetRasterizerCaps','gdi32.dll');

type
  t_149 = signed 32;

procedure GetRandomRgn(
    _001            : in t_HDC; 
    _002            : in t_HRGN; 
    _003            : in INT)
                      return t_149;
#pragma convention(GetRandomRgn,system);
#pragma import(GetRandomRgn,'GetRandomRgn','gdi32.dll');

procedure GetRegionData(
    _001            : in t_HRGN; 
    _002            : in DWORD; 
    _003            : out _RGNDATA)
                      return DWORD;
#pragma convention(GetRegionData,system);
#pragma import(GetRegionData,'GetRegionData','gdi32.dll');

type
  t_150 = signed 32;

procedure GetRgnBox(
    _001            : in t_HRGN; 
    _002            : out tagRECT)
                      return t_150;
#pragma convention(GetRgnBox,system);
#pragma import(GetRgnBox,'GetRgnBox','gdi32.dll');

type
t_151=signed 32;

procedure GetStockObject(
    _001            : in t_151)
                      return HGDIOBJ;
#pragma convention(GetStockObject,system);
#pragma import(GetStockObject,'GetStockObject','gdi32.dll');

type
  t_152 = signed 32;

procedure GetStretchBltMode(
    _001            : in t_HDC)
                      return t_152;
#pragma convention(GetStretchBltMode,system);
#pragma import(GetStretchBltMode,'GetStretchBltMode','gdi32.dll');

procedure GetSystemPaletteEntries(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out tagPALETTEENTRY)
                      return UINT;
#pragma convention(GetSystemPaletteEntries,system);
#pragma import(GetSystemPaletteEntries,'GetSystemPaletteEntries','gdi32.dll');

procedure GetSystemPaletteUse(
    _001            : in t_HDC)
                      return UINT;
#pragma convention(GetSystemPaletteUse,system);
#pragma import(GetSystemPaletteUse,'GetSystemPaletteUse','gdi32.dll');

type
  t_153 = signed 32;

procedure GetTextCharacterExtra(
    _001            : in t_HDC)
                      return t_153;
#pragma convention(GetTextCharacterExtra,system);
#pragma import(GetTextCharacterExtra,'GetTextCharacterExtra','gdi32.dll');

procedure GetTextAlign(
    _001            : in t_HDC)
                      return UINT;
#pragma convention(GetTextAlign,system);
#pragma import(GetTextAlign,'GetTextAlign','gdi32.dll');

procedure GetTextColor(
    _001            : in t_HDC)
                      return COLORREF;
#pragma convention(GetTextColor,system);
#pragma import(GetTextColor,'GetTextColor','gdi32.dll');

type
t_154=signed 32;

procedure GetTextExtentPointA(
    _001            : in t_HDC; 
    _002            : in LPCSTR; 
    _003            : in t_154; 
    _004            : out tagSIZE)
                      return BOOL;
#pragma convention(GetTextExtentPointA,system);
#pragma import(GetTextExtentPointA,'GetTextExtentPointA','gdi32.dll');

type
t_155=signed 32;

procedure GetTextExtentPointW(
    _001            : in t_HDC; 
    _002            : in LPCWSTR; 
    _003            : in t_155; 
    _004            : out tagSIZE)
                      return BOOL;
#pragma convention(GetTextExtentPointW,system);
#pragma import(GetTextExtentPointW,'GetTextExtentPointW','gdi32.dll');

#if #declared UNICODE; then;
#template GetTextExtentPoint;
  GetTextExtentPointW 
#end GetTextExtentPoint;
#else;
#template GetTextExtentPoint;
  GetTextExtentPointA 
#end GetTextExtentPoint;
#end if;

type
t_156=signed 32;

procedure GetTextExtentPoint32A(
    _001            : in t_HDC; 
    _002            : in LPCSTR; 
    _003            : in t_156; 
    _004            : out tagSIZE)
                      return BOOL;
#pragma convention(GetTextExtentPoint32A,system);
#pragma import(GetTextExtentPoint32A,'GetTextExtentPoint32A','gdi32.dll');

type
t_157=signed 32;

procedure GetTextExtentPoint32W(
    _001            : in t_HDC; 
    _002            : in LPCWSTR; 
    _003            : in t_157; 
    _004            : out tagSIZE)
                      return BOOL;
#pragma convention(GetTextExtentPoint32W,system);
#pragma import(GetTextExtentPoint32W,'GetTextExtentPoint32W','gdi32.dll');

#if #declared UNICODE; then;
#template GetTextExtentPoint32;
  GetTextExtentPoint32W 
#end GetTextExtentPoint32;
#else;
#template GetTextExtentPoint32;
  GetTextExtentPoint32A 
#end GetTextExtentPoint32;
#end if;

type
t_158=signed 32;

t_159=signed 32;

t_160=signed 32 ;

t_161=signed 32 ;

procedure GetTextExtentExPointA(
    _001            : in t_HDC; 
    _002            : in LPCSTR; 
    _003            : in t_158; 
    _004            : in t_159; 
    _005            : out t_160; 
    _006            : out t_161; 
    _007            : out tagSIZE)
                      return BOOL;
#pragma convention(GetTextExtentExPointA,system);
#pragma import(GetTextExtentExPointA,'GetTextExtentExPointA','gdi32.dll');

type
t_162=signed 32;

t_163=signed 32;

t_164=signed 32 ;

t_165=signed 32 ;

procedure GetTextExtentExPointW(
    _001            : in t_HDC; 
    _002            : in LPCWSTR; 
    _003            : in t_162; 
    _004            : in t_163; 
    _005            : out t_164; 
    _006            : out t_165; 
    _007            : out tagSIZE)
                      return BOOL;
#pragma convention(GetTextExtentExPointW,system);
#pragma import(GetTextExtentExPointW,'GetTextExtentExPointW','gdi32.dll');

#if #declared UNICODE; then;
#template GetTextExtentExPoint;
  GetTextExtentExPointW 
#end GetTextExtentExPoint;
#else;
#template GetTextExtentExPoint;
  GetTextExtentExPointA 
#end GetTextExtentExPoint;
#end if;

type
  t_166 = signed 32;

procedure GetTextCharset(
    hdc             : in t_HDC)
                      return t_166;
#pragma convention(GetTextCharset,system);
#pragma import(GetTextCharset,'GetTextCharset','gdi32.dll');

type
  t_167 = signed 32;

procedure GetTextCharsetInfo(
    hdc             : in t_HDC; 
    lpSig           : out tagFONTSIGNATURE; 
    dwFlags         : in DWORD)
                      return t_167;
#pragma convention(GetTextCharsetInfo,system);
#pragma import(GetTextCharsetInfo,'GetTextCharsetInfo','gdi32.dll');

procedure TranslateCharsetInfo(
    lpSrc           : in out DWORD; 
    lpCs            : out tagCHARSETINFO; 
    dwFlags         : in DWORD)
                      return BOOL;
#pragma convention(TranslateCharsetInfo,system);
#pragma import(TranslateCharsetInfo,'TranslateCharsetInfo','gdi32.dll');

procedure GetFontLanguageInfo(
    _001            : in t_HDC)
                      return DWORD;
#pragma convention(GetFontLanguageInfo,system);
#pragma import(GetFontLanguageInfo,'GetFontLanguageInfo','gdi32.dll');

type
t_168=signed 32;

t_169=signed 32;

procedure GetCharacterPlacementA(
    _001            : in t_HDC; 
    _002            : in LPCSTR; 
    _003            : in t_168; 
    _004            : in t_169; 
    _005            : in out tagGCP_RESULTSA; 
    _006            : in DWORD)
                      return DWORD;
#pragma convention(GetCharacterPlacementA,system);
#pragma import(GetCharacterPlacementA,'GetCharacterPlacementA','gdi32.dll');

type
t_170=signed 32;

t_171=signed 32;

procedure GetCharacterPlacementW(
    _001            : in t_HDC; 
    _002            : in LPCWSTR; 
    _003            : in t_170; 
    _004            : in t_171; 
    _005            : in out tagGCP_RESULTSW; 
    _006            : in DWORD)
                      return DWORD;
#pragma convention(GetCharacterPlacementW,system);
#pragma import(GetCharacterPlacementW,'GetCharacterPlacementW','gdi32.dll');

#if #declared UNICODE; then;
#template GetCharacterPlacement;
  GetCharacterPlacementW 
#end GetCharacterPlacement;
#else;
#template GetCharacterPlacement;
  GetCharacterPlacementA 
#end GetCharacterPlacement;
#end if;

type
  tagWCRANGE        = record
wcLow           : WCHAR;
cGlyphs         : USHORT;
  end record;
  WCRANGE           = tagWCRANGE;
  PWCRANGE          = ^tagWCRANGE;
  LPWCRANGE         = ^tagWCRANGE;

type
  tagGLYPHSET       = record
cbThis          : DWORD;
flAccel         : DWORD;
cGlyphsSupported : DWORD;
cRanges         : DWORD;
ranges          : array 0..0 of WCRANGE;
  end record;
  GLYPHSET          = tagGLYPHSET;
  PGLYPHSET         = ^tagGLYPHSET;
  LPGLYPHSET        = ^tagGLYPHSET;

-- /* flAccel flags for the GLYPHSET structure above 
const
  GS_8BIT_INDICES   = $01;

-- /* flags for GetGlyphIndices 
const
  GGI_MARK_NONEXISTING_GLYPHS= $01;

procedure GetFontUnicodeRanges(
    _001            : in t_HDC; 
    _002            : out tagGLYPHSET)
                      return DWORD;
#pragma convention(GetFontUnicodeRanges,system);
#pragma import(GetFontUnicodeRanges,'GetFontUnicodeRanges','gdi32.dll');

type
t_172=signed 32;

procedure GetGlyphIndicesA(
    _001            : in t_HDC; 
    _002            : in LPCSTR; 
    _003            : in t_172; 
    _004            : out WORD ; 
    _005            : in DWORD)
                      return DWORD;
#pragma convention(GetGlyphIndicesA,system);
#pragma import(GetGlyphIndicesA,'GetGlyphIndicesA','gdi32.dll');

type
t_173=signed 32;

procedure GetGlyphIndicesW(
    _001            : in t_HDC; 
    _002            : in LPCWSTR; 
    _003            : in t_173; 
    _004            : out WORD ; 
    _005            : in DWORD)
                      return DWORD;
#pragma convention(GetGlyphIndicesW,system);
#pragma import(GetGlyphIndicesW,'GetGlyphIndicesW','gdi32.dll');

#if #declared UNICODE; then;
#template GetGlyphIndices;
  GetGlyphIndicesW 
#end GetGlyphIndices;
#else;
#template GetGlyphIndices;
  GetGlyphIndicesA 
#end GetGlyphIndices;
#end if;

type
t_174=signed 32;

procedure GetTextExtentPointI(
    _001            : in t_HDC; 
    _002            : in LPWORD; 
    _003            : in t_174; 
    _004            : out tagSIZE)
                      return BOOL;
#pragma convention(GetTextExtentPointI,system);
#pragma import(GetTextExtentPointI,'GetTextExtentPointI','gdi32.dll');

type
t_175=signed 32;

t_176=signed 32;

t_177=signed 32 ;

t_178=signed 32 ;

procedure GetTextExtentExPointI(
    _001            : in t_HDC; 
    _002            : in LPWORD; 
    _003            : in t_175; 
    _004            : in t_176; 
    _005            : out t_177; 
    _006            : out t_178; 
    _007            : out tagSIZE)
                      return BOOL;
#pragma convention(GetTextExtentExPointI,system);
#pragma import(GetTextExtentExPointI,'GetTextExtentExPointI','gdi32.dll');

type
t_179=signed 32 ;

procedure GetCharWidthI(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : in LPWORD; 
    _005            : out t_179)
                      return BOOL;
#pragma convention(GetCharWidthI,system);
#pragma import(GetCharWidthI,'GetCharWidthI','gdi32.dll');

procedure GetCharABCWidthsI(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : in LPWORD; 
    _005            : out _ABC)
                      return BOOL;
#pragma convention(GetCharABCWidthsI,system);
#pragma import(GetCharABCWidthsI,'GetCharABCWidthsI','gdi32.dll');

const
  MM_MAX_NUMAXES    = 16;

type
  tagDESIGNVECTOR   = record
dvReserved      : DWORD;
dvNumAxes       : DWORD;
dvValues        : array 0..MM_MAX_NUMAXES-1 of LONG;
  end record;
  DESIGNVECTOR      = tagDESIGNVECTOR;
  PDESIGNVECTOR     = ^tagDESIGNVECTOR;
  LPDESIGNVECTOR    = ^tagDESIGNVECTOR;

type
  t_180 = signed 32;

procedure AddFontResourceExA(
    _001            : in LPCSTR; 
    _002            : in DWORD; 
    _003            : in PVOID)
                      return t_180;
#pragma convention(AddFontResourceExA,system);
#pragma import(AddFontResourceExA,'AddFontResourceExA','gdi32.dll');

type
  t_181 = signed 32;

procedure AddFontResourceExW(
    _001            : in LPCWSTR; 
    _002            : in DWORD; 
    _003            : in PVOID)
                      return t_181;
#pragma convention(AddFontResourceExW,system);
#pragma import(AddFontResourceExW,'AddFontResourceExW','gdi32.dll');

#if #declared UNICODE; then;
#template AddFontResourceEx;
  AddFontResourceExW 
#end AddFontResourceEx;
#else;
#template AddFontResourceEx;
  AddFontResourceExA 
#end AddFontResourceEx;
#end if;

procedure RemoveFontResourceExA(
    _001            : in LPCSTR; 
    _002            : in DWORD; 
    _003            : in PVOID)
                      return BOOL;
#pragma convention(RemoveFontResourceExA,system);
#pragma import(RemoveFontResourceExA,'RemoveFontResourceExA','gdi32.dll');

procedure RemoveFontResourceExW(
    _001            : in LPCWSTR; 
    _002            : in DWORD; 
    _003            : in PVOID)
                      return BOOL;
#pragma convention(RemoveFontResourceExW,system);
#pragma import(RemoveFontResourceExW,'RemoveFontResourceExW','gdi32.dll');

#if #declared UNICODE; then;
#template RemoveFontResourceEx;
  RemoveFontResourceExW 
#end RemoveFontResourceEx;
#else;
#template RemoveFontResourceEx;
  RemoveFontResourceExA 
#end RemoveFontResourceEx;
#end if;

type
t_182=^DWORD for machine_pointer use true;

procedure AddFontMemResourceEx(
    _001            : in PVOID; 
    _002            : in DWORD; 
    _003            : in PVOID; 
    _004            : in t_182)
                      return t_HANDLE;
#pragma convention(AddFontMemResourceEx,system);
#pragma import(AddFontMemResourceEx,'AddFontMemResourceEx','gdi32.dll');

procedure RemoveFontMemResourceEx(
    _001            : in t_HANDLE)
                      return BOOL;
#pragma convention(RemoveFontMemResourceEx,system);
#pragma import(RemoveFontMemResourceEx,'RemoveFontMemResourceEx','gdi32.dll');

const
  FR_PRIVATE        = $10;

const
  FR_NOT_ENUM       = $20;

--  The actual size of the DESIGNVECTOR and ENUMLOGFONTEXDV structures
--  is determined by dvNumAxes,
--  MM_MAX_NUMAXES only detemines the maximal size allowed
const
  MM_MAX_AXES_NAMELEN= 16;

type
  tagAXISINFOA      = record
axMinValue      : LONG;
axMaxValue      : LONG;
axAxisName      : array 0..MM_MAX_AXES_NAMELEN-1 of BYTE;
  end record;
  AXISINFOA         = tagAXISINFOA;
  PAXISINFOA        = ^tagAXISINFOA;
  LPAXISINFOA       = ^tagAXISINFOA;

type
  tagAXISINFOW      = record
axMinValue      : LONG;
axMaxValue      : LONG;
axAxisName      : array 0..MM_MAX_AXES_NAMELEN-1 of WCHAR;
  end record;
  AXISINFOW         = tagAXISINFOW;
  PAXISINFOW        = ^tagAXISINFOW;
  LPAXISINFOW       = ^tagAXISINFOW;

#if #declared UNICODE; then;
type
AXISINFO          = AXISINFOW;
type
PAXISINFO         = PAXISINFOW;
type
LPAXISINFO        = LPAXISINFOW;
#else;
type
AXISINFO          = AXISINFOA;
type
PAXISINFO         = PAXISINFOA;
type
LPAXISINFO        = LPAXISINFOA;
#end if;

type
  tagAXESLISTA      = record
axlReserved     : DWORD;
axlNumAxes      : DWORD;
axlAxisInfo     : array 0..MM_MAX_NUMAXES-1 of AXISINFOA;
  end record;
  AXESLISTA         = tagAXESLISTA;
  PAXESLISTA        = ^tagAXESLISTA;
  LPAXESLISTA       = ^tagAXESLISTA;

type
  tagAXESLISTW      = record
axlReserved     : DWORD;
axlNumAxes      : DWORD;
axlAxisInfo     : array 0..MM_MAX_NUMAXES-1 of AXISINFOW;
  end record;
  AXESLISTW         = tagAXESLISTW;
  PAXESLISTW        = ^tagAXESLISTW;
  LPAXESLISTW       = ^tagAXESLISTW;

#if #declared UNICODE; then;
type
AXESLIST          = AXESLISTW;
type
PAXESLIST         = PAXESLISTW;
type
LPAXESLIST        = LPAXESLISTW;
#else;
type
AXESLIST          = AXESLISTA;
type
PAXESLIST         = PAXESLISTA;
type
LPAXESLIST        = LPAXESLISTA;
#end if;

--  The actual size of the AXESLIST and ENUMTEXTMETRIC structure is
--  determined by axlNumAxes,
--  MM_MAX_NUMAXES only detemines the maximal size allowed
type
  tagENUMLOGFONTEXDVA = record
elfEnumLogfontEx : ENUMLOGFONTEXA;
elfDesignVector : DESIGNVECTOR;
  end record;
  ENUMLOGFONTEXDVA  = tagENUMLOGFONTEXDVA;
  PENUMLOGFONTEXDVA = ^tagENUMLOGFONTEXDVA;
  LPENUMLOGFONTEXDVA = ^tagENUMLOGFONTEXDVA;

type
  tagENUMLOGFONTEXDVW = record
elfEnumLogfontEx : ENUMLOGFONTEXW;
elfDesignVector : DESIGNVECTOR;
  end record;
  ENUMLOGFONTEXDVW  = tagENUMLOGFONTEXDVW;
  PENUMLOGFONTEXDVW = ^tagENUMLOGFONTEXDVW;
  LPENUMLOGFONTEXDVW = ^tagENUMLOGFONTEXDVW;

#if #declared UNICODE; then;
type
ENUMLOGFONTEXDV   = ENUMLOGFONTEXDVW;
type
PENUMLOGFONTEXDV  = PENUMLOGFONTEXDVW;
type
LPENUMLOGFONTEXDV = LPENUMLOGFONTEXDVW;
#else;
type
ENUMLOGFONTEXDV   = ENUMLOGFONTEXDVA;
type
PENUMLOGFONTEXDV  = PENUMLOGFONTEXDVA;
type
LPENUMLOGFONTEXDV = LPENUMLOGFONTEXDVA;
#end if;

type
t_183=^ENUMLOGFONTEXDVA for machine_pointer use true;

procedure CreateFontIndirectExA(
    _001            : in t_183)
                      return HFONT;
#pragma convention(CreateFontIndirectExA,system);
#pragma import(CreateFontIndirectExA,'CreateFontIndirectExA','gdi32.dll');

type
t_184=^ENUMLOGFONTEXDVW for machine_pointer use true;

procedure CreateFontIndirectExW(
    _001            : in t_184)
                      return HFONT;
#pragma convention(CreateFontIndirectExW,system);
#pragma import(CreateFontIndirectExW,'CreateFontIndirectExW','gdi32.dll');

#if #declared UNICODE; then;
#template CreateFontIndirectEx;
  CreateFontIndirectExW 
#end CreateFontIndirectEx;
#else;
#template CreateFontIndirectEx;
  CreateFontIndirectExA 
#end CreateFontIndirectEx;
#end if;

type
  tagENUMTEXTMETRICA = record
etmNewTextMetricEx : NEWTEXTMETRICEXA;
etmAxesList     : AXESLISTA;
  end record;
  ENUMTEXTMETRICA   = tagENUMTEXTMETRICA;
  PENUMTEXTMETRICA  = ^tagENUMTEXTMETRICA;
  LPENUMTEXTMETRICA = ^tagENUMTEXTMETRICA;

type
  tagENUMTEXTMETRICW = record
etmNewTextMetricEx : NEWTEXTMETRICEXW;
etmAxesList     : AXESLISTW;
  end record;
  ENUMTEXTMETRICW   = tagENUMTEXTMETRICW;
  PENUMTEXTMETRICW  = ^tagENUMTEXTMETRICW;
  LPENUMTEXTMETRICW = ^tagENUMTEXTMETRICW;

#if #declared UNICODE; then;
type
ENUMTEXTMETRIC    = ENUMTEXTMETRICW;
type
PENUMTEXTMETRIC   = PENUMTEXTMETRICW;
type
LPENUMTEXTMETRIC  = LPENUMTEXTMETRICW;
#else;
type
ENUMTEXTMETRIC    = ENUMTEXTMETRICA;
type
PENUMTEXTMETRIC   = PENUMTEXTMETRICA;
type
LPENUMTEXTMETRIC  = LPENUMTEXTMETRICA;
#end if;

procedure GetViewportExtEx(
    _001            : in t_HDC; 
    _002            : out tagSIZE)
                      return BOOL;
#pragma convention(GetViewportExtEx,system);
#pragma import(GetViewportExtEx,'GetViewportExtEx','gdi32.dll');

procedure GetViewportOrgEx(
    _001            : in t_HDC; 
    _002            : out tagPOINT)
                      return BOOL;
#pragma convention(GetViewportOrgEx,system);
#pragma import(GetViewportOrgEx,'GetViewportOrgEx','gdi32.dll');

procedure GetWindowExtEx(
    _001            : in t_HDC; 
    _002            : out tagSIZE)
                      return BOOL;
#pragma convention(GetWindowExtEx,system);
#pragma import(GetWindowExtEx,'GetWindowExtEx','gdi32.dll');

procedure GetWindowOrgEx(
    _001            : in t_HDC; 
    _002            : out tagPOINT)
                      return BOOL;
#pragma convention(GetWindowOrgEx,system);
#pragma import(GetWindowOrgEx,'GetWindowOrgEx','gdi32.dll');

type
t_185=signed 32;

t_186=signed 32;

t_187=signed 32;

t_188=signed 32;

  t_189 = signed 32;

procedure IntersectClipRect(
    _001            : in t_HDC; 
    _002            : in t_185; 
    _003            : in t_186; 
    _004            : in t_187; 
    _005            : in t_188)
                      return t_189;
#pragma convention(IntersectClipRect,system);
#pragma import(IntersectClipRect,'IntersectClipRect','gdi32.dll');

procedure InvertRgn(
    _001            : in t_HDC; 
    _002            : in t_HRGN)
                      return BOOL;
#pragma convention(InvertRgn,system);
#pragma import(InvertRgn,'InvertRgn','gdi32.dll');

type
t_190=signed 32;

t_191=signed 32;

t_192=signed 32;

t_193=signed 32;

procedure LineDDA(
    _001            : in t_190; 
    _002            : in t_191; 
    _003            : in t_192; 
    _004            : in t_193; 
    _005            : in LINEDDAPROC; 
    _006            : in t_LPARAM)
                      return BOOL;
#pragma convention(LineDDA,system);
#pragma import(LineDDA,'LineDDA','gdi32.dll');

type
t_194=signed 32;

t_195=signed 32;

procedure LineTo(
    _001            : in t_HDC; 
    _002            : in t_194; 
    _003            : in t_195)
                      return BOOL;
#pragma convention(LineTo,system);
#pragma import(LineTo,'LineTo','gdi32.dll');

type
t_196=signed 32;

t_197=signed 32;

t_198=signed 32;

t_199=signed 32;

t_200=signed 32;

t_201=signed 32;

t_202=signed 32;

t_203=signed 32;

procedure MaskBlt(
    _001            : in t_HDC; 
    _002            : in t_196; 
    _003            : in t_197; 
    _004            : in t_198; 
    _005            : in t_199; 
    _006            : in t_HDC; 
    _007            : in t_200; 
    _008            : in t_201; 
    _009            : in t_HBITMAP; 
    _010            : in t_202; 
    _011            : in t_203; 
    _012            : in DWORD)
                      return BOOL;
#pragma convention(MaskBlt,system);
#pragma import(MaskBlt,'MaskBlt','gdi32.dll');

type
t_204=^t_POINT for machine_pointer use true;

t_205=signed 32;

t_206=signed 32;

t_207=signed 32;

t_208=signed 32;

t_209=signed 32;

t_210=signed 32;

procedure PlgBlt(
    _001            : in t_HDC; 
    _002            : in t_204; 
    _003            : in t_HDC; 
    _004            : in t_205; 
    _005            : in t_206; 
    _006            : in t_207; 
    _007            : in t_208; 
    _008            : in t_HBITMAP; 
    _009            : in t_209; 
    _010            : in t_210)
                      return BOOL;
#pragma convention(PlgBlt,system);
#pragma import(PlgBlt,'PlgBlt','gdi32.dll');

type
t_211=signed 32;

t_212=signed 32;

  t_213 = signed 32;

procedure OffsetClipRgn(
    _001            : in t_HDC; 
    _002            : in t_211; 
    _003            : in t_212)
                      return t_213;
#pragma convention(OffsetClipRgn,system);
#pragma import(OffsetClipRgn,'OffsetClipRgn','gdi32.dll');

type
t_214=signed 32;

t_215=signed 32;

  t_216 = signed 32;

procedure OffsetRgn(
    _001            : in t_HRGN; 
    _002            : in t_214; 
    _003            : in t_215)
                      return t_216;
#pragma convention(OffsetRgn,system);
#pragma import(OffsetRgn,'OffsetRgn','gdi32.dll');

type
t_217=signed 32;

t_218=signed 32;

t_219=signed 32;

t_220=signed 32;

procedure PatBlt(
    _001            : in t_HDC; 
    _002            : in t_217; 
    _003            : in t_218; 
    _004            : in t_219; 
    _005            : in t_220; 
    _006            : in DWORD)
                      return BOOL;
#pragma convention(PatBlt,system);
#pragma import(PatBlt,'PatBlt','gdi32.dll');

type
t_221=signed 32;

t_222=signed 32;

t_223=signed 32;

t_224=signed 32;

t_225=signed 32;

t_226=signed 32;

t_227=signed 32;

t_228=signed 32;

procedure Pie(
    _001            : in t_HDC; 
    _002            : in t_221; 
    _003            : in t_222; 
    _004            : in t_223; 
    _005            : in t_224; 
    _006            : in t_225; 
    _007            : in t_226; 
    _008            : in t_227; 
    _009            : in t_228)
                      return BOOL;
#pragma convention(Pie,system);
#pragma import(Pie,'Pie','gdi32.dll');

procedure PlayMetaFile(
    _001            : in t_HDC; 
    _002            : in HMETAFILE)
                      return BOOL;
#pragma convention(PlayMetaFile,system);
#pragma import(PlayMetaFile,'PlayMetaFile','gdi32.dll');

procedure PaintRgn(
    _001            : in t_HDC; 
    _002            : in t_HRGN)
                      return BOOL;
#pragma convention(PaintRgn,system);
#pragma import(PaintRgn,'PaintRgn','gdi32.dll');

type
t_229=^t_POINT for machine_pointer use true;

t_230=^INT for machine_pointer use true;

t_231=signed 32;

procedure PolyPolygon(
    _001            : in t_HDC; 
    _002            : in t_229; 
    _003            : in t_230; 
    _004            : in t_231)
                      return BOOL;
#pragma convention(PolyPolygon,system);
#pragma import(PolyPolygon,'PolyPolygon','gdi32.dll');

type
t_232=signed 32;

t_233=signed 32;

procedure PtInRegion(
    _001            : in t_HRGN; 
    _002            : in t_232; 
    _003            : in t_233)
                      return BOOL;
#pragma convention(PtInRegion,system);
#pragma import(PtInRegion,'PtInRegion','gdi32.dll');

type
t_234=signed 32;

t_235=signed 32;

procedure PtVisible(
    _001            : in t_HDC; 
    _002            : in t_234; 
    _003            : in t_235)
                      return BOOL;
#pragma convention(PtVisible,system);
#pragma import(PtVisible,'PtVisible','gdi32.dll');

type
t_236=^RECT for machine_pointer use true;

procedure RectInRegion(
    _001            : in t_HRGN; 
    _002            : in t_236)
                      return BOOL;
#pragma convention(RectInRegion,system);
#pragma import(RectInRegion,'RectInRegion','gdi32.dll');

type
t_237=^RECT for machine_pointer use true;

procedure RectVisible(
    _001            : in t_HDC; 
    _002            : in t_237)
                      return BOOL;
#pragma convention(RectVisible,system);
#pragma import(RectVisible,'RectVisible','gdi32.dll');

type
t_238=signed 32;

t_239=signed 32;

t_240=signed 32;

t_241=signed 32;

procedure Rectangle(
    _001            : in t_HDC; 
    _002            : in t_238; 
    _003            : in t_239; 
    _004            : in t_240; 
    _005            : in t_241)
                      return BOOL;
#pragma convention(Rectangle,system);
#pragma import(Rectangle,'Rectangle','gdi32.dll');

type
t_242=signed 32;

procedure RestoreDC(
    _001            : in t_HDC; 
    _002            : in t_242)
                      return BOOL;
#pragma convention(RestoreDC,system);
#pragma import(RestoreDC,'RestoreDC','gdi32.dll');

type
t_243=^DEVMODEA for machine_pointer use true;

procedure ResetDCA(
    _001            : in t_HDC; 
    _002            : in t_243)
                      return t_HDC;
#pragma convention(ResetDCA,system);
#pragma import(ResetDCA,'ResetDCA','gdi32.dll');

type
t_244=^DEVMODEW for machine_pointer use true;

procedure ResetDCW(
    _001            : in t_HDC; 
    _002            : in t_244)
                      return t_HDC;
#pragma convention(ResetDCW,system);
#pragma import(ResetDCW,'ResetDCW','gdi32.dll');

#if #declared UNICODE; then;
#template ResetDC;
  ResetDCW 
#end ResetDC;
#else;
#template ResetDC;
  ResetDCA 
#end ResetDC;
#end if;

procedure RealizePalette(
    _001            : in t_HDC)
                      return UINT;
#pragma convention(RealizePalette,system);
#pragma import(RealizePalette,'RealizePalette','gdi32.dll');

procedure RemoveFontResourceA(
    _001            : in LPCSTR)
                      return BOOL;
#pragma convention(RemoveFontResourceA,system);
#pragma import(RemoveFontResourceA,'RemoveFontResourceA','gdi32.dll');

procedure RemoveFontResourceW(
    _001            : in LPCWSTR)
                      return BOOL;
#pragma convention(RemoveFontResourceW,system);
#pragma import(RemoveFontResourceW,'RemoveFontResourceW','gdi32.dll');

#if #declared UNICODE; then;
#template RemoveFontResource;
  RemoveFontResourceW 
#end RemoveFontResource;
#else;
#template RemoveFontResource;
  RemoveFontResourceA 
#end RemoveFontResource;
#end if;

type
t_245=signed 32;

t_246=signed 32;

t_247=signed 32;

t_248=signed 32;

t_249=signed 32;

t_250=signed 32;

procedure RoundRect(
    _001            : in t_HDC; 
    _002            : in t_245; 
    _003            : in t_246; 
    _004            : in t_247; 
    _005            : in t_248; 
    _006            : in t_249; 
    _007            : in t_250)
                      return BOOL;
#pragma convention(RoundRect,system);
#pragma import(RoundRect,'RoundRect','gdi32.dll');

procedure ResizePalette(
    _001            : in HPALETTE; 
    _002            : in UINT)
                      return BOOL;
#pragma convention(ResizePalette,system);
#pragma import(ResizePalette,'ResizePalette','gdi32.dll');

type
  t_251 = signed 32;

procedure SaveDC(
    _001            : in t_HDC)
                      return t_251;
#pragma convention(SaveDC,system);
#pragma import(SaveDC,'SaveDC','gdi32.dll');

type
  t_252 = signed 32;

procedure SelectClipRgn(
    _001            : in t_HDC; 
    _002            : in t_HRGN)
                      return t_252;
#pragma convention(SelectClipRgn,system);
#pragma import(SelectClipRgn,'SelectClipRgn','gdi32.dll');

type
t_253=signed 32;

  t_254 = signed 32;

procedure ExtSelectClipRgn(
    _001            : in t_HDC; 
    _002            : in t_HRGN; 
    _003            : in t_253)
                      return t_254;
#pragma convention(ExtSelectClipRgn,system);
#pragma import(ExtSelectClipRgn,'ExtSelectClipRgn','gdi32.dll');

type
  t_255 = signed 32;

procedure SetMetaRgn(
    _001            : in t_HDC)
                      return t_255;
#pragma convention(SetMetaRgn,system);
#pragma import(SetMetaRgn,'SetMetaRgn','gdi32.dll');

procedure SelectObject(
    _001            : in t_HDC; 
    _002            : in HGDIOBJ)
                      return HGDIOBJ;
#pragma convention(SelectObject,system);
#pragma import(SelectObject,'SelectObject','gdi32.dll');

procedure SelectPalette(
    _001            : in t_HDC; 
    _002            : in HPALETTE; 
    _003            : in BOOL)
                      return HPALETTE;
#pragma convention(SelectPalette,system);
#pragma import(SelectPalette,'SelectPalette','gdi32.dll');

procedure SetBkColor(
    _001            : in t_HDC; 
    _002            : in COLORREF)
                      return COLORREF;
#pragma convention(SetBkColor,system);
#pragma import(SetBkColor,'SetBkColor','gdi32.dll');

procedure SetDCBrushColor(
    _001            : in t_HDC; 
    _002            : in COLORREF)
                      return COLORREF;
#pragma convention(SetDCBrushColor,system);
#pragma import(SetDCBrushColor,'SetDCBrushColor','gdi32.dll');

procedure SetDCPenColor(
    _001            : in t_HDC; 
    _002            : in COLORREF)
                      return COLORREF;
#pragma convention(SetDCPenColor,system);
#pragma import(SetDCPenColor,'SetDCPenColor','gdi32.dll');

type
t_256=signed 32;

  t_257 = signed 32;

procedure SetBkMode(
    _001            : in t_HDC; 
    _002            : in t_256)
                      return t_257;
#pragma convention(SetBkMode,system);
#pragma import(SetBkMode,'SetBkMode','gdi32.dll');

type
t_258=^unchecked for machine_pointer use true;

procedure SetBitmapBits(
    _001            : in t_HBITMAP; 
    _002            : in DWORD; 
    _003            : in t_258)
                      return LONG;
#pragma convention(SetBitmapBits,system);
#pragma import(SetBitmapBits,'SetBitmapBits','gdi32.dll');

type
t_259=^RECT for machine_pointer use true;

procedure SetBoundsRect(
    _001            : in t_HDC; 
    _002            : in t_259; 
    _003            : in UINT)
                      return UINT;
#pragma convention(SetBoundsRect,system);
#pragma import(SetBoundsRect,'SetBoundsRect','gdi32.dll');

type
t_260=^unchecked for machine_pointer use true;

t_261=^BITMAPINFO for machine_pointer use true;

  t_262 = signed 32;

procedure SetDIBits(
    _001            : in t_HDC; 
    _002            : in t_HBITMAP; 
    _003            : in UINT; 
    _004            : in UINT; 
    _005            : in t_260; 
    _006            : in t_261; 
    _007            : in UINT)
                      return t_262;
#pragma convention(SetDIBits,system);
#pragma import(SetDIBits,'SetDIBits','gdi32.dll');

type
t_263=signed 32;

t_264=signed 32;

t_265=signed 32;

t_266=signed 32;

t_267=^unchecked for machine_pointer use true;

t_268=^BITMAPINFO for machine_pointer use true;

  t_269 = signed 32;

procedure SetDIBitsToDevice(
    _001            : in t_HDC; 
    _002            : in t_263; 
    _003            : in t_264; 
    _004            : in DWORD; 
    _005            : in DWORD; 
    _006            : in t_265; 
    _007            : in t_266; 
    _008            : in UINT; 
    _009            : in UINT; 
    _010            : in t_267; 
    _011            : in t_268; 
    _012            : in UINT)
                      return t_269;
#pragma convention(SetDIBitsToDevice,system);
#pragma import(SetDIBitsToDevice,'SetDIBitsToDevice','gdi32.dll');

procedure SetMapperFlags(
    _001            : in t_HDC; 
    _002            : in DWORD)
                      return DWORD;
#pragma convention(SetMapperFlags,system);
#pragma import(SetMapperFlags,'SetMapperFlags','gdi32.dll');

type
t_270=signed 32;

  t_271 = signed 32;

procedure SetGraphicsMode(
    hdc             : in t_HDC; 
    iMode           : in t_270)
                      return t_271;
#pragma convention(SetGraphicsMode,system);
#pragma import(SetGraphicsMode,'SetGraphicsMode','gdi32.dll');

type
t_272=signed 32;

  t_273 = signed 32;

procedure SetMapMode(
    _001            : in t_HDC; 
    _002            : in t_272)
                      return t_273;
#pragma convention(SetMapMode,system);
#pragma import(SetMapMode,'SetMapMode','gdi32.dll');

procedure SetLayout(
    _001            : in t_HDC; 
    _002            : in DWORD)
                      return DWORD;
#pragma convention(SetLayout,system);
#pragma import(SetLayout,'SetLayout','gdi32.dll');

procedure GetLayout(
    _001            : in t_HDC)
                      return DWORD;
#pragma convention(GetLayout,system);
#pragma import(GetLayout,'GetLayout','gdi32.dll');

type
t_274=^BYTE for machine_pointer use true;

procedure SetMetaFileBitsEx(
    _001            : in UINT; 
    _002            : in t_274)
                      return HMETAFILE;
#pragma convention(SetMetaFileBitsEx,system);
#pragma import(SetMetaFileBitsEx,'SetMetaFileBitsEx','gdi32.dll');

type
t_275=^PALETTEENTRY for machine_pointer use true;

procedure SetPaletteEntries(
    _001            : in HPALETTE; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : in t_275)
                      return UINT;
#pragma convention(SetPaletteEntries,system);
#pragma import(SetPaletteEntries,'SetPaletteEntries','gdi32.dll');

type
t_276=signed 32;

t_277=signed 32;

procedure SetPixel(
    _001            : in t_HDC; 
    _002            : in t_276; 
    _003            : in t_277; 
    _004            : in COLORREF)
                      return COLORREF;
#pragma convention(SetPixel,system);
#pragma import(SetPixel,'SetPixel','gdi32.dll');

type
t_278=signed 32;

t_279=signed 32;

procedure SetPixelV(
    _001            : in t_HDC; 
    _002            : in t_278; 
    _003            : in t_279; 
    _004            : in COLORREF)
                      return BOOL;
#pragma convention(SetPixelV,system);
#pragma import(SetPixelV,'SetPixelV','gdi32.dll');

type
t_280=signed 32;

t_281=^PIXELFORMATDESCRIPTOR for machine_pointer use true;

procedure SetPixelFormat(
    _001            : in t_HDC; 
    _002            : in t_280; 
    _003            : in t_281)
                      return BOOL;
#pragma convention(SetPixelFormat,system);
#pragma import(SetPixelFormat,'SetPixelFormat','gdi32.dll');

type
t_282=signed 32;

  t_283 = signed 32;

procedure SetPolyFillMode(
    _001            : in t_HDC; 
    _002            : in t_282)
                      return t_283;
#pragma convention(SetPolyFillMode,system);
#pragma import(SetPolyFillMode,'SetPolyFillMode','gdi32.dll');

type
t_284=signed 32;

t_285=signed 32;

t_286=signed 32;

t_287=signed 32;

t_288=signed 32;

t_289=signed 32;

t_290=signed 32;

t_291=signed 32;

procedure StretchBlt(
    _001            : in t_HDC; 
    _002            : in t_284; 
    _003            : in t_285; 
    _004            : in t_286; 
    _005            : in t_287; 
    _006            : in t_HDC; 
    _007            : in t_288; 
    _008            : in t_289; 
    _009            : in t_290; 
    _010            : in t_291; 
    _011            : in DWORD)
                      return BOOL;
#pragma convention(StretchBlt,system);
#pragma import(StretchBlt,'StretchBlt','gdi32.dll');

type
t_292=signed 32;

t_293=signed 32;

t_294=signed 32;

t_295=signed 32;

procedure SetRectRgn(
    _001            : in t_HRGN; 
    _002            : in t_292; 
    _003            : in t_293; 
    _004            : in t_294; 
    _005            : in t_295)
                      return BOOL;
#pragma convention(SetRectRgn,system);
#pragma import(SetRectRgn,'SetRectRgn','gdi32.dll');

type
t_296=signed 32;

t_297=signed 32;

t_298=signed 32;

t_299=signed 32;

t_300=signed 32;

t_301=signed 32;

t_302=signed 32;

t_303=signed 32;

t_304=^unchecked for machine_pointer use true;

t_305=^BITMAPINFO for machine_pointer use true;

  t_306 = signed 32;

procedure StretchDIBits(
    _001            : in t_HDC; 
    _002            : in t_296; 
    _003            : in t_297; 
    _004            : in t_298; 
    _005            : in t_299; 
    _006            : in t_300; 
    _007            : in t_301; 
    _008            : in t_302; 
    _009            : in t_303; 
    _010            : in t_304; 
    _011            : in t_305; 
    _012            : in UINT; 
    _013            : in DWORD)
                      return t_306;
#pragma convention(StretchDIBits,system);
#pragma import(StretchDIBits,'StretchDIBits','gdi32.dll');

type
t_307=signed 32;

  t_308 = signed 32;

procedure SetROP2(
    _001            : in t_HDC; 
    _002            : in t_307)
                      return t_308;
#pragma convention(SetROP2,system);
#pragma import(SetROP2,'SetROP2','gdi32.dll');

type
t_309=signed 32;

  t_310 = signed 32;

procedure SetStretchBltMode(
    _001            : in t_HDC; 
    _002            : in t_309)
                      return t_310;
#pragma convention(SetStretchBltMode,system);
#pragma import(SetStretchBltMode,'SetStretchBltMode','gdi32.dll');

procedure SetSystemPaletteUse(
    _001            : in t_HDC; 
    _002            : in UINT)
                      return UINT;
#pragma convention(SetSystemPaletteUse,system);
#pragma import(SetSystemPaletteUse,'SetSystemPaletteUse','gdi32.dll');

type
t_311=signed 32;

  t_312 = signed 32;

procedure SetTextCharacterExtra(
    _001            : in t_HDC; 
    _002            : in t_311)
                      return t_312;
#pragma convention(SetTextCharacterExtra,system);
#pragma import(SetTextCharacterExtra,'SetTextCharacterExtra','gdi32.dll');

procedure SetTextColor(
    _001            : in t_HDC; 
    _002            : in COLORREF)
                      return COLORREF;
#pragma convention(SetTextColor,system);
#pragma import(SetTextColor,'SetTextColor','gdi32.dll');

procedure SetTextAlign(
    _001            : in t_HDC; 
    _002            : in UINT)
                      return UINT;
#pragma convention(SetTextAlign,system);
#pragma import(SetTextAlign,'SetTextAlign','gdi32.dll');

type
t_313=signed 32;

t_314=signed 32;

procedure SetTextJustification(
    _001            : in t_HDC; 
    _002            : in t_313; 
    _003            : in t_314)
                      return BOOL;
#pragma convention(SetTextJustification,system);
#pragma import(SetTextJustification,'SetTextJustification','gdi32.dll');

procedure UpdateColors(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(UpdateColors,system);
#pragma import(UpdateColors,'UpdateColors','gdi32.dll');

-- 
--  image blt
-- 
type
COLOR16           = USHORT;
type
  _TRIVERTEX        = record
x               : LONG;
y               : LONG;
Red             : COLOR16;
Green           : COLOR16;
Blue            : COLOR16;
Alpha           : COLOR16;
  end record;
  TRIVERTEX         = _TRIVERTEX;
  PTRIVERTEX        = ^_TRIVERTEX;
  LPTRIVERTEX       = ^_TRIVERTEX;

type
  _GRADIENT_TRIANGLE = record
Vertex1         : ULONG;
Vertex2         : ULONG;
Vertex3         : ULONG;
  end record;
  GRADIENT_TRIANGLE = _GRADIENT_TRIANGLE;
  PGRADIENT_TRIANGLE = ^_GRADIENT_TRIANGLE;
  LPGRADIENT_TRIANGLE = ^_GRADIENT_TRIANGLE;

type
  _GRADIENT_RECT    = record
UpperLeft       : ULONG;
LowerRight      : ULONG;
  end record;
  GRADIENT_RECT     = _GRADIENT_RECT;
  PGRADIENT_RECT    = ^_GRADIENT_RECT;
  LPGRADIENT_RECT   = ^_GRADIENT_RECT;

type
  _BLENDFUNCTION    = record
BlendOp         : BYTE;
BlendFlags      : BYTE;
SourceConstantAlpha : BYTE;
AlphaFormat     : BYTE;
  end record;
  BLENDFUNCTION     = _BLENDFUNCTION;
  PBLENDFUNCTION    = ^_BLENDFUNCTION;

-- 
--  currentlly defined blend function
-- 
const
  AC_SRC_OVER       = $00;

-- 
--  alpha format flags
-- 
const
  AC_SRC_ALPHA      = $01;

type
t_315=signed 32;

t_316=signed 32;

t_317=signed 32;

t_318=signed 32;

t_319=signed 32;

t_320=signed 32;

t_321=signed 32;

t_322=signed 32;

procedure AlphaBlend(
    _001            : in t_HDC; 
    _002            : in t_315; 
    _003            : in t_316; 
    _004            : in t_317; 
    _005            : in t_318; 
    _006            : in t_HDC; 
    _007            : in t_319; 
    _008            : in t_320; 
    _009            : in t_321; 
    _010            : in t_322; 
    _011            : in BLENDFUNCTION)
                      return BOOL;
#pragma convention(AlphaBlend,system);
#pragma import(AlphaBlend,'AlphaBlend','msimg32.dll');

type
t_323=signed 32;

t_324=signed 32;

t_325=signed 32;

t_326=signed 32;

t_327=signed 32;

t_328=signed 32;

t_329=signed 32;

t_330=signed 32;

procedure TransparentBlt(
    _001            : in t_HDC; 
    _002            : in t_323; 
    _003            : in t_324; 
    _004            : in t_325; 
    _005            : in t_326; 
    _006            : in t_HDC; 
    _007            : in t_327; 
    _008            : in t_328; 
    _009            : in t_329; 
    _010            : in t_330; 
    _011            : in UINT)
                      return BOOL;
#pragma convention(TransparentBlt,system);
#pragma import(TransparentBlt,'TransparentBlt','msimg32.dll');

-- 
--  gradient drawing modes
-- 
const
  GRADIENT_FILL_RECT_H= $00;

const
  GRADIENT_FILL_RECT_V= $01;

const
  GRADIENT_FILL_TRIANGLE= $02;

const
  GRADIENT_FILL_OP_FLAG= $FF;

procedure GradientFill(
    _001            : in t_HDC; 
    _002            : in PTRIVERTEX; 
    _003            : in ULONG; 
    _004            : in PVOID; 
    _005            : in ULONG; 
    _006            : in ULONG)
                      return BOOL;
#pragma convention(GradientFill,system);
#pragma import(GradientFill,'GradientFill','msimg32.dll');

procedure PlayMetaFileRecord(
    _001            : in t_HDC; 
    _002            : in LPHANDLETABLE; 
    _003            : in LPMETARECORD; 
    _004            : in UINT)
                      return BOOL;
#pragma convention(PlayMetaFileRecord,system);
#pragma import(PlayMetaFileRecord,'PlayMetaFileRecord','gdi32.dll');

type
  t_331 = signed 32;
t_332=^HANDLETABLE for machine_pointer use true;
t_333=^METARECORD for machine_pointer use true;
t_334=signed 32;

MFENUMPROC        = ^procedure (
    _001            : in t_HDC;
    _002            : in t_332;
    _003            : in t_333;
    _004            : in t_334;
    _005            : in t_LPARAM)
                      return t_331 for machine_pointer use true;
procedure EnumMetaFile(
    _001            : in t_HDC; 
    _002            : in HMETAFILE; 
    _003            : in MFENUMPROC; 
    _004            : in t_LPARAM)
                      return BOOL;
#pragma convention(EnumMetaFile,system);
#pragma import(EnumMetaFile,'EnumMetaFile','gdi32.dll');

type
  t_335 = signed 32;
t_336=^HANDLETABLE for machine_pointer use true;
t_337=^ENHMETARECORD for machine_pointer use true;
t_338=signed 32;

ENHMFENUMPROC     = ^procedure (
    _001            : t_HDC;
    _002            : t_336;
    _003            : in t_337;
    _004            : t_338;
    _005            : t_LPARAM)
                      return t_335 for machine_pointer use true;
--  Enhanced Metafile Function Declarations
procedure CloseEnhMetaFile(
    _001            : in t_HDC)
                      return t_HENHMETAFILE;
#pragma convention(CloseEnhMetaFile,system);
#pragma import(CloseEnhMetaFile,'CloseEnhMetaFile','gdi32.dll');

procedure CopyEnhMetaFileA(
    _001            : in t_HENHMETAFILE; 
    _002            : in LPCSTR)
                      return t_HENHMETAFILE;
#pragma convention(CopyEnhMetaFileA,system);
#pragma import(CopyEnhMetaFileA,'CopyEnhMetaFileA','gdi32.dll');

procedure CopyEnhMetaFileW(
    _001            : in t_HENHMETAFILE; 
    _002            : in LPCWSTR)
                      return t_HENHMETAFILE;
#pragma convention(CopyEnhMetaFileW,system);
#pragma import(CopyEnhMetaFileW,'CopyEnhMetaFileW','gdi32.dll');

#if #declared UNICODE; then;
#template CopyEnhMetaFile;
  CopyEnhMetaFileW 
#end CopyEnhMetaFile;
#else;
#template CopyEnhMetaFile;
  CopyEnhMetaFileA 
#end CopyEnhMetaFile;
#end if;

type
t_339=^RECT for machine_pointer use true;

procedure CreateEnhMetaFileA(
    _001            : in t_HDC; 
    _002            : in LPCSTR; 
    _003            : in t_339; 
    _004            : in LPCSTR)
                      return t_HDC;
#pragma convention(CreateEnhMetaFileA,system);
#pragma import(CreateEnhMetaFileA,'CreateEnhMetaFileA','gdi32.dll');

type
t_340=^RECT for machine_pointer use true;

procedure CreateEnhMetaFileW(
    _001            : in t_HDC; 
    _002            : in LPCWSTR; 
    _003            : in t_340; 
    _004            : in LPCWSTR)
                      return t_HDC;
#pragma convention(CreateEnhMetaFileW,system);
#pragma import(CreateEnhMetaFileW,'CreateEnhMetaFileW','gdi32.dll');

#if #declared UNICODE; then;
#template CreateEnhMetaFile;
  CreateEnhMetaFileW 
#end CreateEnhMetaFile;
#else;
#template CreateEnhMetaFile;
  CreateEnhMetaFileA 
#end CreateEnhMetaFile;
#end if;

procedure DeleteEnhMetaFile(
    _001            : in t_HENHMETAFILE)
                      return BOOL;
#pragma convention(DeleteEnhMetaFile,system);
#pragma import(DeleteEnhMetaFile,'DeleteEnhMetaFile','gdi32.dll');

type
t_341=^RECT for machine_pointer use true;

procedure EnumEnhMetaFile(
    _001            : in t_HDC; 
    _002            : in t_HENHMETAFILE; 
    _003            : in ENHMFENUMPROC; 
    _004            : in LPVOID; 
    _005            : in t_341)
                      return BOOL;
#pragma convention(EnumEnhMetaFile,system);
#pragma import(EnumEnhMetaFile,'EnumEnhMetaFile','gdi32.dll');

procedure GetEnhMetaFileA(
    _001            : in LPCSTR)
                      return t_HENHMETAFILE;
#pragma convention(GetEnhMetaFileA,system);
#pragma import(GetEnhMetaFileA,'GetEnhMetaFileA','gdi32.dll');

procedure GetEnhMetaFileW(
    _001            : in LPCWSTR)
                      return t_HENHMETAFILE;
#pragma convention(GetEnhMetaFileW,system);
#pragma import(GetEnhMetaFileW,'GetEnhMetaFileW','gdi32.dll');

#if #declared UNICODE; then;
#template GetEnhMetaFile;
  GetEnhMetaFileW 
#end GetEnhMetaFile;
#else;
#template GetEnhMetaFile;
  GetEnhMetaFileA 
#end GetEnhMetaFile;
#end if;

procedure GetEnhMetaFileBits(
    _001            : in t_HENHMETAFILE; 
    _002            : in UINT; 
    _003            : out BYTE )
                      return UINT;
#pragma convention(GetEnhMetaFileBits,system);
#pragma import(GetEnhMetaFileBits,'GetEnhMetaFileBits','gdi32.dll');

procedure GetEnhMetaFileDescriptionA(
    _001            : in t_HENHMETAFILE; 
    _002            : in UINT; 
    _003            : out CHARSTR )
                      return UINT;
#pragma convention(GetEnhMetaFileDescriptionA,system);
#pragma import(GetEnhMetaFileDescriptionA,'GetEnhMetaFileDescriptionA','gdi32.dll');

procedure GetEnhMetaFileDescriptionW(
    _001            : in t_HENHMETAFILE; 
    _002            : in UINT; 
    _003            : out WCHARSTR )
                      return UINT;
#pragma convention(GetEnhMetaFileDescriptionW,system);
#pragma import(GetEnhMetaFileDescriptionW,'GetEnhMetaFileDescriptionW','gdi32.dll');

#if #declared UNICODE; then;
#template GetEnhMetaFileDescription;
  GetEnhMetaFileDescriptionW 
#end GetEnhMetaFileDescription;
#else;
#template GetEnhMetaFileDescription;
  GetEnhMetaFileDescriptionA 
#end GetEnhMetaFileDescription;
#end if;

procedure GetEnhMetaFileHeader(
    _001            : in t_HENHMETAFILE; 
    _002            : in UINT; 
    _003            : out tagENHMETAHEADER)
                      return UINT;
#pragma convention(GetEnhMetaFileHeader,system);
#pragma import(GetEnhMetaFileHeader,'GetEnhMetaFileHeader','gdi32.dll');

procedure GetEnhMetaFilePaletteEntries(
    _001            : in t_HENHMETAFILE; 
    _002            : in UINT; 
    _003            : out tagPALETTEENTRY)
                      return UINT;
#pragma convention(GetEnhMetaFilePaletteEntries,system);
#pragma import(GetEnhMetaFilePaletteEntries,'GetEnhMetaFilePaletteEntries','gdi32.dll');

procedure GetEnhMetaFilePixelFormat(
    _001            : in t_HENHMETAFILE; 
    _002            : in UINT; 
    _003            : out PIXELFORMATDESCRIPTOR)
                      return UINT;
#pragma convention(GetEnhMetaFilePixelFormat,system);
#pragma import(GetEnhMetaFilePixelFormat,'GetEnhMetaFilePixelFormat','gdi32.dll');

procedure GetWinMetaFileBits(
    _001            : in t_HENHMETAFILE; 
    _002            : in UINT; 
    _003            : out BYTE ; 
    _004            : in INT; 
    _005            : in t_HDC)
                      return UINT;
#pragma convention(GetWinMetaFileBits,system);
#pragma import(GetWinMetaFileBits,'GetWinMetaFileBits','gdi32.dll');

type
t_342=^RECT for machine_pointer use true;

procedure PlayEnhMetaFile(
    _001            : in t_HDC; 
    _002            : in t_HENHMETAFILE; 
    _003            : in t_342)
                      return BOOL;
#pragma convention(PlayEnhMetaFile,system);
#pragma import(PlayEnhMetaFile,'PlayEnhMetaFile','gdi32.dll');

type
t_343=^ENHMETARECORD for machine_pointer use true;

procedure PlayEnhMetaFileRecord(
    _001            : in t_HDC; 
    _002            : in LPHANDLETABLE; 
    _003            : in t_343; 
    _004            : in UINT)
                      return BOOL;
#pragma convention(PlayEnhMetaFileRecord,system);
#pragma import(PlayEnhMetaFileRecord,'PlayEnhMetaFileRecord','gdi32.dll');

type
t_344=^BYTE for machine_pointer use true;

procedure SetEnhMetaFileBits(
    _001            : in UINT; 
    _002            : in t_344)
                      return t_HENHMETAFILE;
#pragma convention(SetEnhMetaFileBits,system);
#pragma import(SetEnhMetaFileBits,'SetEnhMetaFileBits','gdi32.dll');

type
t_345=^BYTE for machine_pointer use true;

t_346=^METAFILEPICT for machine_pointer use true;

procedure SetWinMetaFileBits(
    _001            : in UINT; 
    _002            : in t_345; 
    _003            : in t_HDC; 
    _004            : in t_346)
                      return t_HENHMETAFILE;
#pragma convention(SetWinMetaFileBits,system);
#pragma import(SetWinMetaFileBits,'SetWinMetaFileBits','gdi32.dll');

type
t_347=^BYTE for machine_pointer use true;

procedure GdiComment(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in t_347)
                      return BOOL;
#pragma convention(GdiComment,system);
#pragma import(GdiComment,'GdiComment','gdi32.dll');

procedure GetTextMetricsA(
    _001            : in t_HDC; 
    _002            : out tagTEXTMETRICA)
                      return BOOL;
#pragma convention(GetTextMetricsA,system);
#pragma import(GetTextMetricsA,'GetTextMetricsA','gdi32.dll');

procedure GetTextMetricsW(
    _001            : in t_HDC; 
    _002            : out tagTEXTMETRICW)
                      return BOOL;
#pragma convention(GetTextMetricsW,system);
#pragma import(GetTextMetricsW,'GetTextMetricsW','gdi32.dll');

#if #declared UNICODE; then;
#template GetTextMetrics;
  GetTextMetricsW 
#end GetTextMetrics;
#else;
#template GetTextMetrics;
  GetTextMetricsA 
#end GetTextMetrics;
#end if;

-- /* new GDI 
type
  tagDIBSECTION     = record
dsBm            : BITMAP;
dsBmih          : BITMAPINFOHEADER;
dsBitfields     : array 0..2 of DWORD;
dshSection      : t_HANDLE;
dsOffset        : DWORD;
  end record;
  DIBSECTION        = tagDIBSECTION;
  LPDIBSECTION      = ^tagDIBSECTION;
  PDIBSECTION       = ^tagDIBSECTION;

type
t_348=signed 32;

t_349=signed 32;

procedure AngleArc(
    _001            : in t_HDC; 
    _002            : in t_348; 
    _003            : in t_349; 
    _004            : in DWORD; 
    _005            : in t_FLOAT; 
    _006            : in t_FLOAT)
                      return BOOL;
#pragma convention(AngleArc,system);
#pragma import(AngleArc,'AngleArc','gdi32.dll');

type
t_350=^t_POINT for machine_pointer use true;

t_351=^DWORD for machine_pointer use true;

procedure PolyPolyline(
    _001            : in t_HDC; 
    _002            : in t_350; 
    _003            : in t_351; 
    _004            : in DWORD)
                      return BOOL;
#pragma convention(PolyPolyline,system);
#pragma import(PolyPolyline,'PolyPolyline','gdi32.dll');

procedure GetWorldTransform(
    _001            : in t_HDC; 
    _002            : out tagXFORM)
                      return BOOL;
#pragma convention(GetWorldTransform,system);
#pragma import(GetWorldTransform,'GetWorldTransform','gdi32.dll');

type
t_352=^t_XFORM for machine_pointer use true;

procedure SetWorldTransform(
    _001            : in t_HDC; 
    _002            : in t_352)
                      return BOOL;
#pragma convention(SetWorldTransform,system);
#pragma import(SetWorldTransform,'SetWorldTransform','gdi32.dll');

type
t_353=^t_XFORM for machine_pointer use true;

procedure ModifyWorldTransform(
    _001            : in t_HDC; 
    _002            : in t_353; 
    _003            : in DWORD)
                      return BOOL;
#pragma convention(ModifyWorldTransform,system);
#pragma import(ModifyWorldTransform,'ModifyWorldTransform','gdi32.dll');

type
t_354=^t_XFORM for machine_pointer use true;

t_355=^t_XFORM for machine_pointer use true;

procedure CombineTransform(
    _001            : out tagXFORM; 
    _002            : in t_354; 
    _003            : in t_355)
                      return BOOL;
#pragma convention(CombineTransform,system);
#pragma import(CombineTransform,'CombineTransform','gdi32.dll');

type
t_356=^BITMAPINFO for machine_pointer use true;

t_357=^unchecked for machine_pointer use true;

procedure CreateDIBSection(
    _001            : in t_HDC; 
    _002            : in t_356; 
    _003            : in UINT; 
    _004            : out t_357; 
    _005            : in t_HANDLE; 
    _006            : in DWORD)
                      return t_HBITMAP;
#pragma convention(CreateDIBSection,system);
#pragma import(CreateDIBSection,'CreateDIBSection','gdi32.dll');

procedure GetDIBColorTable(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : out RGBQUAD)
                      return UINT;
#pragma convention(GetDIBColorTable,system);
#pragma import(GetDIBColorTable,'GetDIBColorTable','gdi32.dll');

type
t_358=^RGBQUAD for machine_pointer use true;

procedure SetDIBColorTable(
    _001            : in t_HDC; 
    _002            : in UINT; 
    _003            : in UINT; 
    _004            : in t_358)
                      return UINT;
#pragma convention(SetDIBColorTable,system);
#pragma import(SetDIBColorTable,'SetDIBColorTable','gdi32.dll');

-- /* Flags value for COLORADJUSTMENT 
const
  CA_NEGATIVE       = $01;

const
  CA_LOG_FILTER     = $02;

-- /* IlluminantIndex values 
const
  ILLUMINANT_DEVICE_DEFAULT= 0;

const
  ILLUMINANT_A      = 1;

const
  ILLUMINANT_B      = 2;

const
  ILLUMINANT_C      = 3;

const
  ILLUMINANT_D50    = 4;

const
  ILLUMINANT_D55    = 5;

const
  ILLUMINANT_D65    = 6;

const
  ILLUMINANT_D75    = 7;

const
  ILLUMINANT_F2     = 8;

-- /* Min and max for RedGamma, GreenGamma, BlueGamma 
-- /* Min and max for ReferenceBlack and ReferenceWhite 
-- /* Min and max for Contrast, Brightness, Colorfulness, RedGreenTint 
type
  tagCOLORADJUSTMENT = record
caSize          : WORD;
caFlags         : WORD;
caIlluminantIndex : WORD;
caRedGamma      : WORD;
caGreenGamma    : WORD;
caBlueGamma     : WORD;
caReferenceBlack : WORD;
caReferenceWhite : WORD;
caContrast      : SHORT;
caBrightness    : SHORT;
caColorfulness  : SHORT;
caRedGreenTint  : SHORT;
  end record;
  t_COLORADJUSTMENT = tagCOLORADJUSTMENT;
  PCOLORADJUSTMENT  = ^tagCOLORADJUSTMENT;
  LPCOLORADJUSTMENT = ^tagCOLORADJUSTMENT;

type
t_359=^t_COLORADJUSTMENT for machine_pointer use true;

procedure SetColorAdjustment(
    _001            : in t_HDC; 
    _002            : in t_359)
                      return BOOL;
#pragma convention(SetColorAdjustment,system);
#pragma import(SetColorAdjustment,'SetColorAdjustment','gdi32.dll');

procedure GetColorAdjustment(
    _001            : in t_HDC; 
    _002            : out tagCOLORADJUSTMENT)
                      return BOOL;
#pragma convention(GetColorAdjustment,system);
#pragma import(GetColorAdjustment,'GetColorAdjustment','gdi32.dll');

procedure CreateHalftonePalette(
    _001            : in t_HDC)
                      return HPALETTE;
#pragma convention(CreateHalftonePalette,system);
#pragma import(CreateHalftonePalette,'CreateHalftonePalette','gdi32.dll');

type
ABORTPROC         = FARPROC;
type
  _DOCINFOA         = record
cbSize          : signed 32;
lpszDocName     : LPCSTR;
lpszOutput      : LPCSTR;
lpszDatatype    : LPCSTR;
fwType          : DWORD;
  end record;
  DOCINFOA          = _DOCINFOA;
  LPDOCINFOA        = ^_DOCINFOA;

type
  _DOCINFOW         = record
cbSize          : signed 32;
lpszDocName     : LPCWSTR;
lpszOutput      : LPCWSTR;
lpszDatatype    : LPCWSTR;
fwType          : DWORD;
  end record;
  DOCINFOW          = _DOCINFOW;
  LPDOCINFOW        = ^_DOCINFOW;

#if #declared UNICODE; then;
type
DOCINFO           = DOCINFOW;
type
LPDOCINFO         = LPDOCINFOW;
#else;
type
DOCINFO           = DOCINFOA;
type
LPDOCINFO         = LPDOCINFOA;
#end if;

const
  DI_APPBANDING     = $01;

const
  DI_ROPS_READ_DESTINATION= $02;

type
t_360=^DOCINFOA for machine_pointer use true;

  t_361 = signed 32;

procedure StartDocA(
    _001            : in t_HDC; 
    _002            : in t_360)
                      return t_361;
#pragma convention(StartDocA,system);
#pragma import(StartDocA,'StartDocA','gdi32.dll');

type
t_362=^DOCINFOW for machine_pointer use true;

  t_363 = signed 32;

procedure StartDocW(
    _001            : in t_HDC; 
    _002            : in t_362)
                      return t_363;
#pragma convention(StartDocW,system);
#pragma import(StartDocW,'StartDocW','gdi32.dll');

#if #declared UNICODE; then;
#template StartDoc;
  StartDocW 
#end StartDoc;
#else;
#template StartDoc;
  StartDocA 
#end StartDoc;
#end if;

type
  t_364 = signed 32;

procedure EndDoc(
    _001            : in t_HDC)
                      return t_364;
#pragma convention(EndDoc,system);
#pragma import(EndDoc,'EndDoc','gdi32.dll');

type
  t_365 = signed 32;

procedure StartPage(
    _001            : in t_HDC)
                      return t_365;
#pragma convention(StartPage,system);
#pragma import(StartPage,'StartPage','gdi32.dll');

type
  t_366 = signed 32;

procedure EndPage(
    _001            : in t_HDC)
                      return t_366;
#pragma convention(EndPage,system);
#pragma import(EndPage,'EndPage','gdi32.dll');

type
  t_367 = signed 32;

procedure AbortDoc(
    _001            : in t_HDC)
                      return t_367;
#pragma convention(AbortDoc,system);
#pragma import(AbortDoc,'AbortDoc','gdi32.dll');

type
  t_368 = signed 32;

procedure SetAbortProc(
    _001            : in t_HDC; 
    _002            : in ABORTPROC)
                      return t_368;
#pragma convention(SetAbortProc,system);
#pragma import(SetAbortProc,'SetAbortProc','gdi32.dll');

procedure AbortPath(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(AbortPath,system);
#pragma import(AbortPath,'AbortPath','gdi32.dll');

type
t_369=signed 32;

t_370=signed 32;

t_371=signed 32;

t_372=signed 32;

t_373=signed 32;

t_374=signed 32;

t_375=signed 32;

t_376=signed 32;

procedure ArcTo(
    _001            : in t_HDC; 
    _002            : in t_369; 
    _003            : in t_370; 
    _004            : in t_371; 
    _005            : in t_372; 
    _006            : in t_373; 
    _007            : in t_374; 
    _008            : in t_375; 
    _009            : in t_376)
                      return BOOL;
#pragma convention(ArcTo,system);
#pragma import(ArcTo,'ArcTo','gdi32.dll');

procedure BeginPath(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(BeginPath,system);
#pragma import(BeginPath,'BeginPath','gdi32.dll');

procedure CloseFigure(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(CloseFigure,system);
#pragma import(CloseFigure,'CloseFigure','gdi32.dll');

procedure EndPath(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(EndPath,system);
#pragma import(EndPath,'EndPath','gdi32.dll');

procedure FillPath(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(FillPath,system);
#pragma import(FillPath,'FillPath','gdi32.dll');

procedure FlattenPath(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(FlattenPath,system);
#pragma import(FlattenPath,'FlattenPath','gdi32.dll');

type
t_377=signed 32;

  t_378 = signed 32;

procedure GetPath(
    _001            : in t_HDC; 
    _002            : out tagPOINT; 
    _003            : out BYTE ; 
    _004            : in t_377)
                      return t_378;
#pragma convention(GetPath,system);
#pragma import(GetPath,'GetPath','gdi32.dll');

procedure PathToRegion(
    _001            : in t_HDC)
                      return t_HRGN;
#pragma convention(PathToRegion,system);
#pragma import(PathToRegion,'PathToRegion','gdi32.dll');

type
t_379=^t_POINT for machine_pointer use true;

t_380=^BYTE for machine_pointer use true;

t_381=signed 32;

procedure PolyDraw(
    _001            : in t_HDC; 
    _002            : in t_379; 
    _003            : in t_380; 
    _004            : in t_381)
                      return BOOL;
#pragma convention(PolyDraw,system);
#pragma import(PolyDraw,'PolyDraw','gdi32.dll');

type
t_382=signed 32;

procedure SelectClipPath(
    _001            : in t_HDC; 
    _002            : in t_382)
                      return BOOL;
#pragma convention(SelectClipPath,system);
#pragma import(SelectClipPath,'SelectClipPath','gdi32.dll');

type
t_383=signed 32;

  t_384 = signed 32;

procedure SetArcDirection(
    _001            : in t_HDC; 
    _002            : in t_383)
                      return t_384;
#pragma convention(SetArcDirection,system);
#pragma import(SetArcDirection,'SetArcDirection','gdi32.dll');

procedure SetMiterLimit(
    _001            : in t_HDC; 
    _002            : in t_FLOAT; 
    _003            : out t_FLOAT )
                      return BOOL;
#pragma convention(SetMiterLimit,system);
#pragma import(SetMiterLimit,'SetMiterLimit','gdi32.dll');

procedure StrokeAndFillPath(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(StrokeAndFillPath,system);
#pragma import(StrokeAndFillPath,'StrokeAndFillPath','gdi32.dll');

procedure StrokePath(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(StrokePath,system);
#pragma import(StrokePath,'StrokePath','gdi32.dll');

procedure WidenPath(
    _001            : in t_HDC)
                      return BOOL;
#pragma convention(WidenPath,system);
#pragma import(WidenPath,'WidenPath','gdi32.dll');

type
t_385=^LOGBRUSH for machine_pointer use true;

t_386=^DWORD for machine_pointer use true;

procedure ExtCreatePen(
    _001            : in DWORD; 
    _002            : in DWORD; 
    _003            : in t_385; 
    _004            : in DWORD; 
    _005            : in t_386)
                      return HPEN;
#pragma convention(ExtCreatePen,system);
#pragma import(ExtCreatePen,'ExtCreatePen','gdi32.dll');

procedure GetMiterLimit(
    _001            : in t_HDC; 
    _002            : out t_FLOAT )
                      return BOOL;
#pragma convention(GetMiterLimit,system);
#pragma import(GetMiterLimit,'GetMiterLimit','gdi32.dll');

type
  t_387 = signed 32;

procedure GetArcDirection(
    _001            : in t_HDC)
                      return t_387;
#pragma convention(GetArcDirection,system);
#pragma import(GetArcDirection,'GetArcDirection','gdi32.dll');

type
t_388=signed 32;

  t_389 = signed 32;

procedure GetObjectA(
    _001            : in HGDIOBJ; 
    _002            : in t_388; 
    _003            : out unchecked )
                      return t_389;
#pragma convention(GetObjectA,system);
#pragma import(GetObjectA,'GetObjectA','gdi32.dll');

type
t_390=signed 32;

  t_391 = signed 32;

procedure GetObjectW(
    _001            : in HGDIOBJ; 
    _002            : in t_390; 
    _003            : out unchecked )
                      return t_391;
#pragma convention(GetObjectW,system);
#pragma import(GetObjectW,'GetObjectW','gdi32.dll');

#if #declared UNICODE; then;
#template GetObject;
  GetObjectW 
#end GetObject;
#else;
#template GetObject;
  GetObjectA 
#end GetObject;
#end if;

type
t_392=signed 32;

t_393=signed 32;

procedure MoveToEx(
    _001            : in t_HDC; 
    _002            : in t_392; 
    _003            : in t_393; 
    _004            : out tagPOINT)
                      return BOOL;
#pragma convention(MoveToEx,system);
#pragma import(MoveToEx,'MoveToEx','gdi32.dll');

type
t_394=signed 32;

t_395=signed 32;

t_396=signed 32;

procedure TextOutA(
    _001            : in t_HDC; 
    _002            : in t_394; 
    _003            : in t_395; 
    _004            : in LPCSTR; 
    _005            : in t_396)
                      return BOOL;
#pragma convention(TextOutA,system);
#pragma import(TextOutA,'TextOutA','gdi32.dll');

type
t_397=signed 32;

t_398=signed 32;

t_399=signed 32;

procedure TextOutW(
    _001            : in t_HDC; 
    _002            : in t_397; 
    _003            : in t_398; 
    _004            : in LPCWSTR; 
    _005            : in t_399)
                      return BOOL;
#pragma convention(TextOutW,system);
#pragma import(TextOutW,'TextOutW','gdi32.dll');

#if #declared UNICODE; then;
#template TextOut;
  TextOutW 
#end TextOut;
#else;
#template TextOut;
  TextOutA 
#end TextOut;
#end if;

type
t_400=signed 32;

t_401=signed 32;

t_402=^RECT for machine_pointer use true;

t_403=^INT for machine_pointer use true;

procedure ExtTextOutA(
    _001            : in t_HDC; 
    _002            : in t_400; 
    _003            : in t_401; 
    _004            : in UINT; 
    _005            : in t_402; 
    _006            : in LPCSTR; 
    _007            : in UINT; 
    _008            : in t_403)
                      return BOOL;
#pragma convention(ExtTextOutA,system);
#pragma import(ExtTextOutA,'ExtTextOutA','gdi32.dll');

type
t_404=signed 32;

t_405=signed 32;

t_406=^RECT for machine_pointer use true;

t_407=^INT for machine_pointer use true;

procedure ExtTextOutW(
    _001            : in t_HDC; 
    _002            : in t_404; 
    _003            : in t_405; 
    _004            : in UINT; 
    _005            : in t_406; 
    _006            : in LPCWSTR; 
    _007            : in UINT; 
    _008            : in t_407)
                      return BOOL;
#pragma convention(ExtTextOutW,system);
#pragma import(ExtTextOutW,'ExtTextOutW','gdi32.dll');

#if #declared UNICODE; then;
#template ExtTextOut;
  ExtTextOutW 
#end ExtTextOut;
#else;
#template ExtTextOut;
  ExtTextOutA 
#end ExtTextOut;
#end if;

type
t_408=^POLYTEXTA for machine_pointer use true;

t_409=signed 32;

procedure PolyTextOutA(
    _001            : in t_HDC; 
    _002            : in t_408; 
    _003            : in t_409)
                      return BOOL;
#pragma convention(PolyTextOutA,system);
#pragma import(PolyTextOutA,'PolyTextOutA','gdi32.dll');

type
t_410=^POLYTEXTW for machine_pointer use true;

t_411=signed 32;

procedure PolyTextOutW(
    _001            : in t_HDC; 
    _002            : in t_410; 
    _003            : in t_411)
                      return BOOL;
#pragma convention(PolyTextOutW,system);
#pragma import(PolyTextOutW,'PolyTextOutW','gdi32.dll');

#if #declared UNICODE; then;
#template PolyTextOut;
  PolyTextOutW 
#end PolyTextOut;
#else;
#template PolyTextOut;
  PolyTextOutA 
#end PolyTextOut;
#end if;

type
t_412=^t_POINT for machine_pointer use true;

t_413=signed 32;

t_414=signed 32;

procedure CreatePolygonRgn(
    _001            : in t_412; 
    _002            : in t_413; 
    _003            : in t_414)
                      return t_HRGN;
#pragma convention(CreatePolygonRgn,system);
#pragma import(CreatePolygonRgn,'CreatePolygonRgn','gdi32.dll');

type
t_415=signed 32;

procedure DPtoLP(
    _001            : in t_HDC; 
    _002            : in out tagPOINT; 
    _003            : in t_415)
                      return BOOL;
#pragma convention(DPtoLP,system);
#pragma import(DPtoLP,'DPtoLP','gdi32.dll');

type
t_416=signed 32;

procedure LPtoDP(
    _001            : in t_HDC; 
    _002            : in out tagPOINT; 
    _003            : in t_416)
                      return BOOL;
#pragma convention(LPtoDP,system);
#pragma import(LPtoDP,'LPtoDP','gdi32.dll');

type
t_417=^t_POINT for machine_pointer use true;

t_418=signed 32;

procedure Polygon(
    _001            : in t_HDC; 
    _002            : in t_417; 
    _003            : in t_418)
                      return BOOL;
#pragma convention(Polygon,system);
#pragma import(Polygon,'Polygon','gdi32.dll');

type
t_419=^t_POINT for machine_pointer use true;

t_420=signed 32;

procedure Polyline(
    _001            : in t_HDC; 
    _002            : in t_419; 
    _003            : in t_420)
                      return BOOL;
#pragma convention(Polyline,system);
#pragma import(Polyline,'Polyline','gdi32.dll');

type
t_421=^t_POINT for machine_pointer use true;

procedure PolyBezier(
    _001            : in t_HDC; 
    _002            : in t_421; 
    _003            : in DWORD)
                      return BOOL;
#pragma convention(PolyBezier,system);
#pragma import(PolyBezier,'PolyBezier','gdi32.dll');

type
t_422=^t_POINT for machine_pointer use true;

procedure PolyBezierTo(
    _001            : in t_HDC; 
    _002            : in t_422; 
    _003            : in DWORD)
                      return BOOL;
#pragma convention(PolyBezierTo,system);
#pragma import(PolyBezierTo,'PolyBezierTo','gdi32.dll');

type
t_423=^t_POINT for machine_pointer use true;

procedure PolylineTo(
    _001            : in t_HDC; 
    _002            : in t_423; 
    _003            : in DWORD)
                      return BOOL;
#pragma convention(PolylineTo,system);
#pragma import(PolylineTo,'PolylineTo','gdi32.dll');

type
t_424=signed 32;

t_425=signed 32;

procedure SetViewportExtEx(
    _001            : in t_HDC; 
    _002            : in t_424; 
    _003            : in t_425; 
    _004            : out tagSIZE)
                      return BOOL;
#pragma convention(SetViewportExtEx,system);
#pragma import(SetViewportExtEx,'SetViewportExtEx','gdi32.dll');

type
t_426=signed 32;

t_427=signed 32;

procedure SetViewportOrgEx(
    _001            : in t_HDC; 
    _002            : in t_426; 
    _003            : in t_427; 
    _004            : out tagPOINT)
                      return BOOL;
#pragma convention(SetViewportOrgEx,system);
#pragma import(SetViewportOrgEx,'SetViewportOrgEx','gdi32.dll');

type
t_428=signed 32;

t_429=signed 32;

procedure SetWindowExtEx(
    _001            : in t_HDC; 
    _002            : in t_428; 
    _003            : in t_429; 
    _004            : out tagSIZE)
                      return BOOL;
#pragma convention(SetWindowExtEx,system);
#pragma import(SetWindowExtEx,'SetWindowExtEx','gdi32.dll');

type
t_430=signed 32;

t_431=signed 32;

procedure SetWindowOrgEx(
    _001            : in t_HDC; 
    _002            : in t_430; 
    _003            : in t_431; 
    _004            : out tagPOINT)
                      return BOOL;
#pragma convention(SetWindowOrgEx,system);
#pragma import(SetWindowOrgEx,'SetWindowOrgEx','gdi32.dll');

type
t_432=signed 32;

t_433=signed 32;

procedure OffsetViewportOrgEx(
    _001            : in t_HDC; 
    _002            : in t_432; 
    _003            : in t_433; 
    _004            : out tagPOINT)
                      return BOOL;
#pragma convention(OffsetViewportOrgEx,system);
#pragma import(OffsetViewportOrgEx,'OffsetViewportOrgEx','gdi32.dll');

type
t_434=signed 32;

t_435=signed 32;

procedure OffsetWindowOrgEx(
    _001            : in t_HDC; 
    _002            : in t_434; 
    _003            : in t_435; 
    _004            : out tagPOINT)
                      return BOOL;
#pragma convention(OffsetWindowOrgEx,system);
#pragma import(OffsetWindowOrgEx,'OffsetWindowOrgEx','gdi32.dll');

type
t_436=signed 32;

t_437=signed 32;

t_438=signed 32;

t_439=signed 32;

procedure ScaleViewportExtEx(
    _001            : in t_HDC; 
    _002            : in t_436; 
    _003            : in t_437; 
    _004            : in t_438; 
    _005            : in t_439; 
    _006            : out tagSIZE)
                      return BOOL;
#pragma convention(ScaleViewportExtEx,system);
#pragma import(ScaleViewportExtEx,'ScaleViewportExtEx','gdi32.dll');

type
t_440=signed 32;

t_441=signed 32;

t_442=signed 32;

t_443=signed 32;

procedure ScaleWindowExtEx(
    _001            : in t_HDC; 
    _002            : in t_440; 
    _003            : in t_441; 
    _004            : in t_442; 
    _005            : in t_443; 
    _006            : out tagSIZE)
                      return BOOL;
#pragma convention(ScaleWindowExtEx,system);
#pragma import(ScaleWindowExtEx,'ScaleWindowExtEx','gdi32.dll');

type
t_444=signed 32;

t_445=signed 32;

procedure SetBitmapDimensionEx(
    _001            : in t_HBITMAP; 
    _002            : in t_444; 
    _003            : in t_445; 
    _004            : out tagSIZE)
                      return BOOL;
#pragma convention(SetBitmapDimensionEx,system);
#pragma import(SetBitmapDimensionEx,'SetBitmapDimensionEx','gdi32.dll');

type
t_446=signed 32;

t_447=signed 32;

procedure SetBrushOrgEx(
    _001            : in t_HDC; 
    _002            : in t_446; 
    _003            : in t_447; 
    _004            : out tagPOINT)
                      return BOOL;
#pragma convention(SetBrushOrgEx,system);
#pragma import(SetBrushOrgEx,'SetBrushOrgEx','gdi32.dll');

type
t_448=signed 32;

  t_449 = signed 32;

procedure GetTextFaceA(
    _001            : in t_HDC; 
    _002            : in t_448; 
    _003            : out CHARSTR )
                      return t_449;
#pragma convention(GetTextFaceA,system);
#pragma import(GetTextFaceA,'GetTextFaceA','gdi32.dll');

type
t_450=signed 32;

  t_451 = signed 32;

procedure GetTextFaceW(
    _001            : in t_HDC; 
    _002            : in t_450; 
    _003            : out WCHARSTR )
                      return t_451;
#pragma convention(GetTextFaceW,system);
#pragma import(GetTextFaceW,'GetTextFaceW','gdi32.dll');

#if #declared UNICODE; then;
#template GetTextFace;
  GetTextFaceW 
#end GetTextFace;
#else;
#template GetTextFace;
  GetTextFaceA 
#end GetTextFace;
#end if;

const
  FONTMAPPER_MAX    = 10;

type
  tagKERNINGPAIR    = record
wFirst          : WORD;
wSecond         : WORD;
iKernAmount     : signed 32;
  end record;
  KERNINGPAIR       = tagKERNINGPAIR;
  LPKERNINGPAIR     = ^tagKERNINGPAIR;

procedure GetKerningPairsA(
    _001            : in t_HDC; 
    _002            : in DWORD; 
    _003            : out tagKERNINGPAIR)
                      return DWORD;
#pragma convention(GetKerningPairsA,system);
#pragma import(GetKerningPairsA,'GetKerningPairsA','gdi32.dll');

procedure GetKerningPairsW(
    _001            : in t_HDC; 
    _002            : in DWORD; 
    _003            : out tagKERNINGPAIR)
                      return DWORD;
#pragma convention(GetKerningPairsW,system);
#pragma import(GetKerningPairsW,'GetKerningPairsW','gdi32.dll');

#if #declared UNICODE; then;
#template GetKerningPairs;
  GetKerningPairsW 
#end GetKerningPairs;
#else;
#template GetKerningPairs;
  GetKerningPairsA 
#end GetKerningPairs;
#end if;

procedure GetDCOrgEx(
    _001            : in t_HDC; 
    _002            : out tagPOINT)
                      return BOOL;
#pragma convention(GetDCOrgEx,system);
#pragma import(GetDCOrgEx,'GetDCOrgEx','gdi32.dll');

type
t_452=signed 32;

t_453=signed 32;

procedure FixBrushOrgEx(
    _001            : in t_HDC; 
    _002            : in t_452; 
    _003            : in t_453; 
    _004            : in p_POINT)
                      return BOOL;
#pragma convention(FixBrushOrgEx,system);
#pragma import(FixBrushOrgEx,'FixBrushOrgEx','gdi32.dll');

procedure UnrealizeObject(
    _001            : in HGDIOBJ)
                      return BOOL;
#pragma convention(UnrealizeObject,system);
#pragma import(UnrealizeObject,'UnrealizeObject','gdi32.dll');

procedure GdiFlush
                      return BOOL;
#pragma convention(GdiFlush,system);
#pragma import(GdiFlush,'GdiFlush','gdi32.dll');

procedure GdiSetBatchLimit(
    _001            : in DWORD)
                      return DWORD;
#pragma convention(GdiSetBatchLimit,system);
#pragma import(GdiSetBatchLimit,'GdiSetBatchLimit','gdi32.dll');

procedure GdiGetBatchLimit
                      return DWORD;
#pragma convention(GdiGetBatchLimit,system);
#pragma import(GdiGetBatchLimit,'GdiGetBatchLimit','gdi32.dll');

const
  ICM_OFF           = 1;

const
  ICM_ON            = 2;

const
  ICM_QUERY         = 3;

const
  ICM_DONE_OUTSIDEDC= 4;

type
  t_454 = signed 32;

ICMENUMPROCA      = ^procedure (
    _001            : LPSTR;
    _002            : t_LPARAM)
                      return t_454 for machine_pointer use true;
type
  t_455 = signed 32;

ICMENUMPROCW      = ^procedure (
    _001            : LPWSTR;
    _002            : t_LPARAM)
                      return t_455 for machine_pointer use true;
#if #declared UNICODE; then;
#template ICMENUMPROC;
  ICMENUMPROCW 
#end ICMENUMPROC;
#else;
#template ICMENUMPROC;
  ICMENUMPROCA 
#end ICMENUMPROC;
#end if;

type
t_456=signed 32;

  t_457 = signed 32;

procedure SetICMMode(
    _001            : in t_HDC; 
    _002            : in t_456)
                      return t_457;
#pragma convention(SetICMMode,system);
#pragma import(SetICMMode,'SetICMMode','gdi32.dll');

procedure CheckColorsInGamut(
    _001            : in t_HDC; 
    _002            : in LPVOID; 
    _003            : out unchecked ; 
    _004            : in DWORD)
                      return BOOL;
#pragma convention(CheckColorsInGamut,system);
#pragma import(CheckColorsInGamut,'CheckColorsInGamut','gdi32.dll');

procedure GetColorSpace(
    _001            : in t_HDC)
                      return HCOLORSPACE;
#pragma convention(GetColorSpace,system);
#pragma import(GetColorSpace,'GetColorSpace','gdi32.dll');

procedure GetLogColorSpaceA(
    _001            : in HCOLORSPACE; 
    _002            : out tagLOGCOLORSPACEA; 
    _003            : in DWORD)
                      return BOOL;
#pragma convention(GetLogColorSpaceA,system);
#pragma import(GetLogColorSpaceA,'GetLogColorSpaceA','gdi32.dll');

procedure GetLogColorSpaceW(
    _001            : in HCOLORSPACE; 
    _002            : out tagLOGCOLORSPACEW; 
    _003            : in DWORD)
                      return BOOL;
#pragma convention(GetLogColorSpaceW,system);
#pragma import(GetLogColorSpaceW,'GetLogColorSpaceW','gdi32.dll');

#if #declared UNICODE; then;
#template GetLogColorSpace;
  GetLogColorSpaceW 
#end GetLogColorSpace;
#else;
#template GetLogColorSpace;
  GetLogColorSpaceA 
#end GetLogColorSpace;
#end if;

procedure CreateColorSpaceA(
    _001            : in LPLOGCOLORSPACEA)
                      return HCOLORSPACE;
#pragma convention(CreateColorSpaceA,system);
#pragma import(CreateColorSpaceA,'CreateColorSpaceA','gdi32.dll');

procedure CreateColorSpaceW(
    _001            : in LPLOGCOLORSPACEW)
                      return HCOLORSPACE;
#pragma convention(CreateColorSpaceW,system);
#pragma import(CreateColorSpaceW,'CreateColorSpaceW','gdi32.dll');

#if #declared UNICODE; then;
#template CreateColorSpace;
  CreateColorSpaceW 
#end CreateColorSpace;
#else;
#template CreateColorSpace;
  CreateColorSpaceA 
#end CreateColorSpace;
#end if;

procedure SetColorSpace(
    _001            : in t_HDC; 
    _002            : in HCOLORSPACE)
                      return HCOLORSPACE;
#pragma convention(SetColorSpace,system);
#pragma import(SetColorSpace,'SetColorSpace','gdi32.dll');

procedure DeleteColorSpace(
    _001            : in HCOLORSPACE)
                      return BOOL;
#pragma convention(DeleteColorSpace,system);
#pragma import(DeleteColorSpace,'DeleteColorSpace','gdi32.dll');

procedure GetICMProfileA(
    _001            : in t_HDC; 
    _002            : in out DWORD ; 
    _003            : out CHARSTR )
                      return BOOL;
#pragma convention(GetICMProfileA,system);
#pragma import(GetICMProfileA,'GetICMProfileA','gdi32.dll');

procedure GetICMProfileW(
    _001            : in t_HDC; 
    _002            : in out DWORD ; 
    _003            : out WCHARSTR )
                      return BOOL;
#pragma convention(GetICMProfileW,system);
#pragma import(GetICMProfileW,'GetICMProfileW','gdi32.dll');

#if #declared UNICODE; then;
#template GetICMProfile;
  GetICMProfileW 
#end GetICMProfile;
#else;
#template GetICMProfile;
  GetICMProfileA 
#end GetICMProfile;
#end if;

procedure SetICMProfileA(
    _001            : in t_HDC; 
    _002            : in LPSTR)
                      return BOOL;
#pragma convention(SetICMProfileA,system);
#pragma import(SetICMProfileA,'SetICMProfileA','gdi32.dll');

procedure SetICMProfileW(
    _001            : in t_HDC; 
    _002            : in LPWSTR)
                      return BOOL;
#pragma convention(SetICMProfileW,system);
#pragma import(SetICMProfileW,'SetICMProfileW','gdi32.dll');

#if #declared UNICODE; then;
#template SetICMProfile;
  SetICMProfileW 
#end SetICMProfile;
#else;
#template SetICMProfile;
  SetICMProfileA 
#end SetICMProfile;
#end if;

procedure GetDeviceGammaRamp(
    _001            : in t_HDC; 
    _002            : out unchecked )
                      return BOOL;
#pragma convention(GetDeviceGammaRamp,system);
#pragma import(GetDeviceGammaRamp,'GetDeviceGammaRamp','gdi32.dll');

procedure SetDeviceGammaRamp(
    _001            : in t_HDC; 
    _002            : in LPVOID)
                      return BOOL;
#pragma convention(SetDeviceGammaRamp,system);
#pragma import(SetDeviceGammaRamp,'SetDeviceGammaRamp','gdi32.dll');

procedure ColorMatchToTarget(
    _001            : in t_HDC; 
    _002            : in t_HDC; 
    _003            : in DWORD)
                      return BOOL;
#pragma convention(ColorMatchToTarget,system);
#pragma import(ColorMatchToTarget,'ColorMatchToTarget','gdi32.dll');

type
  t_458 = signed 32;

procedure EnumICMProfilesA(
    _001            : in t_HDC; 
    _002            : in ICMENUMPROCA; 
    _003            : in t_LPARAM)
                      return t_458;
#pragma convention(EnumICMProfilesA,system);
#pragma import(EnumICMProfilesA,'EnumICMProfilesA','gdi32.dll');

type
  t_459 = signed 32;

procedure EnumICMProfilesW(
    _001            : in t_HDC; 
    _002            : in ICMENUMPROCW; 
    _003            : in t_LPARAM)
                      return t_459;
#pragma convention(EnumICMProfilesW,system);
#pragma import(EnumICMProfilesW,'EnumICMProfilesW','gdi32.dll');

#if #declared UNICODE; then;
#template EnumICMProfiles;
  EnumICMProfilesW 
#end EnumICMProfiles;
#else;
#template EnumICMProfiles;
  EnumICMProfilesA 
#end EnumICMProfiles;
#end if;

procedure UpdateICMRegKeyA(
    _001            : in DWORD; 
    _002            : in LPSTR; 
    _003            : in LPSTR; 
    _004            : in UINT)
                      return BOOL;
#pragma convention(UpdateICMRegKeyA,system);
#pragma import(UpdateICMRegKeyA,'UpdateICMRegKeyA','gdi32.dll');

procedure UpdateICMRegKeyW(
    _001            : in DWORD; 
    _002            : in LPWSTR; 
    _003            : in LPWSTR; 
    _004            : in UINT)
                      return BOOL;
#pragma convention(UpdateICMRegKeyW,system);
#pragma import(UpdateICMRegKeyW,'UpdateICMRegKeyW','gdi32.dll');

#if #declared UNICODE; then;
#template UpdateICMRegKey;
  UpdateICMRegKeyW 
#end UpdateICMRegKey;
#else;
#template UpdateICMRegKey;
  UpdateICMRegKeyA 
#end UpdateICMRegKey;
#end if;

procedure ColorCorrectPalette(
    _001            : in t_HDC; 
    _002            : in HPALETTE; 
    _003            : in DWORD; 
    _004            : in DWORD)
                      return BOOL;
#pragma convention(ColorCorrectPalette,system);
#pragma import(ColorCorrectPalette,'ColorCorrectPalette','gdi32.dll');

--  Enhanced metafile constants.
const
  ENHMETA_SIGNATURE = $464D4520;

--  Stock object flag used in the object handle index in the enhanced
--  metafile records.
--  E.g. The object handle index (META_STOCK_OBJECT | BLACK_BRUSH)
--  represents the stock object BLACK_BRUSH.
const
  ENHMETA_STOCK_OBJECT= $80000000;

--  Enhanced metafile record types.
const
  EMR_HEADER        = 1;

const
  EMR_POLYBEZIER    = 2;

const
  EMR_POLYGON       = 3;

const
  EMR_POLYLINE      = 4;

const
  EMR_POLYBEZIERTO  = 5;

const
  EMR_POLYLINETO    = 6;

const
  EMR_POLYPOLYLINE  = 7;

const
  EMR_POLYPOLYGON   = 8;

const
  EMR_SETWINDOWEXTEX= 9;

const
  EMR_SETWINDOWORGEX= 10;

const
  EMR_SETVIEWPORTEXTEX= 11;

const
  EMR_SETVIEWPORTORGEX= 12;

const
  EMR_SETBRUSHORGEX = 13;

const
  EMR_EOF           = 14;

const
  EMR_SETPIXELV     = 15;

const
  EMR_SETMAPPERFLAGS= 16;

const
  EMR_SETMAPMODE    = 17;

const
  EMR_SETBKMODE     = 18;

const
  EMR_SETPOLYFILLMODE= 19;

const
  EMR_SETROP2       = 20;

const
  EMR_SETSTRETCHBLTMODE= 21;

const
  EMR_SETTEXTALIGN  = 22;

const
  EMR_SETCOLORADJUSTMENT= 23;

const
  EMR_SETTEXTCOLOR  = 24;

const
  EMR_SETBKCOLOR    = 25;

const
  EMR_OFFSETCLIPRGN = 26;

const
  EMR_MOVETOEX      = 27;

const
  EMR_SETMETARGN    = 28;

const
  EMR_EXCLUDECLIPRECT= 29;

const
  EMR_INTERSECTCLIPRECT= 30;

const
  EMR_SCALEVIEWPORTEXTEX= 31;

const
  EMR_SCALEWINDOWEXTEX= 32;

const
  EMR_SAVEDC        = 33;

const
  EMR_RESTOREDC     = 34;

const
  EMR_SETWORLDTRANSFORM= 35;

const
  EMR_MODIFYWORLDTRANSFORM= 36;

const
  EMR_SELECTOBJECT  = 37;

const
  EMR_CREATEPEN     = 38;

const
  EMR_CREATEBRUSHINDIRECT= 39;

const
  EMR_DELETEOBJECT  = 40;

const
  EMR_ANGLEARC      = 41;

const
  EMR_ELLIPSE       = 42;

const
  EMR_RECTANGLE     = 43;

const
  EMR_ROUNDRECT     = 44;

const
  EMR_ARC           = 45;

const
  EMR_CHORD         = 46;

const
  EMR_PIE           = 47;

const
  EMR_SELECTPALETTE = 48;

const
  EMR_CREATEPALETTE = 49;

const
  EMR_SETPALETTEENTRIES= 50;

const
  EMR_RESIZEPALETTE = 51;

const
  EMR_REALIZEPALETTE= 52;

const
  EMR_EXTFLOODFILL  = 53;

const
  EMR_LINETO        = 54;

const
  EMR_ARCTO         = 55;

const
  EMR_POLYDRAW      = 56;

const
  EMR_SETARCDIRECTION= 57;

const
  EMR_SETMITERLIMIT = 58;

const
  EMR_BEGINPATH     = 59;

const
  EMR_ENDPATH       = 60;

const
  EMR_CLOSEFIGURE   = 61;

const
  EMR_FILLPATH      = 62;

const
  EMR_STROKEANDFILLPATH= 63;

const
  EMR_STROKEPATH    = 64;

const
  EMR_FLATTENPATH   = 65;

const
  EMR_WIDENPATH     = 66;

const
  EMR_SELECTCLIPPATH= 67;

const
  EMR_ABORTPATH     = 68;

const
  EMR_GDICOMMENT    = 70;

const
  EMR_FILLRGN       = 71;

const
  EMR_FRAMERGN      = 72;

const
  EMR_INVERTRGN     = 73;

const
  EMR_PAINTRGN      = 74;

const
  EMR_EXTSELECTCLIPRGN= 75;

const
  EMR_BITBLT        = 76;

const
  EMR_STRETCHBLT    = 77;

const
  EMR_MASKBLT       = 78;

const
  EMR_PLGBLT        = 79;

const
  EMR_SETDIBITSTODEVICE= 80;

const
  EMR_STRETCHDIBITS = 81;

const
  EMR_EXTCREATEFONTINDIRECTW= 82;

const
  EMR_EXTTEXTOUTA   = 83;

const
  EMR_EXTTEXTOUTW   = 84;

const
  EMR_POLYBEZIER16  = 85;

const
  EMR_POLYGON16     = 86;

const
  EMR_POLYLINE16    = 87;

const
  EMR_POLYBEZIERTO16= 88;

const
  EMR_POLYLINETO16  = 89;

const
  EMR_POLYPOLYLINE16= 90;

const
  EMR_POLYPOLYGON16 = 91;

const
  EMR_POLYDRAW16    = 92;

const
  EMR_CREATEMONOBRUSH= 93;

const
  EMR_CREATEDIBPATTERNBRUSHPT= 94;

const
  EMR_EXTCREATEPEN  = 95;

const
  EMR_POLYTEXTOUTA  = 96;

const
  EMR_POLYTEXTOUTW  = 97;

const
  EMR_SETICMMODE    = 98;

const
  EMR_CREATECOLORSPACE= 99;

const
  EMR_SETCOLORSPACE = 100;

const
  EMR_DELETECOLORSPACE= 101;

const
  EMR_GLSRECORD     = 102;

const
  EMR_GLSBOUNDEDRECORD= 103;

const
  EMR_PIXELFORMAT   = 104;

const
  EMR_RESERVED_105  = 105;

const
  EMR_RESERVED_106  = 106;

const
  EMR_RESERVED_107  = 107;

const
  EMR_RESERVED_108  = 108;

const
  EMR_RESERVED_109  = 109;

const
  EMR_RESERVED_110  = 110;

const
  EMR_COLORCORRECTPALETTE= 111;

const
  EMR_SETICMPROFILEA= 112;

const
  EMR_SETICMPROFILEW= 113;

const
  EMR_ALPHABLEND    = 114;

const
  EMR_SETLAYOUT     = 115;

const
  EMR_TRANSPARENTBLT= 116;

const
  EMR_RESERVED_117  = 117;

const
  EMR_GRADIENTFILL  = 118;

const
  EMR_RESERVED_119  = 119;

const
  EMR_RESERVED_120  = 120;

const
  EMR_COLORMATCHTOTARGETW= 121;

const
  EMR_CREATECOLORSPACEW= 122;

const
  EMR_MIN           = 1;

const
  EMR_MAX           = 122;

--  Base record type for the enhanced metafile.
type
  tagEMR            = record
iType           : DWORD;
nSize           : DWORD;
  end record;
  t_EMR             = tagEMR;
  PEMR              = ^tagEMR;

--  Base text record type for the enhanced metafile.
type
  tagEMRTEXT        = record
ptlReference    : POINTL;
nChars          : DWORD;
offString       : DWORD;
fOptions        : DWORD;
rcl             : RECTL;
offDx           : DWORD;
  end record;
  t_EMRTEXT         = tagEMRTEXT;
  PEMRTEXT          = ^tagEMRTEXT;

--  Record structures for the enhanced metafile.
type
  tagABORTPATH      = record
emr             : t_EMR;
  end record;
  EMRABORTPATH      = tagABORTPATH;
  PEMRABORTPATH     = ^tagABORTPATH;
  EMRBEGINPATH      = tagABORTPATH;
  PEMRBEGINPATH     = ^tagABORTPATH;
  EMRENDPATH        = tagABORTPATH;
  PEMRENDPATH       = ^tagABORTPATH;
  EMRCLOSEFIGURE    = tagABORTPATH;
  PEMRCLOSEFIGURE   = ^tagABORTPATH;
  EMRFLATTENPATH    = tagABORTPATH;
  PEMRFLATTENPATH   = ^tagABORTPATH;
  EMRWIDENPATH      = tagABORTPATH;
  PEMRWIDENPATH     = ^tagABORTPATH;
  EMRSETMETARGN     = tagABORTPATH;
  PEMRSETMETARGN    = ^tagABORTPATH;
  EMRSAVEDC         = tagABORTPATH;
  PEMRSAVEDC        = ^tagABORTPATH;
  EMRREALIZEPALETTE = tagABORTPATH;
  PEMRREALIZEPALETTE = ^tagABORTPATH;

type
  tagEMRSELECTCLIPPATH = record
emr             : t_EMR;
iMode           : DWORD;
  end record;
  EMRSELECTCLIPPATH = tagEMRSELECTCLIPPATH;
  PEMRSELECTCLIPPATH = ^tagEMRSELECTCLIPPATH;
  EMRSETBKMODE      = tagEMRSELECTCLIPPATH;
  PEMRSETBKMODE     = ^tagEMRSELECTCLIPPATH;
  EMRSETMAPMODE     = tagEMRSELECTCLIPPATH;
  PEMRSETMAPMODE    = ^tagEMRSELECTCLIPPATH;
  EMRSETLAYOUT      = tagEMRSELECTCLIPPATH;
  PEMRSETLAYOUT     = ^tagEMRSELECTCLIPPATH;
  EMRSETPOLYFILLMODE = tagEMRSELECTCLIPPATH;
  PEMRSETPOLYFILLMODE = ^tagEMRSELECTCLIPPATH;
  EMRSETROP2        = tagEMRSELECTCLIPPATH;
  PEMRSETROP2       = ^tagEMRSELECTCLIPPATH;
  EMRSETSTRETCHBLTMODE = tagEMRSELECTCLIPPATH;
  PEMRSETSTRETCHBLTMODE = ^tagEMRSELECTCLIPPATH;
  EMRSETICMMODE     = tagEMRSELECTCLIPPATH;
  PEMRSETICMMODE    = ^tagEMRSELECTCLIPPATH;
  EMRSETTEXTALIGN   = tagEMRSELECTCLIPPATH;
  PEMRSETTEXTALIGN  = ^tagEMRSELECTCLIPPATH;

type
  tagEMRSETMITERLIMIT = record
emr             : t_EMR;
eMiterLimit     : t_FLOAT;
  end record;
  EMRSETMITERLIMIT  = tagEMRSETMITERLIMIT;
  PEMRSETMITERLIMIT = ^tagEMRSETMITERLIMIT;

type
  tagEMRRESTOREDC   = record
emr             : t_EMR;
iRelative       : LONG;
  end record;
  EMRRESTOREDC      = tagEMRRESTOREDC;
  PEMRRESTOREDC     = ^tagEMRRESTOREDC;

type
  tagEMRSETARCDIRECTION = record
emr             : t_EMR;
iArcDirection   : DWORD;
  end record;
  EMRSETARCDIRECTION = tagEMRSETARCDIRECTION;
  PEMRSETARCDIRECTION = ^tagEMRSETARCDIRECTION;

type
  tagEMRSETMAPPERFLAGS = record
emr             : t_EMR;
dwFlags         : DWORD;
  end record;
  EMRSETMAPPERFLAGS = tagEMRSETMAPPERFLAGS;
  PEMRSETMAPPERFLAGS = ^tagEMRSETMAPPERFLAGS;

type
  tagEMRSETTEXTCOLOR = record
emr             : t_EMR;
crColor         : COLORREF;
  end record;
  EMRSETBKCOLOR     = tagEMRSETTEXTCOLOR;
  PEMRSETBKCOLOR    = ^tagEMRSETTEXTCOLOR;
  EMRSETTEXTCOLOR   = tagEMRSETTEXTCOLOR;
  PEMRSETTEXTCOLOR  = ^tagEMRSETTEXTCOLOR;

type
  tagEMRSELECTOBJECT = record
emr             : t_EMR;
ihObject        : DWORD;
  end record;
  EMRSELECTOBJECT   = tagEMRSELECTOBJECT;
  PEMRSELECTOBJECT  = ^tagEMRSELECTOBJECT;
  EMRDELETEOBJECT   = tagEMRSELECTOBJECT;
  PEMRDELETEOBJECT  = ^tagEMRSELECTOBJECT;

type
  tagEMRSELECTPALETTE = record
emr             : t_EMR;
ihPal           : DWORD;
  end record;
  EMRSELECTPALETTE  = tagEMRSELECTPALETTE;
  PEMRSELECTPALETTE = ^tagEMRSELECTPALETTE;

type
  tagEMRRESIZEPALETTE = record
emr             : t_EMR;
ihPal           : DWORD;
cEntries        : DWORD;
  end record;
  EMRRESIZEPALETTE  = tagEMRRESIZEPALETTE;
  PEMRRESIZEPALETTE = ^tagEMRRESIZEPALETTE;

type
  tagEMRSETPALETTEENTRIES = record
emr             : t_EMR;
ihPal           : DWORD;
iStart          : DWORD;
cEntries        : DWORD;
aPalEntries     : array 0..0 of PALETTEENTRY;
  end record;
  EMRSETPALETTEENTRIES = tagEMRSETPALETTEENTRIES;
  PEMRSETPALETTEENTRIES = ^tagEMRSETPALETTEENTRIES;

type
  tagEMRSETCOLORADJUSTMENT = record
emr             : t_EMR;
ColorAdjustment : t_COLORADJUSTMENT;
  end record;
  EMRSETCOLORADJUSTMENT = tagEMRSETCOLORADJUSTMENT;
  PEMRSETCOLORADJUSTMENT = ^tagEMRSETCOLORADJUSTMENT;

type
  tagEMRGDICOMMENT  = record
emr             : t_EMR;
cbData          : DWORD;
Data            : array 0..0 of BYTE;
  end record;
  EMRGDICOMMENT     = tagEMRGDICOMMENT;
  PEMRGDICOMMENT    = ^tagEMRGDICOMMENT;

type
  tagEMREOF         = record
emr             : t_EMR;
nPalEntries     : DWORD;
offPalEntries   : DWORD;
nSizeLast       : DWORD;
  end record;
  EMREOF            = tagEMREOF;
  PEMREOF           = ^tagEMREOF;

type
  tagEMRLINETO      = record
emr             : t_EMR;
ptl             : POINTL;
  end record;
  EMRLINETO         = tagEMRLINETO;
  PEMRLINETO        = ^tagEMRLINETO;
  EMRMOVETOEX       = tagEMRLINETO;
  PEMRMOVETOEX      = ^tagEMRLINETO;

type
  tagEMROFFSETCLIPRGN = record
emr             : t_EMR;
ptlOffset       : POINTL;
  end record;
  EMROFFSETCLIPRGN  = tagEMROFFSETCLIPRGN;
  PEMROFFSETCLIPRGN = ^tagEMROFFSETCLIPRGN;

type
  tagEMRFILLPATH    = record
emr             : t_EMR;
rclBounds       : RECTL;
  end record;
  EMRFILLPATH       = tagEMRFILLPATH;
  PEMRFILLPATH      = ^tagEMRFILLPATH;
  EMRSTROKEANDFILLPATH = tagEMRFILLPATH;
  PEMRSTROKEANDFILLPATH = ^tagEMRFILLPATH;
  EMRSTROKEPATH     = tagEMRFILLPATH;
  PEMRSTROKEPATH    = ^tagEMRFILLPATH;

type
  tagEMREXCLUDECLIPRECT = record
emr             : t_EMR;
rclClip         : RECTL;
  end record;
  EMREXCLUDECLIPRECT = tagEMREXCLUDECLIPRECT;
  PEMREXCLUDECLIPRECT = ^tagEMREXCLUDECLIPRECT;
  EMRINTERSECTCLIPRECT = tagEMREXCLUDECLIPRECT;
  PEMRINTERSECTCLIPRECT = ^tagEMREXCLUDECLIPRECT;

type
  tagEMRSETVIEWPORTORGEX = record
emr             : t_EMR;
ptlOrigin       : POINTL;
  end record;
  EMRSETVIEWPORTORGEX = tagEMRSETVIEWPORTORGEX;
  PEMRSETVIEWPORTORGEX = ^tagEMRSETVIEWPORTORGEX;
  EMRSETWINDOWORGEX = tagEMRSETVIEWPORTORGEX;
  PEMRSETWINDOWORGEX = ^tagEMRSETVIEWPORTORGEX;
  EMRSETBRUSHORGEX  = tagEMRSETVIEWPORTORGEX;
  PEMRSETBRUSHORGEX = ^tagEMRSETVIEWPORTORGEX;

type
  tagEMRSETVIEWPORTEXTEX = record
emr             : t_EMR;
szlExtent       : SIZEL;
  end record;
  EMRSETVIEWPORTEXTEX = tagEMRSETVIEWPORTEXTEX;
  PEMRSETVIEWPORTEXTEX = ^tagEMRSETVIEWPORTEXTEX;
  EMRSETWINDOWEXTEX = tagEMRSETVIEWPORTEXTEX;
  PEMRSETWINDOWEXTEX = ^tagEMRSETVIEWPORTEXTEX;

type
  tagEMRSCALEVIEWPORTEXTEX = record
emr             : t_EMR;
xNum            : LONG;
xDenom          : LONG;
yNum            : LONG;
yDenom          : LONG;
  end record;
  EMRSCALEVIEWPORTEXTEX = tagEMRSCALEVIEWPORTEXTEX;
  PEMRSCALEVIEWPORTEXTEX = ^tagEMRSCALEVIEWPORTEXTEX;
  EMRSCALEWINDOWEXTEX = tagEMRSCALEVIEWPORTEXTEX;
  PEMRSCALEWINDOWEXTEX = ^tagEMRSCALEVIEWPORTEXTEX;

type
  tagEMRSETWORLDTRANSFORM = record
emr             : t_EMR;
xform           : t_XFORM;
  end record;
  EMRSETWORLDTRANSFORM = tagEMRSETWORLDTRANSFORM;
  PEMRSETWORLDTRANSFORM = ^tagEMRSETWORLDTRANSFORM;

type
  tagEMRMODIFYWORLDTRANSFORM = record
emr             : t_EMR;
xform           : t_XFORM;
iMode           : DWORD;
  end record;
  EMRMODIFYWORLDTRANSFORM = tagEMRMODIFYWORLDTRANSFORM;
  PEMRMODIFYWORLDTRANSFORM = ^tagEMRMODIFYWORLDTRANSFORM;

type
  tagEMRSETPIXELV   = record
emr             : t_EMR;
ptlPixel        : POINTL;
crColor         : COLORREF;
  end record;
  EMRSETPIXELV      = tagEMRSETPIXELV;
  PEMRSETPIXELV     = ^tagEMRSETPIXELV;

type
  tagEMREXTFLOODFILL = record
emr             : t_EMR;
ptlStart        : POINTL;
crColor         : COLORREF;
iMode           : DWORD;
  end record;
  EMREXTFLOODFILL   = tagEMREXTFLOODFILL;
  PEMREXTFLOODFILL  = ^tagEMREXTFLOODFILL;

type
  tagEMRELLIPSE     = record
emr             : t_EMR;
rclBox          : RECTL;
  end record;
  EMRELLIPSE        = tagEMRELLIPSE;
  PEMRELLIPSE       = ^tagEMRELLIPSE;
  EMRRECTANGLE      = tagEMRELLIPSE;
  PEMRRECTANGLE     = ^tagEMRELLIPSE;

type
  tagEMRROUNDRECT   = record
emr             : t_EMR;
rclBox          : RECTL;
szlCorner       : SIZEL;
  end record;
  EMRROUNDRECT      = tagEMRROUNDRECT;
  PEMRROUNDRECT     = ^tagEMRROUNDRECT;

type
  tagEMRARC         = record
emr             : t_EMR;
rclBox          : RECTL;
ptlStart        : POINTL;
ptlEnd          : POINTL;
  end record;
  EMRARC            = tagEMRARC;
  PEMRARC           = ^tagEMRARC;
  EMRARCTO          = tagEMRARC;
  PEMRARCTO         = ^tagEMRARC;
  EMRCHORD          = tagEMRARC;
  PEMRCHORD         = ^tagEMRARC;
  EMRPIE            = tagEMRARC;
  PEMRPIE           = ^tagEMRARC;

type
  tagEMRANGLEARC    = record
emr             : t_EMR;
ptlCenter       : POINTL;
nRadius         : DWORD;
eStartAngle     : t_FLOAT;
eSweepAngle     : t_FLOAT;
  end record;
  EMRANGLEARC       = tagEMRANGLEARC;
  PEMRANGLEARC      = ^tagEMRANGLEARC;

type
  tagEMRPOLYLINE    = record
emr             : t_EMR;
rclBounds       : RECTL;
cptl            : DWORD;
aptl            : array 0..0 of POINTL;
  end record;
  EMRPOLYLINE       = tagEMRPOLYLINE;
  PEMRPOLYLINE      = ^tagEMRPOLYLINE;
  EMRPOLYBEZIER     = tagEMRPOLYLINE;
  PEMRPOLYBEZIER    = ^tagEMRPOLYLINE;
  EMRPOLYGON        = tagEMRPOLYLINE;
  PEMRPOLYGON       = ^tagEMRPOLYLINE;
  EMRPOLYBEZIERTO   = tagEMRPOLYLINE;
  PEMRPOLYBEZIERTO  = ^tagEMRPOLYLINE;
  EMRPOLYLINETO     = tagEMRPOLYLINE;
  PEMRPOLYLINETO    = ^tagEMRPOLYLINE;

type
  tagEMRPOLYLINE16  = record
emr             : t_EMR;
rclBounds       : RECTL;
cpts            : DWORD;
apts            : array 0..0 of POINTS;
  end record;
  EMRPOLYLINE16     = tagEMRPOLYLINE16;
  PEMRPOLYLINE16    = ^tagEMRPOLYLINE16;
  EMRPOLYBEZIER16   = tagEMRPOLYLINE16;
  PEMRPOLYBEZIER16  = ^tagEMRPOLYLINE16;
  EMRPOLYGON16      = tagEMRPOLYLINE16;
  PEMRPOLYGON16     = ^tagEMRPOLYLINE16;
  EMRPOLYBEZIERTO16 = tagEMRPOLYLINE16;
  PEMRPOLYBEZIERTO16 = ^tagEMRPOLYLINE16;
  EMRPOLYLINETO16   = tagEMRPOLYLINE16;
  PEMRPOLYLINETO16  = ^tagEMRPOLYLINE16;

type
  tagEMRPOLYDRAW    = record
emr             : t_EMR;
rclBounds       : RECTL;
cptl            : DWORD;
aptl            : array 0..0 of POINTL;
abTypes         : array 0..0 of BYTE;
  end record;
  EMRPOLYDRAW       = tagEMRPOLYDRAW;
  PEMRPOLYDRAW      = ^tagEMRPOLYDRAW;

type
  tagEMRPOLYDRAW16  = record
emr             : t_EMR;
rclBounds       : RECTL;
cpts            : DWORD;
apts            : array 0..0 of POINTS;
abTypes         : array 0..0 of BYTE;
  end record;
  EMRPOLYDRAW16     = tagEMRPOLYDRAW16;
  PEMRPOLYDRAW16    = ^tagEMRPOLYDRAW16;

type
  tagEMRPOLYPOLYLINE = record
emr             : t_EMR;
rclBounds       : RECTL;
nPolys          : DWORD;
cptl            : DWORD;
aPolyCounts     : array 0..0 of DWORD;
aptl            : array 0..0 of POINTL;
  end record;
  EMRPOLYPOLYLINE   = tagEMRPOLYPOLYLINE;
  PEMRPOLYPOLYLINE  = ^tagEMRPOLYPOLYLINE;
  EMRPOLYPOLYGON    = tagEMRPOLYPOLYLINE;
  PEMRPOLYPOLYGON   = ^tagEMRPOLYPOLYLINE;

type
  tagEMRPOLYPOLYLINE16 = record
emr             : t_EMR;
rclBounds       : RECTL;
nPolys          : DWORD;
cpts            : DWORD;
aPolyCounts     : array 0..0 of DWORD;
apts            : array 0..0 of POINTS;
  end record;
  EMRPOLYPOLYLINE16 = tagEMRPOLYPOLYLINE16;
  PEMRPOLYPOLYLINE16 = ^tagEMRPOLYPOLYLINE16;
  EMRPOLYPOLYGON16  = tagEMRPOLYPOLYLINE16;
  PEMRPOLYPOLYGON16 = ^tagEMRPOLYPOLYLINE16;

type
  tagEMRINVERTRGN   = record
emr             : t_EMR;
rclBounds       : RECTL;
cbRgnData       : DWORD;
RgnData         : array 0..0 of BYTE;
  end record;
  EMRINVERTRGN      = tagEMRINVERTRGN;
  PEMRINVERTRGN     = ^tagEMRINVERTRGN;
  EMRPAINTRGN       = tagEMRINVERTRGN;
  PEMRPAINTRGN      = ^tagEMRINVERTRGN;

type
  tagEMRFILLRGN     = record
emr             : t_EMR;
rclBounds       : RECTL;
cbRgnData       : DWORD;
ihBrush         : DWORD;
RgnData         : array 0..0 of BYTE;
  end record;
  EMRFILLRGN        = tagEMRFILLRGN;
  PEMRFILLRGN       = ^tagEMRFILLRGN;

type
  tagEMRFRAMERGN    = record
emr             : t_EMR;
rclBounds       : RECTL;
cbRgnData       : DWORD;
ihBrush         : DWORD;
szlStroke       : SIZEL;
RgnData         : array 0..0 of BYTE;
  end record;
  EMRFRAMERGN       = tagEMRFRAMERGN;
  PEMRFRAMERGN      = ^tagEMRFRAMERGN;

type
  tagEMREXTSELECTCLIPRGN = record
emr             : t_EMR;
cbRgnData       : DWORD;
iMode           : DWORD;
RgnData         : array 0..0 of BYTE;
  end record;
  EMREXTSELECTCLIPRGN = tagEMREXTSELECTCLIPRGN;
  PEMREXTSELECTCLIPRGN = ^tagEMREXTSELECTCLIPRGN;

type
  tagEMREXTTEXTOUTA = record
emr             : t_EMR;
rclBounds       : RECTL;
iGraphicsMode   : DWORD;
exScale         : t_FLOAT;
eyScale         : t_FLOAT;
emrtext         : t_EMRTEXT;
  end record;
  EMREXTTEXTOUTA    = tagEMREXTTEXTOUTA;
  PEMREXTTEXTOUTA   = ^tagEMREXTTEXTOUTA;
  EMREXTTEXTOUTW    = tagEMREXTTEXTOUTA;
  PEMREXTTEXTOUTW   = ^tagEMREXTTEXTOUTA;

type
  tagEMRPOLYTEXTOUTA = record
emr             : t_EMR;
rclBounds       : RECTL;
iGraphicsMode   : DWORD;
exScale         : t_FLOAT;
eyScale         : t_FLOAT;
cStrings        : LONG;
aemrtext        : array 0..0 of t_EMRTEXT;
  end record;
  EMRPOLYTEXTOUTA   = tagEMRPOLYTEXTOUTA;
  PEMRPOLYTEXTOUTA  = ^tagEMRPOLYTEXTOUTA;
  EMRPOLYTEXTOUTW   = tagEMRPOLYTEXTOUTA;
  PEMRPOLYTEXTOUTW  = ^tagEMRPOLYTEXTOUTA;

type
  tagEMRBITBLT      = record
emr             : t_EMR;
rclBounds       : RECTL;
xDest           : LONG;
yDest           : LONG;
cxDest          : LONG;
cyDest          : LONG;
dwRop           : DWORD;
xSrc            : LONG;
ySrc            : LONG;
xformSrc        : t_XFORM;
crBkColorSrc    : COLORREF;
iUsageSrc       : DWORD;
offBmiSrc       : DWORD;
cbBmiSrc        : DWORD;
offBitsSrc      : DWORD;
cbBitsSrc       : DWORD;
  end record;
  EMRBITBLT         = tagEMRBITBLT;
  PEMRBITBLT        = ^tagEMRBITBLT;

type
  tagEMRSTRETCHBLT  = record
emr             : t_EMR;
rclBounds       : RECTL;
xDest           : LONG;
yDest           : LONG;
cxDest          : LONG;
cyDest          : LONG;
dwRop           : DWORD;
xSrc            : LONG;
ySrc            : LONG;
xformSrc        : t_XFORM;
crBkColorSrc    : COLORREF;
iUsageSrc       : DWORD;
offBmiSrc       : DWORD;
cbBmiSrc        : DWORD;
offBitsSrc      : DWORD;
cbBitsSrc       : DWORD;
cxSrc           : LONG;
cySrc           : LONG;
  end record;
  EMRSTRETCHBLT     = tagEMRSTRETCHBLT;
  PEMRSTRETCHBLT    = ^tagEMRSTRETCHBLT;

type
  tagEMRMASKBLT     = record
emr             : t_EMR;
rclBounds       : RECTL;
xDest           : LONG;
yDest           : LONG;
cxDest          : LONG;
cyDest          : LONG;
dwRop           : DWORD;
xSrc            : LONG;
ySrc            : LONG;
xformSrc        : t_XFORM;
crBkColorSrc    : COLORREF;
iUsageSrc       : DWORD;
offBmiSrc       : DWORD;
cbBmiSrc        : DWORD;
offBitsSrc      : DWORD;
cbBitsSrc       : DWORD;
xMask           : LONG;
yMask           : LONG;
iUsageMask      : DWORD;
offBmiMask      : DWORD;
cbBmiMask       : DWORD;
offBitsMask     : DWORD;
cbBitsMask      : DWORD;
  end record;
  EMRMASKBLT        = tagEMRMASKBLT;
  PEMRMASKBLT       = ^tagEMRMASKBLT;

type
  tagEMRPLGBLT      = record
emr             : t_EMR;
rclBounds       : RECTL;
aptlDest        : array 0..2 of POINTL;
xSrc            : LONG;
ySrc            : LONG;
cxSrc           : LONG;
cySrc           : LONG;
xformSrc        : t_XFORM;
crBkColorSrc    : COLORREF;
iUsageSrc       : DWORD;
offBmiSrc       : DWORD;
cbBmiSrc        : DWORD;
offBitsSrc      : DWORD;
cbBitsSrc       : DWORD;
xMask           : LONG;
yMask           : LONG;
iUsageMask      : DWORD;
offBmiMask      : DWORD;
cbBmiMask       : DWORD;
offBitsMask     : DWORD;
cbBitsMask      : DWORD;
  end record;
  EMRPLGBLT         = tagEMRPLGBLT;
  PEMRPLGBLT        = ^tagEMRPLGBLT;

type
  tagEMRSETDIBITSTODEVICE = record
emr             : t_EMR;
rclBounds       : RECTL;
xDest           : LONG;
yDest           : LONG;
xSrc            : LONG;
ySrc            : LONG;
cxSrc           : LONG;
cySrc           : LONG;
offBmiSrc       : DWORD;
cbBmiSrc        : DWORD;
offBitsSrc      : DWORD;
cbBitsSrc       : DWORD;
iUsageSrc       : DWORD;
iStartScan      : DWORD;
cScans          : DWORD;
  end record;
  EMRSETDIBITSTODEVICE = tagEMRSETDIBITSTODEVICE;
  PEMRSETDIBITSTODEVICE = ^tagEMRSETDIBITSTODEVICE;

type
  tagEMRSTRETCHDIBITS = record
emr             : t_EMR;
rclBounds       : RECTL;
xDest           : LONG;
yDest           : LONG;
xSrc            : LONG;
ySrc            : LONG;
cxSrc           : LONG;
cySrc           : LONG;
offBmiSrc       : DWORD;
cbBmiSrc        : DWORD;
offBitsSrc      : DWORD;
cbBitsSrc       : DWORD;
iUsageSrc       : DWORD;
dwRop           : DWORD;
cxDest          : LONG;
cyDest          : LONG;
  end record;
  EMRSTRETCHDIBITS  = tagEMRSTRETCHDIBITS;
  PEMRSTRETCHDIBITS = ^tagEMRSTRETCHDIBITS;

type
  tagEMREXTCREATEFONTINDIRECTW = record
emr             : t_EMR;
ihFont          : DWORD;
elfw            : EXTLOGFONTW;
  end record;
  EMREXTCREATEFONTINDIRECTW = tagEMREXTCREATEFONTINDIRECTW;
  PEMREXTCREATEFONTINDIRECTW = ^tagEMREXTCREATEFONTINDIRECTW;

type
  tagEMRCREATEPALETTE = record
emr             : t_EMR;
ihPal           : DWORD;
lgpl            : LOGPALETTE;
  end record;
  EMRCREATEPALETTE  = tagEMRCREATEPALETTE;
  PEMRCREATEPALETTE = ^tagEMRCREATEPALETTE;

type
  tagEMRCREATEPEN   = record
emr             : t_EMR;
ihPen           : DWORD;
lopn            : LOGPEN;
  end record;
  EMRCREATEPEN      = tagEMRCREATEPEN;
  PEMRCREATEPEN     = ^tagEMRCREATEPEN;

type
  tagEMREXTCREATEPEN = record
emr             : t_EMR;
ihPen           : DWORD;
offBmi          : DWORD;
cbBmi           : DWORD;
offBits         : DWORD;
cbBits          : DWORD;
elp             : EXTLOGPEN;
  end record;
  EMREXTCREATEPEN   = tagEMREXTCREATEPEN;
  PEMREXTCREATEPEN  = ^tagEMREXTCREATEPEN;

type
  tagEMRCREATEBRUSHINDIRECT = record
emr             : t_EMR;
ihBrush         : DWORD;
lb              : LOGBRUSH32;
  end record;
  EMRCREATEBRUSHINDIRECT = tagEMRCREATEBRUSHINDIRECT;
  PEMRCREATEBRUSHINDIRECT = ^tagEMRCREATEBRUSHINDIRECT;

type
  tagEMRCREATEMONOBRUSH = record
emr             : t_EMR;
ihBrush         : DWORD;
iUsage          : DWORD;
offBmi          : DWORD;
cbBmi           : DWORD;
offBits         : DWORD;
cbBits          : DWORD;
  end record;
  EMRCREATEMONOBRUSH = tagEMRCREATEMONOBRUSH;
  PEMRCREATEMONOBRUSH = ^tagEMRCREATEMONOBRUSH;

type
  tagEMRCREATEDIBPATTERNBRUSHPT = record
emr             : t_EMR;
ihBrush         : DWORD;
iUsage          : DWORD;
offBmi          : DWORD;
cbBmi           : DWORD;
offBits         : DWORD;
cbBits          : DWORD;
  end record;
  EMRCREATEDIBPATTERNBRUSHPT = tagEMRCREATEDIBPATTERNBRUSHPT;
  PEMRCREATEDIBPATTERNBRUSHPT = ^tagEMRCREATEDIBPATTERNBRUSHPT;

type
  tagEMRFORMAT      = record
dSignature      : DWORD;
nVersion        : DWORD;
cbData          : DWORD;
offData         : DWORD;
  end record;
  EMRFORMAT         = tagEMRFORMAT;
  PEMRFORMAT        = ^tagEMRFORMAT;

type
  tagEMRGLSRECORD   = record
emr             : t_EMR;
cbData          : DWORD;
Data            : array 0..0 of BYTE;
  end record;
  EMRGLSRECORD      = tagEMRGLSRECORD;
  PEMRGLSRECORD     = ^tagEMRGLSRECORD;

type
  tagEMRGLSBOUNDEDRECORD = record
emr             : t_EMR;
rclBounds       : RECTL;
cbData          : DWORD;
Data            : array 0..0 of BYTE;
  end record;
  EMRGLSBOUNDEDRECORD = tagEMRGLSBOUNDEDRECORD;
  PEMRGLSBOUNDEDRECORD = ^tagEMRGLSBOUNDEDRECORD;

type
  tagEMRPIXELFORMAT = record
emr             : t_EMR;
pfd             : PIXELFORMATDESCRIPTOR;
  end record;
  EMRPIXELFORMAT    = tagEMRPIXELFORMAT;
  PEMRPIXELFORMAT   = ^tagEMRPIXELFORMAT;

type
  tagEMRCREATECOLORSPACE = record
emr             : t_EMR;
ihCS            : DWORD;
lcs             : LOGCOLORSPACEA;
  end record;
  EMRCREATECOLORSPACE = tagEMRCREATECOLORSPACE;
  PEMRCREATECOLORSPACE = ^tagEMRCREATECOLORSPACE;

type
  tagEMRSETCOLORSPACE = record
emr             : t_EMR;
ihCS            : DWORD;
  end record;
  EMRSETCOLORSPACE  = tagEMRSETCOLORSPACE;
  PEMRSETCOLORSPACE = ^tagEMRSETCOLORSPACE;
  EMRSELECTCOLORSPACE = tagEMRSETCOLORSPACE;
  PEMRSELECTCOLORSPACE = ^tagEMRSETCOLORSPACE;
  EMRDELETECOLORSPACE = tagEMRSETCOLORSPACE;
  PEMRDELETECOLORSPACE = ^tagEMRSETCOLORSPACE;

type
  tagEMREXTESCAPE   = record
emr             : t_EMR;
iEscape         : INT;
cbEscData       : INT;
EscData         : array 0..0 of BYTE;
  end record;
  EMREXTESCAPE      = tagEMREXTESCAPE;
  PEMREXTESCAPE     = ^tagEMREXTESCAPE;
  EMRDRAWESCAPE     = tagEMREXTESCAPE;
  PEMRDRAWESCAPE    = ^tagEMREXTESCAPE;

type
  tagEMRNAMEDESCAPE = record
emr             : t_EMR;
iEscape         : INT;
cbDriver        : INT;
cbEscData       : INT;
EscData         : array 0..0 of BYTE;
  end record;
  EMRNAMEDESCAPE    = tagEMRNAMEDESCAPE;
  PEMRNAMEDESCAPE   = ^tagEMRNAMEDESCAPE;

const
  SETICMPROFILE_EMBEDED= $01;

type
  tagEMRSETICMPROFILE = record
emr             : t_EMR;
dwFlags         : DWORD;
cbName          : DWORD;
cbData          : DWORD;
Data            : array 0..0 of BYTE;
  end record;
  EMRSETICMPROFILE  = tagEMRSETICMPROFILE;
  PEMRSETICMPROFILE = ^tagEMRSETICMPROFILE;
  EMRSETICMPROFILEA = tagEMRSETICMPROFILE;
  PEMRSETICMPROFILEA = ^tagEMRSETICMPROFILE;
  EMRSETICMPROFILEW = tagEMRSETICMPROFILE;
  PEMRSETICMPROFILEW = ^tagEMRSETICMPROFILE;

const
  CREATECOLORSPACE_EMBEDED= $01;

type
  tagEMRCREATECOLORSPACEW = record
emr             : t_EMR;
ihCS            : DWORD;
lcs             : LOGCOLORSPACEW;
dwFlags         : DWORD;
cbData          : DWORD;
Data            : array 0..0 of BYTE;
  end record;
  EMRCREATECOLORSPACEW = tagEMRCREATECOLORSPACEW;
  PEMRCREATECOLORSPACEW = ^tagEMRCREATECOLORSPACEW;

const
  COLORMATCHTOTARGET_EMBEDED= $01;

type
  tagCOLORMATCHTOTARGET = record
emr             : t_EMR;
dwAction        : DWORD;
dwFlags         : DWORD;
cbName          : DWORD;
cbData          : DWORD;
Data            : array 0..0 of BYTE;
  end record;
  EMRCOLORMATCHTOTARGET = tagCOLORMATCHTOTARGET;
  PEMRCOLORMATCHTOTARGET = ^tagCOLORMATCHTOTARGET;

type
  tagCOLORCORRECTPALETTE = record
emr             : t_EMR;
ihPalette       : DWORD;
nFirstEntry     : DWORD;
nPalEntries     : DWORD;
nReserved       : DWORD;
  end record;
  EMRCOLORCORRECTPALETTE = tagCOLORCORRECTPALETTE;
  PEMRCOLORCORRECTPALETTE = ^tagCOLORCORRECTPALETTE;

type
  tagEMRALPHABLEND  = record
emr             : t_EMR;
rclBounds       : RECTL;
xDest           : LONG;
yDest           : LONG;
cxDest          : LONG;
cyDest          : LONG;
dwRop           : DWORD;
xSrc            : LONG;
ySrc            : LONG;
xformSrc        : t_XFORM;
crBkColorSrc    : COLORREF;
iUsageSrc       : DWORD;
offBmiSrc       : DWORD;
cbBmiSrc        : DWORD;
offBitsSrc      : DWORD;
cbBitsSrc       : DWORD;
cxSrc           : LONG;
cySrc           : LONG;
  end record;
  EMRALPHABLEND     = tagEMRALPHABLEND;
  PEMRALPHABLEND    = ^tagEMRALPHABLEND;

type
  tagEMRGRADIENTFILL = record
emr             : t_EMR;
rclBounds       : RECTL;
nVer            : DWORD;
nTri            : DWORD;
ulMode          : ULONG;
Ver             : array 0..0 of TRIVERTEX;
  end record;
  EMRGRADIENTFILL   = tagEMRGRADIENTFILL;
  PEMRGRADIENTFILL  = ^tagEMRGRADIENTFILL;

type
  tagEMRTRANSPARENTBLT = record
emr             : t_EMR;
rclBounds       : RECTL;
xDest           : LONG;
yDest           : LONG;
cxDest          : LONG;
cyDest          : LONG;
dwRop           : DWORD;
xSrc            : LONG;
ySrc            : LONG;
xformSrc        : t_XFORM;
crBkColorSrc    : COLORREF;
iUsageSrc       : DWORD;
offBmiSrc       : DWORD;
cbBmiSrc        : DWORD;
offBitsSrc      : DWORD;
cbBitsSrc       : DWORD;
cxSrc           : LONG;
cySrc           : LONG;
  end record;
  EMRTRANSPARENTBLT = tagEMRTRANSPARENTBLT;
  PEMRTRANSPARENTBLT = ^tagEMRTRANSPARENTBLT;

const
  GDICOMMENT_IDENTIFIER= $43494447;

const
  GDICOMMENT_WINDOWS_METAFILE= $80000001;

const
  GDICOMMENT_BEGINGROUP= $02;

const
  GDICOMMENT_ENDGROUP= $03;

const
  GDICOMMENT_MULTIFORMATS= $40000004;

const
  EPS_SIGNATURE     = $46535045;

const
  GDICOMMENT_UNICODE_STRING= $40;

const
  GDICOMMENT_UNICODE_END= $80;

--  OpenGL wgl prototypes
procedure wglCopyContext(
    _001            : HGLRC; 
    _002            : HGLRC; 
    _003            : UINT)
                      return BOOL;
#pragma convention(wglCopyContext,system);
#pragma import(wglCopyContext,'wglCopyContext','opengl32.dll');

procedure wglCreateContext(
    _001            : t_HDC)
                      return HGLRC;
#pragma convention(wglCreateContext,system);
#pragma import(wglCreateContext,'wglCreateContext','opengl32.dll');

type
t_460=signed 32;

procedure wglCreateLayerContext(
    _001            : t_HDC; 
    _002            : t_460)
                      return HGLRC;
#pragma convention(wglCreateLayerContext,system);
#pragma import(wglCreateLayerContext,'wglCreateLayerContext','opengl32.dll');

procedure wglDeleteContext(
    _001            : HGLRC)
                      return BOOL;
#pragma convention(wglDeleteContext,system);
#pragma import(wglDeleteContext,'wglDeleteContext','opengl32.dll');

procedure wglGetCurrentContext
                      return HGLRC;
#pragma convention(wglGetCurrentContext,system);
#pragma import(wglGetCurrentContext,'wglGetCurrentContext','opengl32.dll');

procedure wglGetCurrentDC
                      return t_HDC;
#pragma convention(wglGetCurrentDC,system);
#pragma import(wglGetCurrentDC,'wglGetCurrentDC','opengl32.dll');

procedure wglGetProcAddress(
    _001            : LPCSTR)
                      return PROC;
#pragma convention(wglGetProcAddress,system);
#pragma import(wglGetProcAddress,'wglGetProcAddress','opengl32.dll');

procedure wglMakeCurrent(
    _001            : t_HDC; 
    _002            : HGLRC)
                      return BOOL;
#pragma convention(wglMakeCurrent,system);
#pragma import(wglMakeCurrent,'wglMakeCurrent','opengl32.dll');

procedure wglShareLists(
    _001            : HGLRC; 
    _002            : HGLRC)
                      return BOOL;
#pragma convention(wglShareLists,system);
#pragma import(wglShareLists,'wglShareLists','opengl32.dll');

procedure wglUseFontBitmapsA(
    _001            : t_HDC; 
    _002            : DWORD; 
    _003            : DWORD; 
    _004            : DWORD)
                      return BOOL;
#pragma convention(wglUseFontBitmapsA,system);
#pragma import(wglUseFontBitmapsA,'wglUseFontBitmapsA','opengl32.dll');

procedure wglUseFontBitmapsW(
    _001            : t_HDC; 
    _002            : DWORD; 
    _003            : DWORD; 
    _004            : DWORD)
                      return BOOL;
#pragma convention(wglUseFontBitmapsW,system);
#pragma import(wglUseFontBitmapsW,'wglUseFontBitmapsW','opengl32.dll');

#if #declared UNICODE; then;
#template wglUseFontBitmaps;
  wglUseFontBitmapsW 
#end wglUseFontBitmaps;
#else;
#template wglUseFontBitmaps;
  wglUseFontBitmapsA 
#end wglUseFontBitmaps;
#end if;

procedure SwapBuffers(
    _001            : t_HDC)
                      return BOOL;
#pragma convention(SwapBuffers,system);
#pragma import(SwapBuffers,'SwapBuffers','gdi32.dll');

type
  _POINTFLOAT       = record
x               : t_FLOAT;
y               : t_FLOAT;
  end record;
  POINTFLOAT        = _POINTFLOAT;
  PPOINTFLOAT       = ^_POINTFLOAT;

type
  _GLYPHMETRICSFLOAT = record
gmfBlackBoxX    : t_FLOAT;
gmfBlackBoxY    : t_FLOAT;
gmfptGlyphOrigin : POINTFLOAT;
gmfCellIncX     : t_FLOAT;
gmfCellIncY     : t_FLOAT;
  end record;
  GLYPHMETRICSFLOAT = _GLYPHMETRICSFLOAT;
  PGLYPHMETRICSFLOAT = ^_GLYPHMETRICSFLOAT;
  LPGLYPHMETRICSFLOAT = ^_GLYPHMETRICSFLOAT;

const
  WGL_FONT_LINES    = 0;

const
  WGL_FONT_POLYGONS = 1;

type
t_461=signed 32;

procedure wglUseFontOutlinesA(
    _001            : t_HDC; 
    _002            : DWORD; 
    _003            : DWORD; 
    _004            : DWORD; 
    _005            : t_FLOAT; 
    _006            : t_FLOAT; 
    _007            : t_461; 
    _008            : LPGLYPHMETRICSFLOAT)
                      return BOOL;
#pragma convention(wglUseFontOutlinesA,system);
#pragma import(wglUseFontOutlinesA,'wglUseFontOutlinesA','opengl32.dll');

type
t_462=signed 32;

procedure wglUseFontOutlinesW(
    _001            : t_HDC; 
    _002            : DWORD; 
    _003            : DWORD; 
    _004            : DWORD; 
    _005            : t_FLOAT; 
    _006            : t_FLOAT; 
    _007            : t_462; 
    _008            : LPGLYPHMETRICSFLOAT)
                      return BOOL;
#pragma convention(wglUseFontOutlinesW,system);
#pragma import(wglUseFontOutlinesW,'wglUseFontOutlinesW','opengl32.dll');

#if #declared UNICODE; then;
#template wglUseFontOutlines;
  wglUseFontOutlinesW 
#end wglUseFontOutlines;
#else;
#template wglUseFontOutlines;
  wglUseFontOutlinesA 
#end wglUseFontOutlines;
#end if;

-- /* Layer plane descriptor 
type
  tagLAYERPLANEDESCRIPTOR = record
nSize           : WORD;
nVersion        : WORD;
dwFlags         : DWORD;
iPixelType      : BYTE;
cColorBits      : BYTE;
cRedBits        : BYTE;
cRedShift       : BYTE;
cGreenBits      : BYTE;
cGreenShift     : BYTE;
cBlueBits       : BYTE;
cBlueShift      : BYTE;
cAlphaBits      : BYTE;
cAlphaShift     : BYTE;
cAccumBits      : BYTE;
cAccumRedBits   : BYTE;
cAccumGreenBits : BYTE;
cAccumBlueBits  : BYTE;
cAccumAlphaBits : BYTE;
cDepthBits      : BYTE;
cStencilBits    : BYTE;
cAuxBuffers     : BYTE;
iLayerPlane     : BYTE;
bReserved       : BYTE;
crTransparent   : COLORREF;
  end record;
  LAYERPLANEDESCRIPTOR = tagLAYERPLANEDESCRIPTOR;
  PLAYERPLANEDESCRIPTOR = ^tagLAYERPLANEDESCRIPTOR;
  LPLAYERPLANEDESCRIPTOR = ^tagLAYERPLANEDESCRIPTOR;

-- /* LAYERPLANEDESCRIPTOR flags 
const
  LPD_DOUBLEBUFFER  = $01;

const
  LPD_STEREO        = $02;

const
  LPD_SUPPORT_GDI   = $10;

const
  LPD_SUPPORT_OPENGL= $20;

const
  LPD_SHARE_DEPTH   = $40;

const
  LPD_SHARE_STENCIL = $80;

const
  LPD_SHARE_ACCUM   = $0100;

const
  LPD_SWAP_EXCHANGE = $0200;

const
  LPD_SWAP_COPY     = $0400;

const
  LPD_TRANSPARENT   = $1000;

const
  LPD_TYPE_RGBA     = 0;

const
  LPD_TYPE_COLORINDEX= 1;

-- /* wglSwapLayerBuffers flags 
const
  WGL_SWAP_MAIN_PLANE= $01;

const
  WGL_SWAP_OVERLAY1 = $02;

const
  WGL_SWAP_OVERLAY2 = $04;

const
  WGL_SWAP_OVERLAY3 = $08;

const
  WGL_SWAP_OVERLAY4 = $10;

const
  WGL_SWAP_OVERLAY5 = $20;

const
  WGL_SWAP_OVERLAY6 = $40;

const
  WGL_SWAP_OVERLAY7 = $80;

const
  WGL_SWAP_OVERLAY8 = $0100;

const
  WGL_SWAP_OVERLAY9 = $0200;

const
  WGL_SWAP_OVERLAY10= $0400;

const
  WGL_SWAP_OVERLAY11= $0800;

const
  WGL_SWAP_OVERLAY12= $1000;

const
  WGL_SWAP_OVERLAY13= $2000;

const
  WGL_SWAP_OVERLAY14= $4000;

const
  WGL_SWAP_OVERLAY15= $8000;

const
  WGL_SWAP_UNDERLAY1= $10000;

const
  WGL_SWAP_UNDERLAY2= $20000;

const
  WGL_SWAP_UNDERLAY3= $40000;

const
  WGL_SWAP_UNDERLAY4= $80000;

const
  WGL_SWAP_UNDERLAY5= $100000;

const
  WGL_SWAP_UNDERLAY6= $200000;

const
  WGL_SWAP_UNDERLAY7= $400000;

const
  WGL_SWAP_UNDERLAY8= $800000;

const
  WGL_SWAP_UNDERLAY9= $1000000;

const
  WGL_SWAP_UNDERLAY10= $2000000;

const
  WGL_SWAP_UNDERLAY11= $4000000;

const
  WGL_SWAP_UNDERLAY12= $8000000;

const
  WGL_SWAP_UNDERLAY13= $10000000;

const
  WGL_SWAP_UNDERLAY14= $20000000;

const
  WGL_SWAP_UNDERLAY15= $40000000;

type
t_463=signed 32;

t_464=signed 32;

procedure wglDescribeLayerPlane(
    _001            : t_HDC; 
    _002            : t_463; 
    _003            : t_464; 
    _004            : UINT; 
    _005            : LPLAYERPLANEDESCRIPTOR)
                      return BOOL;
#pragma convention(wglDescribeLayerPlane,system);
#pragma import(wglDescribeLayerPlane,'wglDescribeLayerPlane','opengl32.dll');

type
t_465=signed 32;

t_466=signed 32;

t_467=signed 32;

t_468=^COLORREF for machine_pointer use true;

  t_469 = signed 32;

procedure wglSetLayerPaletteEntries(
    _001            : t_HDC; 
    _002            : t_465; 
    _003            : t_466; 
    _004            : t_467; 
    _005            : in t_468)
                      return t_469;
#pragma convention(wglSetLayerPaletteEntries,system);
#pragma import(wglSetLayerPaletteEntries,'wglSetLayerPaletteEntries','opengl32.dll');

type
t_470=signed 32;

t_471=signed 32;

t_472=signed 32;

t_473=^COLORREF for machine_pointer use true;

  t_474 = signed 32;

procedure wglGetLayerPaletteEntries(
    _001            : t_HDC; 
    _002            : t_470; 
    _003            : t_471; 
    _004            : t_472; 
    _005            : t_473)
                      return t_474;
#pragma convention(wglGetLayerPaletteEntries,system);
#pragma import(wglGetLayerPaletteEntries,'wglGetLayerPaletteEntries','opengl32.dll');

type
t_475=signed 32;

procedure wglRealizeLayerPalette(
    _001            : t_HDC; 
    _002            : t_475; 
    _003            : BOOL)
                      return BOOL;
#pragma convention(wglRealizeLayerPalette,system);
#pragma import(wglRealizeLayerPalette,'wglRealizeLayerPalette','opengl32.dll');

procedure wglSwapLayerBuffers(
    _001            : t_HDC; 
    _002            : UINT)
                      return BOOL;
#pragma convention(wglSwapLayerBuffers,system);
#pragma import(wglSwapLayerBuffers,'wglSwapLayerBuffers','opengl32.dll');

type
  _WGLSWAP          = record
hdc             : t_HDC;
uiFlags         : UINT;
  end record;
  WGLSWAP           = _WGLSWAP;
  PWGLSWAP          = ^_WGLSWAP;
  LPWGLSWAP         = ^_WGLSWAP;

const
  WGL_SWAPMULTIPLE_MAX= 16;

type
t_476=^WGLSWAP for machine_pointer use true;

procedure wglSwapMultipleBuffers(
    _001            : UINT; 
    _002            : in t_476)
                      return DWORD;
#pragma convention(wglSwapMultipleBuffers,system);
#pragma import(wglSwapMultipleBuffers,'wglSwapMultipleBuffers','opengl32.dll');


end wingdi;
