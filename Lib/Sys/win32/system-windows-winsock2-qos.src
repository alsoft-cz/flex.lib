----------------------------------------------------------------------------------------------------
module qos =
-- Windows header [converted by h2flex]
--
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

-- /*++
-- 
-- Copyright (c) Microsoft Corporation. All rights reserved.
-- 
-- Module Name:
-- 
--     qos.h - QoS definitions for NDIS components.
-- 
-- Abstract:
-- 
--     This module defines the Quality of Service structures and types used
--     by Winsock applications.
-- 
-- Revision History:
-- 
-- --*/
-- /*
--  *  Definitions for valued-based Service Type for each direction of data flow.
--  */
type
t_SERVICETYPE       = unsigned 32;

const
  SERVICETYPE_NOTRAFFIC= $00;

const
  SERVICETYPE_BESTEFFORT= $01;

const
  SERVICETYPE_CONTROLLEDLOAD= $02;

const
  SERVICETYPE_GUARANTEED= $03;

const
  SERVICETYPE_NETWORK_UNAVAILABLE= $04;

const
  SERVICETYPE_GENERAL_INFORMATION= $05;

const
  SERVICETYPE_NOCHANGE= $06;

const
  SERVICETYPE_NONCONFORMING= $09;

const
  SERVICETYPE_NETWORK_CONTROL= $0A;

const
  SERVICETYPE_QUALITATIVE= $0D;

-- /*********  The usage of these is currently not supported.  **************
const
  SERVICE_BESTEFFORT= $80010000;

const
  SERVICE_CONTROLLEDLOAD= $80020000;

const
  SERVICE_GUARANTEED= $80040000;

const
  SERVICE_QUALITATIVE= $80200000;

-- /* **************************** ***** ************************************ 
-- /*
--  * Flags to control the usage of RSVP on this flow.
--  */
-- /*
--  * to turn off traffic control, 'OR' ( | ) this flag with the 
--  * ServiceType field in the FLOWSPEC
--  */
const
  SERVICE_NO_TRAFFIC_CONTROL= $81000000;

-- /*
--  * this flag can be used to prevent any rsvp signaling messages from being 
--  * sent. Local traffic control will be invoked, but no RSVP Path messages 
--  * will be sent.This flag can also be used in conjunction with a receiving 
--  * flowspec to suppress the automatic generation of a Reserve message.  
--  * The application would receive notification that a Path  message had arrived 
--  * and would then need to alter the QOS by issuing WSAIoctl( SIO_SET_QOS ), 
--  * to unset this flag and thereby causing Reserve messages to go out.
--  */
const
  SERVICE_NO_QOS_SIGNALING= $40000000;

-- /*
--  *  Flow Specifications for each direction of data flow.
--  */
type
  _flowspec         = record
TokenRate       : ULONG;
TokenBucketSize : ULONG;
PeakBandwidth   : ULONG;
Latency         : ULONG;
DelayVariation  : ULONG;
ServiceType     : t_SERVICETYPE;
MaxSduSize      : ULONG;
MinimumPolicedSize : ULONG;
  end record;
  FLOWSPEC          = _flowspec;
  PFLOWSPEC         = ^_flowspec;
  LPFLOWSPEC        = ^_flowspec;

-- /*
--  * this value can be used in the FLOWSPEC structure to instruct the Rsvp Service 
--  * provider to derive the appropriate default value for the parameter.  Note 
--  * that not all values in the FLOWSPEC structure can be defaults. In the
--  * ReceivingFlowspec, all parameters can be defaulted except the ServiceType.  
--  * In the SendingFlowspec, the MaxSduSize and MinimumPolicedSize can be
--  * defaulted. Other defaults may be possible. Refer to the appropriate
--  * documentation.
--  */
const
  QOS_NOT_SPECIFIED = $FFFFFFFF;

-- /*
--  * define a value that can be used for the PeakBandwidth, which will map into 
--  * positive infinity when the FLOWSPEC is converted into IntServ floating point 
--  * format.  We can't use (-1) because that value was previously defined to mean
--  * "select the default".
--  */
const
  POSITIVE_INFINITY_RATE= $FFFFFFFE;

-- /*
--  * the provider specific structure can have a number of objects in it.
--  * Each next structure in the
--  * ProviderSpecific will be the QOS_OBJECT_HDR struct that prefaces the actual
--  * data with a type and length for that object.  This QOS_OBJECT struct can 
--  * repeat several times if there are several objects.  This list of objects
--  * terminates either when the buffer length has been reached ( WSABUF ) or
--  * an object of type QOS_END_OF_LIST is encountered.
--  */
type
  QOS_OBJECT_HDR    = record
ObjectType      : ULONG;
ObjectLength    : ULONG;
  end record;
  LPQOS_OBJECT_HDR  = ^QOS_OBJECT_HDR;

-- /*
--  * general QOS objects start at this offset from the base and have a range 
--  * of 1000
--  */
const
  QOS_GENERAL_ID_BASE= 2000;

-- /* QOS_End_of_list structure passed 
-- /* QOS_ShapeDiscard structure passed 
-- /* QOS_ShapingRate structure 
-- /* QOS_DestAddr structure (defined in qossp.h) 
-- /*
--  * This structure is used to define the behaviour that the traffic
--  * control packet shaper will apply to the flow.
--  *
--  * TC_NONCONF_BORROW - the flow will receive resources remaining 
--  *  after all higher priority flows have been serviced. If a 
--  *  TokenRate is specified, packets may be non-conforming and
--  *  will be demoted to less than best-effort priority.
--  *  
--  * TC_NONCONF_SHAPE - TokenRate must be specified. Non-conforming
--  *  packets will be retianed in the packet shaper until they become
--  *  conforming.
--  *
--  * TC_NONCONF_DISCARD - TokenRate must be specified. Non-conforming
--  *  packets will be discarded.
--  *
--  */
type
  _QOS_SD_MODE      = record
ObjectHdr       : QOS_OBJECT_HDR;
ShapeDiscardMode : ULONG;
  end record;
  QOS_SD_MODE       = _QOS_SD_MODE;
  LPQOS_SD_MODE     = ^_QOS_SD_MODE;

const
  TC_NONCONF_BORROW = 0;

const
  TC_NONCONF_SHAPE  = 1;

const
  TC_NONCONF_DISCARD= 2;

const
  TC_NONCONF_BORROW_PLUS= 3;

-- /*
--  * This structure allows an app to specify a prorated "average token rate" using by
--  * the traffic shaper under SHAPE modehaper queue. It is expressed in bytes per sec.
--  *
--  * ShapingRate (bytes per sec.)
--  *
--  */
type
  _QOS_SHAPING_RATE = record
ObjectHdr       : QOS_OBJECT_HDR;
ShapingRate     : ULONG;
  end record;
  QOS_SHAPING_RATE  = _QOS_SHAPING_RATE;
  LPQOS_SHAPING_RATE = ^_QOS_SHAPING_RATE;

-- ** Not supported currently
end qos;
