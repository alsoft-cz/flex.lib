----------------------------------------------------------------------------------------------------
module public message_digests =
-- Message digests
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

with
  standard,
  standard.streams;



type
  -- Message Digest is an ordinary array of bytes
  t_message_digest = private t_data_array;
  p_message_digest = ^t_message_digest;



----------------------------------------------------------------------------------------------------
class abstract c_crypto_message_digest =
-- Base abstract class for message digest computing
----------------------------------------------------------------------------------------------------
-- This class provides functionality of message digest algorithm. 
----------------------------------------------------------------------------------------------------

    message
      message_digest_error;

    type
      { pracovní kontext funkce }
      t_digest_context;
      p_digest_context = ^t_digest_context;



    ------------------------------------------------------------------------------------------------
    virtual abstract get_message_digest_size return t_unsigned;
    -- Returns size of the message digest if bytes.
    ------------------------------------------------------------------------------------------------
--  virtual abstract get_context (_context : out p_digest_context);
    -- Allocates new memory, makes copy of current context and returns pointer to than new one copy.
    -- See [set_context] method.
    ------------------------------------------------------------------------------------------------
--  virtual abstract set_context (_context : in p_digest_context);
    -- Makes copy of provided context into internal one. Using [get_context] and [set_context]
    -- methods it is possible to deffer digest computing to later.
    ------------------------------------------------------------------------------------------------
    virtual abstract new_context (_context : out p_digest_context);
    -- Create (allocate) new initialized context and return pointer to it.
    ------------------------------------------------------------------------------------------------
    virtual abstract reset_context;
    -- Cleans-up internal context and prepares object for new computing.
    ------------------------------------------------------------------------------------------------
    virtual abstract put_data_byte  (data : in t_data_byte);
    -- Process signle byte and updates internal context along it
    ------------------------------------------------------------------------------------------------
    virtual abstract put_data_array (data : in t_data_array);
    ------------------------------------------------------------------------------------------------
    virtual abstract put_data_string(data : in t_data_string);
    ------------------------------------------------------------------------------------------------
    virtual abstract get_message_digest (digest : out p_message_digest);
    { vrátí výsledný hash, dealokuje volající, poté lze opět volat [put_data] }
    ------------------------------------------------------------------------------------------------


    protected

    type
      -- ve společné předkovi je digest context prázdný record
      t_digest_context = record
          end record;

    end c_crypto_message_digest;



----------------------------------------------------------------------------------------------------
#separate public sha1;
-- Secure Hash Signature Standard (SHS) (FIPS PUB 180-2).
----------------------------------------------------------------------------------------------------
#separate public sha256;
-- Secure Hash Signature Standard (SHS) (FIPS PUB 180-2).
----------------------------------------------------------------------------------------------------

end message_digests;