----------------------------------------------------------------------------------------------------
module private unchecked_memory_access =
-- Unchecked memory access.
-- Advanced Multi-platform Library.
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure memory_fill_zero =
-- Sets [size] bytes of [x] to zero.
----------------------------------------------------------------------------------------------------
begin
  {%%TODO(LIB) Přepsat do assembleru, naprogramovat též MMX variantu }
  for i in 1..size loop
    t_unsigned8array(x)[i-1]:=0;
    end loop;
  end memory_fill_zero;



----------------------------------------------------------------------------------------------------
procedure memory_fill_byte =
-- Sets [size] bytes of [x] to [fill_with].
----------------------------------------------------------------------------------------------------
begin
  {%%TODO(LIB) Přepsat do assembleru, naprogramovat též MMX variantu }
  for i in 1..size loop
    t_unsigned8array(x)[i-1]:=fill_with;
    end loop;
  end memory_fill_byte;



----------------------------------------------------------------------------------------------------
procedure memory_copy =
-- Moves [size] of bytes from [source] to [destination].
----------------------------------------------------------------------------------------------------
var
  source_addr      : t_memory_address;
  destination_addr : t_memory_address;

begin
  {%%TODO(LIB) Přepsat do assembleru, naprogramovat též MMX variantu }
  
  -- handle trivial situations
  if size=0 then return end if;

  -- compute memory addresses of source and destination memory blocks
  source_addr:=machine_pointer_to_memory_address(t_machine_pointer(^source));
  destination_addr:=machine_pointer_to_memory_address(t_machine_pointer(^destination));

  -- both operands start at the same address
  if source_addr=destination_addr then 
    -- do nothing

  -- the source operand starts before the destination operand and ends within it
  elsif source_addr+t_memory_address(size-1)>=destination_addr 
  and source_addr+t_memory_address(size)<destination_addr+t_memory_address(size) then
    for i in reverse 1..size loop
      t_unsigned8array(destination)[i-1]:=t_unsigned8array(source)[i-1]
      end loop;                           

  -- in all other cases copy in the forward direction
  else
    for i in 1..size loop
      t_unsigned8array(destination)[i-1]:=t_unsigned8array(source)[i-1]
      end loop;
    end if;
  end memory_copy;


  
----------------------------------------------------------------------------------------------------
procedure machine_pointer_to_memory_address =
-- Converts a pointer to some object to the corresponding linear memory address of the reference
-- object. If [pointer] is NIL, returns zero.
----------------------------------------------------------------------------------------------------
begin
  result:=t_memory_address(pointer:unchecked);
  end machine_pointer_to_memory_address;



----------------------------------------------------------------------------------------------------
procedure memory_address_to_machine_pointer =
-- Converts a memory address of some object to the corresponding machine pointer refencing the 
-- object. If [address] is zero, returns NIL.
----------------------------------------------------------------------------------------------------
begin
  result:=t_machine_pointer(address:unchecked);
  end memory_address_to_machine_pointer;



end unchecked_memory_access;