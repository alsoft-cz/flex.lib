----------------------------------------------------------------------------------------------------
module private bit_operations =
-- Bit-level operations.
-- Advanced Multi-platform Library.
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

var
  -- invalid bit index (CMOVcc can't assign an immediate, so a variable is necessary)
  invalid_bit_index: static const t_bit_index := t_bit_index:first;

----------------------------------------------------------------------------------------------------
procedure bit_count =
-- Returns the number of one bits in [x].
----------------------------------------------------------------------------------------------------
begin
  if x:size=4
    then
      #syntax asm;
        mov    eax,x
        mov    eax,[eax]
    @2: bsf    edx,eax
        jz     @1
        btr    eax,edx
        inc    result
        jmp    @2
    @1: #end asm;
    else
      raise feature_not_implemented;
      end if;
  end bit_count;



----------------------------------------------------------------------------------------------------
procedure bit_search_first_one =
-- Returns zero-based index of the first bit set to one in [x].
----------------------------------------------------------------------------------------------------
begin
  if x:size=4
    then
      #syntax asm;
        mov    eax,x
 --     mov    eax,[eax]
 --     cmp    eax,0
 --     jz     @1
        bsf    edx,[eax]
        cmovz  edx,invalid_bit_index
        mov    result,edx
 --     jmp    @2
 -- @1: mov    result,$FFFF_FFFF
 -- @2: 
        #end asm;
    else
      raise feature_not_implemented;
      end if;
  end bit_search_first_one;



----------------------------------------------------------------------------------------------------
procedure bit_search_last_one =
-- Returns zero-based index of the first bit set to one in [x].
----------------------------------------------------------------------------------------------------
begin
  if x:size=4
    then
      #syntax asm;
        mov    eax,x
 --     mov    eax,[eax]
 --     cmp    eax,0
 --     jz     @1
        bsr    edx,[eax]
        cmovz  edx,invalid_bit_index
        mov    result,edx
 --     jmp    @2
 -- @1: mov    result,$FFFF_FFFF
 -- @2: 
        #end asm;
    else
      raise feature_not_implemented;
      end if;
  end bit_search_last_one;



----------------------------------------------------------------------------------------------------
procedure bit_set =
-- Sets bit [index] in [x].
----------------------------------------------------------------------------------------------------
begin
{ %%TODO(CODEGEN) Pokud skute‡n˜ parametr p©edan˜ do IN REF form ln¡ho parametru
  je dereferencovan˜ pointer obsahuj¡c¡ :size, tak se do nˆj to :size nep©ed .

  if index<0 or t_unsigned(index)>=x:size*8 then
    raise constraint_error;
    end if;
}
  #syntax asm;
      -- adresa po‘adovan‚ho bitu
      mov    ebx,x
      mov    ecx,index
      -- nastavit po‘adovan˜ bit
      bts    [ebx],ecx
      #end asm;
  end bit_set;



----------------------------------------------------------------------------------------------------
procedure bit_reset =
-- Resets bit [index] in [x].
----------------------------------------------------------------------------------------------------
begin
  if index<0 or t_unsigned(index)>=x:size*8 then
    raise constraint_error;
    end if;
  #syntax asm;
      -- adresa po‘adovan‚ho bitu
      mov    ebx,x
      mov    ecx,index
      -- nastavit po‘adovan˜ bit
      btr    [ebx],ecx
      #end asm;
  end bit_reset;



end bit_operations;