----------------------------------------------------------------------------------------------------
module public uri =
-- Additions to standard.names for working with URIs.
-- Advanced Multi-platform Library.
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------
-- General module overview:
--
-- This module contains classes for working with URIs (to be exact: "URI references", but for sake 
-- of simplicity, we use a simple "URI" here). It is an addition to [standard.names] (see 
-- documentation of [standard.names] for general overview).
--
-- This module defines the following basic components:
--   -- namespaces to parse generic URIs and to parse URIs with specific schemes (http, ftp, etc.).
--   -- [c_name] descendant classes for representing URIs.
--   -- name components and subcomponents for representing various parts of the URI.
--
-- The URI parsing process is designed according to RFC 2396 (Uniform Resource Identifiers (URI): 
-- Generic Syntax).
----------------------------------------------------------------------------------------------------

with
  standard.names,
  standard.characters,
  standard.characters.transformers,
  standard.classes.lists;

-- forward declarations
class c_namespace_uri;                      type p_namespace_uri                   = ^class c_namespace_uri;
class c_namespace_http_uri;                 type p_namespace_http_uri              = ^class c_namespace_http_uri;
class c_namespace_ftp_uri;                  type p_namespace_ftp_uri               = ^class c_namespace_ftp_uri;
class c_namespace_mailto_uri;               type p_namespace_mailto_uri            = ^class c_namespace_mailto_uri;

class c_uri_name;                           type p_uri_name                        = ^class c_uri_name;
class c_http_uri_name;                      type p_http_uri_name                   = ^class c_http_uri_name;
class c_ftp_uri_name;                       type p_ftp_uri_name                    = ^class c_ftp_uri_name;

class c_name_component_scheme;              type p_name_component_scheme           = ^class c_name_component_scheme;
class c_name_component_userinfo;            type p_name_component_userinfo         = ^class c_name_component_userinfo;
class c_name_component_network_address;     type p_name_component_network_address  = ^class c_name_component_network_address;
class c_name_component_fragment;            type p_name_component_fragment         = ^class c_name_component_fragment;
class c_name_component_variable;            type p_name_component_variable         = ^class c_name_component_variable;
class c_name_subcomponent_scheme;           type p_name_subcomponent_scheme        = ^class c_name_subcomponent_scheme;
class c_name_subcomponent_domain;           type p_name_subcomponent_domain        = ^class c_name_subcomponent_domain;
class c_name_subcomponent_fragment;         type p_name_subcomponent_fragment      = ^class c_name_subcomponent_fragment;
class c_name_subcomponent_username;         type p_name_subcomponent_username      = ^class c_name_subcomponent_username;
class c_name_subcomponent_password;         type p_name_subcomponent_password      = ^class c_name_subcomponent_password;
class c_name_subcomponent_port;             type p_name_subcomponent_port          = ^class c_name_subcomponent_port;
class c_name_subcomponent_variable_name;    type p_name_subcomponent_variable_name = ^class c_name_subcomponent_variable_name;
class c_name_subcomponent_variable_value;   type p_name_subcomponent_variable_value= ^class c_name_subcomponent_variable_value;


var
  -- URI namespace, %%TODO(TAG) remove
  namespace_uri    : p_namespace_uri;            


----------------------------------------------------------------------------------------------------
class public c_namespace_uri = extend c_namespace;
-- A namespace for decoding generic URI references.
-- Its subclasses are able to decode URIs according to specific schemes.
--
-- URIs are decomposed to the following components (in this order):
--            c_name_component_scheme
--            c_name_component_userinfo
--            c_name_component_network_address
--      (*)   c_name_component_file_or_folder, c_name_component_variable (representing the ;param=value)
--            c_name_component_variable
--            c_name_fragment
--
--  (*) -- these components may be repeated
----------------------------------------------------------------------------------------------------

    type
      -- URI-namespace specific data
      -- %%TODO(TAG) remove everything except name_type
      t_namespace_specific_uri = t_namespace_specific with record
          name_type  : t_name_type;               -- the type of this URI
          scheme     : p_name_component_scheme;   -- scheme of this URI, [nil] if not present
          userinfo   : p_name_component_userinfo; -- login info from this URI, [nil] if not present
          server     : p_name_component_network_address; -- host part of this URI, [nil] if not present
          path_start : p_name_component_file_or_folder;  -- the first path component
          first_param: p_name_component_variable; -- the first param from this URI, [nil] if not present
          first_variable  : p_name_component_variable; -- the first query variable from this URI, [nil] if not present
          fragment   : p_name_component_fragment; -- the fragment part of this URI, [nil] if not present
          end record;
      p_namespace_specific_uri = ^class t_namespace_specific_uri;

  protected
    -- general utility functions used by subclasses

    ------------------------------------------------------------------------------------------------
    static detect_nametype (
        proposed_nt: in t_name_type;             -- proposed type of the name
        text_name  : in t_text_name;             -- the name that is being decomposed
        start      : in out t_unsigned;          -- the first not yet processed character, will be updated
        components : in c_list;                  -- list for the output of the decomposition
        nd         : in p_namespace_specific_uri); -- namespace specific data
    -- Do the required steps to detect URI type (absolute/relative) and process the scheme and
    -- authority parts if they are present.
    ------------------------------------------------------------------------------------------------
    static process_scheme (
        text_name  : in t_text_name;             -- the name that is being decomposed
        start      : in out t_unsigned;          -- the first not yet processed character, will be updated
        scheme_len : in t_unsigned;              -- length of the scheme
        components : in c_list;                  -- list for the output of the decomposition
        nd         : in p_namespace_specific_uri); -- namespace specific data
    -- Process the scheme part of the URI.
    ------------------------------------------------------------------------------------------------
    static process_authority (
        text_name  : in t_text_name;             -- the name that is being decomposed
        start      : in out t_unsigned;          -- the first not yet processed character, will be updated
        components : in c_list;                  -- list for the output of the decomposition
        nd         : in p_namespace_specific_uri); -- namespace specific data
    -- Process the authority (server) part of the URI, including the login and port specification.
    ------------------------------------------------------------------------------------------------
    static process_variable (
        variable   : in c_name_component_variable; -- variable to be filled
        str        : in t_text_name);              -- its text specification (e.g. "name=value")
    -- Process a variable specification, i.e. split [str] and store its subcomponents into [variable].
    ------------------------------------------------------------------------------------------------
    static process_filename (
        file       : in c_name_component_file_or_folder; -- component to be filled
        str        : in t_text_name);                    -- its text specification (e.g. "file.txt.tar.gz")
    -- Process a file specification, i.e. split [str] and store its subcomponents into [file].
    ------------------------------------------------------------------------------------------------
    static process_path (
        text_name  : in t_text_name;             -- the name that is being decomposed
        start      : in out t_unsigned;          -- the first not yet processed character, will be updated
        components : in c_list;                  -- list for the output of the decomposition
        nd         : in p_namespace_specific_uri); -- namespace specific data
    -- Process the path part of the URI.
    ------------------------------------------------------------------------------------------------
    static process_query (
        text_name  : in t_text_name;             -- the name that is being decomposed
        start      : in out t_unsigned;          -- the first not yet processed character, will be updated
        components : in c_list;                  -- list for the output of the decomposition
        nd         : in p_namespace_specific_uri); -- namespace specific data
    -- Process the query part of the URI, if present (otherwise, do nothing).
    ------------------------------------------------------------------------------------------------
    static process_fragment (
        text_name  : in t_text_name;             -- the name that is being decomposed
        start      : in out t_unsigned;          -- the first not yet processed character, will be updated
        components : in c_list;                  -- list for the output of the decomposition
        nd         : in p_namespace_specific_uri); -- namespace specific data
    -- Process the fragment part of the URI, if present (otherwise, do nothing).
    -----------------------------------------------------------------------------------------------
    static has_scheme (
        text_name  : in  t_text_name;            -- the name
        has_scheme : out t_logical;              -- is a scheme present?
        is_valid   : out t_logical;              -- is a _valid_ scheme present?
        scheme_len : out t_unsigned);            -- length of the scheme part
    -- Checks whether the [text_name] begins with a scheme part and if it is valid.
    --  - If it does not contain a scheme part, [has_scheme] is set to false
    --  - If it contains an invalid scheme, set [is_valid] to false and [has_scheme] to true
    --  - If it contains a valid scheme, set [is_valid] to true, set [scheme_len] to the
    --    length of the scheme part (including the separating colon), and [has_scheme] to true
    ------------------------------------------------------------------------------------------------

    end c_namespace_uri;


----------------------------------------------------------------------------------------------------
class public c_namespace_http_uri = extend c_namespace_uri;
-- A namespace for decoding URI references that use http scheme.
-- It uses the following syntax:
--    http://user:password@host:port/path?query#fragment
----------------------------------------------------------------------------------------------------

    end c_namespace_http_uri;



----------------------------------------------------------------------------------------------------
class public c_namespace_ftp_uri = extend c_namespace_uri;
-- A namespace for decoding URI references that use http scheme.
-- It uses the following syntax:
--    ftp://user:password@host:port/path;type=typecode
----------------------------------------------------------------------------------------------------

    end c_namespace_ftp_uri;



----------------------------------------------------------------------------------------------------
class public c_namespace_mailto_uri = extend c_namespace_uri;
-- A namespace for decoding URI references that use mailto scheme.
-- It uses the following syntax:
--    mailto://rfc-822-address
----------------------------------------------------------------------------------------------------

    end c_namespace_mailto_uri;



----------------------------------------------------------------------------------------------------
class public c_namespace_news_uri = extend c_namespace_uri;
-- A namespace for decoding URI references that use news scheme.
-- It uses the following syntax:
--    news:newsgroup-name
-- or
--    news:message-id
----------------------------------------------------------------------------------------------------

    end c_namespace_news_uri;



----------------------------------------------------------------------------------------------------
class public c_uri_name = extend c_name;
-- A name that represents a generic URI, parsed by [c_namespace_uri].
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static delete_variables;
    -- Delete all variables (and fragment information) from the name's component list.
    ------------------------------------------------------------------------------------------------

    end c_uri_name;



----------------------------------------------------------------------------------------------------
class public c_http_uri_name = extend c_uri_name;
-- A name that represents a URI with the http scheme, parsed by [c_namespace_http_uri].
----------------------------------------------------------------------------------------------------

    end c_http_uri_name;


----------------------------------------------------------------------------------------------------
class public c_ftp_uri_name = extend c_uri_name;
-- A name that represents a URI with the ftp scheme, parsed by [c_namespace_ftp_uri].
----------------------------------------------------------------------------------------------------

    end c_ftp_uri_name;



----------------------------------------------------------------------------------------------------
class public c_name_subcomponent_domain = extend c_name_subcomponent;
-- URI name subcomponent of [c_name_component_network_address] that represents one domain
-- (e.g. "org" in "www.example.org")
----------------------------------------------------------------------------------------------------

    end c_name_subcomponent_domain;



----------------------------------------------------------------------------------------------------
class public c_name_subcomponent_scheme = extend c_name_subcomponent;
-- The trivial subcomponent of [c_name_component_scheme]
----------------------------------------------------------------------------------------------------

    end c_name_subcomponent_scheme;



----------------------------------------------------------------------------------------------------
class public c_name_subcomponent_fragment = extend c_name_subcomponent;
-- The trivial subcomponent of [c_name_component_fragment]
----------------------------------------------------------------------------------------------------

    end c_name_subcomponent_fragment;



----------------------------------------------------------------------------------------------------
class public c_name_subcomponent_port = extend c_name_subcomponent;
-- URI name subcomponent of [c_name_component_network_address] that represents the port specification
----------------------------------------------------------------------------------------------------
    
    ------------------------------------------------------------------------------------------------
    static get_port return t_unsigned16;
    -- Retrieve the port value.
    -- %%TODO(LIB) Je t_unsigned16 spravny typ?
    ------------------------------------------------------------------------------------------------

    end c_name_subcomponent_port;



----------------------------------------------------------------------------------------------------
class public c_name_subcomponent_variable_name = extend c_name_subcomponent;
-- URI name subcomponent of [c_name_component_variable], that contains the variable name
-- (e.g. "var" for "var=value").
----------------------------------------------------------------------------------------------------

    end c_name_subcomponent_variable_name;



----------------------------------------------------------------------------------------------------
class public c_name_subcomponent_variable_value = extend c_name_subcomponent;
-- URI name subcomponent of [c_name_component_variable], that contains the variable value
-- (e.g. "value" for "var=value").
----------------------------------------------------------------------------------------------------

    end c_name_subcomponent_variable_value;



----------------------------------------------------------------------------------------------------
class public c_name_component_variable = extend c_name_component;
-- URI name component that represents one name=value pair from params or query list
----------------------------------------------------------------------------------------------------

    end c_name_component_variable;



----------------------------------------------------------------------------------------------------
class public c_name_component_scheme = extend c_name_component;
-- URI name component that represents the scheme, e.g. "http"
----------------------------------------------------------------------------------------------------

    end c_name_component_scheme;



----------------------------------------------------------------------------------------------------
class public c_name_component_fragment = extend c_name_component;
-- URI name component that represents the fragment, i.e. the "#xxx" part of the URI
----------------------------------------------------------------------------------------------------

    end c_name_component_fragment;



----------------------------------------------------------------------------------------------------
class public c_name_component_network_address = extend c_name_component;
-- URI name component representing the network address (including the port specification if present).
----------------------------------------------------------------------------------------------------

    var
      -- the port subcomponent of this address, or [nil] if not present
      -- %%TODO(PROTECTED) make this variable protected and resolve read-write access in the private 
      -- part of this module
      port         : p_name_subcomponent_port; 

    end c_name_component_network_address;



----------------------------------------------------------------------------------------------------
class public c_name_subcomponent_username = extend c_name_subcomponent;
-- URI name subcomponent of [c_name_component_userinfo] that represents the username component of userinfo
----------------------------------------------------------------------------------------------------

  end c_name_subcomponent_username;



----------------------------------------------------------------------------------------------------
class public c_name_subcomponent_password = extend c_name_subcomponent;
-- URI name subcomponent of [c_name_component_userinfo] that represents the password component of userinfo
----------------------------------------------------------------------------------------------------

  end c_name_subcomponent_password;



----------------------------------------------------------------------------------------------------
class public c_name_component_userinfo = extend c_name_component;
-- URI name component that represents the user information, i.e. the "name:password" part of the URI
-- subcomponents: one [c_name_subcomponent_username] and optionally one [c_name_subcomponent_password]
----------------------------------------------------------------------------------------------------

    end c_name_component_userinfo;


----------------------------------------------------------------------------------------------------
class public c_uri_decoder = extend c_character_transformer;
-- Character transformer that is able to decode escaped URIs.
-- Examples:
--    "some%20long%20string%2C%20containing%20symbols" is transformed to "some long string, containing symbols"
--    "20%%20volume" is transformed to "20% volume" (the first "%" is not a valid escape, so it is ignored)
--    "%2p" is left untransformed, as "%2" is not a valid escape
-- "+" characters are handled according to the [plus_is_space] variable:
--     When [plus_is_space] is true, "abc+def" is transformed to "abc def".
--     When [plus_is_space] is false, "abc+def" is left untransformed.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        plus_is_space : in t_logical);           -- The desired value of [plus_is_space] configuration variable
    -- Initialize the decoder. Reset it into the start state, configure [plus_is_space] (see
    -- description in the class comment).
    ------------------------------------------------------------------------------------------------

    end c_uri_decoder;



----------------------------------------------------------------------------------------------------
class public c_uri_encoder = extend c_character_transformer;
-- Character transformer that is able to encode strings to escaped URIs.
-- Space characters are handled according to the [plus_is_space] variable:
--     When [plus_is_space] is true, "abc def" is transformed to "abc+def".
--     When [plus_is_space] is false, "abc def" is transformed to "abc%20def".
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        plus_is_space : in t_logical);           -- The desired value of [plus_is_space] configuration variable
    -- Initialize the encoder, configure [plus_is_space] (see description in the class comment).
    ------------------------------------------------------------------------------------------------

    end c_uri_encoder;



end uri;
