----------------------------------------------------------------------------------------------------
module private tasks =
-- Temporary module: Tasks.
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

with
  flex,
  flex.tasks;

----------------------------------------------------------------------------------------------------
procedure internal_task_helper : t_rtl_task_entry =
----------------------------------------------------------------------------------------------------
begin
  p_task(selfptr:unchecked)^.run(userdata);
  end internal_task_helper;


----------------------------------------------------------------------------------------------------
class private abstract c_task = 
----------------------------------------------------------------------------------------------------
var
  reference        : aliased t_rtl_task_ref_local;

  --------------------------------------------------------------------------------------------------
  static start =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_start_task(^internal_task_helper,^reference,false,,^this,userdata);
    end start;



  --------------------------------------------------------------------------------------------------
  static wait =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_wait_and_finish_task(reference);
    end wait;



  --------------------------------------------------------------------------------------------------
  static try_wait =
  -- Waits until the task terminates, but no longer than [timeout] ms. If the task has terminated
  -- before the timeout, returns true, in case of timeout, the function returns false.
  --------------------------------------------------------------------------------------------------
  begin
    if rtl_try_wait_for_finish_task(reference,t_rtl_timeout(timeout)) then
      result:=true;
      end if;
    end try_wait;



  --------------------------------------------------------------------------------------------------
  static kill =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_kill_when_need_and_finish_task(reference);
    end kill;



  --------------------------------------------------------------------------------------------------
  exit = 
  --------------------------------------------------------------------------------------------------
  begin
    kill;
    end exit;
  end c_task;
end tasks;
