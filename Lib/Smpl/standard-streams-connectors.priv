----------------------------------------------------------------------------------------------------
class private c_passive_buffered_stream_connector =
----------------------------------------------------------------------------------------------------
var
    que            : c_queue;
    eod            : t_logical;
    isreading      : t_logical;
    in_closed      : t_logical;
    out_closed     : t_logical;

    --split long packet
    longpacket       : t_data_packet;
    longpos          : t_offset;


  --------------------------------------------------------------------------------------------------
  static drop_packets =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    data           : t_data_packet;

  begin
    while que.try_accept_any_msg(packet,t_wait_immediate) loop
      data:=p_data_packet(packet)^;
      discard packet;
      discard_packet(data);
      end loop;
    end drop_packets;

  
  
  --------------------------------------------------------------------------------------------------
  override c_input_stream.close =
  --------------------------------------------------------------------------------------------------
  begin
    if in_closed then
      raise stream_already_closed;
      end if;
    in_closed:=true;
    -- cteci strana prestala cist
    isreading:=false;
    drop_packets;
    end close; 


  
  --------------------------------------------------------------------------------------------------
  override c_input_stream.read_packet =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    size           : t_offset;

  begin
    -- otestuju opravnenost pozadavku
    if in_closed then
      raise stream_already_closed;
      end if;
    if eod then
      raise stream_end_of_data;
      end if;

    if longpos<>0 then
      size:=packet_size(longpacket)-longpos;
      if size>options.maximal_size then
        size:=options.maximal_size;
        end if;

      new data.data range size;
      data.style:=t_dps_heap;
      copy_from_packet(longpacket,longpos,data.data,data.size,size);
      if packet_size(longpacket)=longpos then
        discard_packet(longpacket);
        longpos:=0;
        end if;

      -- zapocitam prutok
      c_input_stream:(this).add_flow(data);
    else

      -- cekam na packet
      que.accept_any_msg(packet);
      longpacket:=p_data_packet(packet)^;

      -- uvolnim handle na packet
      discard packet;
   
      size:=packet_size(longpacket);
      if size>options.maximal_size then
        size:=options.maximal_size;
        new data.data range size;
        data.style:=t_dps_heap;
        copy_from_packet(longpacket,longpos,data.data,data.size,size);
      else
        data:=longpacket;
        longpacket:=nil;
        end if;

      -- zapocitam prutok
      c_input_stream:(this).add_flow(data);

      -- zjistim jestli uz byl posledni
      if data.style=t_dps_signal then 
        if data.signal=t_dpss_eod then
          eod:=true;
        elsif data.signal=t_dpss_bad_data then
          raise stream_invalid_data;
          end if;
        end if;
      end if;
    end read_packet; 

  

  --------------------------------------------------------------------------------------------------
  override c_input_stream.is_eod =
  --------------------------------------------------------------------------------------------------
  begin
    if in_closed then
      raise stream_already_closed;
      end if;
    -- vratim jetli uz byl precten posledni packet
    result:=eod;
    end is_eod; 

  

  --------------------------------------------------------------------------------------------------
  override c_output_stream.close =
  --------------------------------------------------------------------------------------------------
  begin
    if out_closed then
      raise stream_already_closed;
      end if;
    if isreading then
      -- vyprazdnim buffery
      c_output_stream:(this).flush;
      end if;
    if isreading then
      -- poslu end of data
      c_output_stream:(this).write_eod;
      end if;
    out_closed:=true;
    end close; 


  
  --------------------------------------------------------------------------------------------------
  override c_output_stream.write_packet =
  --------------------------------------------------------------------------------------------------
  var
    packet       : p_data_packet;

  begin
    -- tetuju legalnost operace
    if out_closed then
      raise stream_already_closed;
      end if;
    if not isreading then
      raise stream_other_side;
      end if;
    -- vytvorim handle na packet
    new packet;

    -- zkopiruju handle nebo i data packetu
    if data.style=t_dps_temporary then
      copy_to_packet(packet^,data.data,data.size);
    else
      packet^:=data;
      end if;
    --%%TODO join short packets

    -- pripojim packet na konec fronty
    que.append_msg(packet);

    -- pokud je to flush packet, cekam az ve fronte nebude zadny packet
    if data.style=t_dps_signal and then data.signal=t_dpss_flush then
      que.wait_empty;
      end if;
    
    -- zapocitam prutok
    c_output_stream:(this).add_flow(data);
    end write_packet; 



  --------------------------------------------------------------------------------------------------
  override c_output_stream.is_reading =
  --------------------------------------------------------------------------------------------------
  begin
    if out_closed then
      raise stream_already_closed;
      end if;
    -- vratim jestli druha strana jeste cte data
    result:=isreading;
    end is_reading; 



  ------------------------------------------------------------------------------------------------
  entry = 
  ------------------------------------------------------------------------------------------------
  begin
    isreading:=true;
    end entry;
  end c_passive_buffered_stream_connector;



----------------------------------------------------------------------------------------------------
class private c_controlled_stream_connector =
----------------------------------------------------------------------------------------------------

  ------------------------------------------------------------------------------------------------
  static transfer_packet =
  ------------------------------------------------------------------------------------------------
  begin
    result:=c_stream_reader:(this)._source^.transfer_packet(c_stream_writer:(this)._target,transfer_eod);
    end transfer_packet;



  ------------------------------------------------------------------------------------------------
  static transfer_all_packets =
  ------------------------------------------------------------------------------------------------
  begin
    c_stream_reader:(this)._source^.transfer_all_packets(c_stream_writer:(this)._target,transfer_eod);
    end transfer_all_packets;

  
  
  ------------------------------------------------------------------------------------------------
  static init_connector =
  ------------------------------------------------------------------------------------------------
  begin
    -- inicializace obou stran spojeni
    c_stream_writer:(this).init_writer(target);
    c_stream_reader:(this).init_reader(source);
    end init_connector;
  end c_controlled_stream_connector;



----------------------------------------------------------------------------------------------------
class private c_active_stream_connector =
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  override c_task.run =
  -- cerpadlo
  ------------------------------------------------------------------------------------------------
  begin
    loop
      begin
        if transfer_packet then
          break;
          end if;
      catch
        when stream_other_side do
          -- jestli druha strana prestala cist data zavru a koncim
          c_stream_reader:(this)._source^.close;
          c_stream_writer:(this)._target^.close;
          break;
        end;
      end loop;
    catch
      when others do
        -- neco se rozbilo, zkusim po sobe uklidit
        c_stream_reader:(this)._source^.close;
        c_stream_writer:(this)._target^.close;
        raise;
    end run;

  
  
  ------------------------------------------------------------------------------------------------
  static start_connector =
  ------------------------------------------------------------------------------------------------
  begin
    init_connector(source,target);
    c_task:(this).start;
    end start_connector;



  ------------------------------------------------------------------------------------------------
  exit = 
  ------------------------------------------------------------------------------------------------
  begin
    -- ukoncim cerpadlo
    c_task:(this).kill;
    end exit;
  end c_active_stream_connector;

