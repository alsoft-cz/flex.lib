----------------------------------------------------------------------------------------------------
module public datetime =
-- Date/time.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

type
  -- 100-nanosekundovy interval = 1 tick
  t_timespan = t_signed64;
  p_timespan = ^t_timespan;

  -- ticku od     pondeli 1. ledna (-)4713 BCE 12:00:00.0 (UTC)
  -- kladny rozsah konci kus po roku 24000 CE             (UTC)
  t_datetime = t_signed64{protected t_timespan};
  p_datetime = ^t_datetime;


const
  t_dtc_julian_zero              : t_datetime = [$00,$00,$00,$00,$00,$00,$00,$00];--pondeli  1. ledna  (-)4713 BCE 12:00:00.0 (UTC)
  --t_dtc_modified_julian_zero     17 Nov 1858 at 00:00:00 UTC. 
  --t_dtc_lilian_zero              14 Oct 1582 at 00:00:00 UTC. 
  t_dtc_common_era_zero : t_datetime = [$00,$00,$0C,$D8,$DE,$FC,$A3,$14];--sobota   1. ledna        1 CE  12:00:00.0 (UTC)
  t_dtc_win32_zero      : t_datetime = [$00,$A0,$21,$BA,$23,$CC,$A5,$1B];--pondeli  1. ledna     1601 CE  00:00:00.0 (UTC)
  t_dtc_unix_zero       : t_datetime = [$00,$20,$60,$8F,$02,$7E,$43,$1D];--ctvrtek  1. ledna     1970 CE  00:00:00.0 (UTC)
  t_dtc_21century_ce    : t_datetime = [$00,$60,$BF,$82,$A9,$3F,$66,$1D];--pondeli  1. ledna     2001 CE  00:00:00.0 (UTC)
  t_dtc_flex_zero       : t_datetime = [$00,$82,$CB,$B0,$B0,$7E,$69,$1D];--pondeli 21. listopadu 2003 CE  13:15:00.0 (UTC)

message 
    calendar_error;

--------------------------------------------------------------------------------------------------
procedure get_timespan(
  a              : in t_datetime;
  b              : in t_datetime)
  return t_timespan;
-- a<b
--------------------------------------------------------------------------------------------------
procedure add_timespan(
  a              : in t_datetime;
  span           : in t_timespan)
  return t_datetime;
--------------------------------------------------------------------------------------------------
procedure substract_timespan(
  a              : in t_datetime;
  span           : in t_timespan)
  return t_datetime;
--------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class public abstract c_calendar =
----------------------------------------------------------------------------------------------------
  --------------------------------------------------------------------------------------------------
  virtual abstract datim_to_string(
    datim          : in t_datetime)
    return         t_char32ustr;
  --------------------------------------------------------------------------------------------------
  virtual get_timespan(
    a              : in t_datetime;
    b              : in t_datetime)
    return t_timespan;
  --------------------------------------------------------------------------------------------------
  virtual add_timespan(
    a              : in t_datetime;
    span           : in t_timespan)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual substract_timespan(
    a              : in t_datetime;
    span           : in t_timespan)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  end c_calendar;




----------------------------------------------------------------------------------------------------
class public abstract c_earth_calendar = extend c_calendar;
----------------------------------------------------------------------------------------------------
type
  -- 0 based,timespan values (wait for 123456 seconds)
  t_ts_ticks       = t_timespan;                 -- count of ticks and timespan is equal
  t_ts_seconds     = t_signed64;                 -- last tick in second is 9999999th tick
  t_ts_minutes     = t_signed64;                 -- last tick in minute is 59 seconds and 9999999 ticks
  t_ts_hours       = t_signed64;                 -- last tick in minute is 59 minutes and 59 seconds and 9999999 ticks
  t_ts_days        = t_signed;
  t_ts_weeks       = t_signed;
  t_ts_months      = t_signed;
  t_ts_years       = t_signed;
  t_ts_eras        = t_signed;

  -- ordinal number (day of week,month,year)
  t_dt_tick        = protected t_unsigned range 0..9999999;
  t_dt_second      = protected t_unsigned range 0..60;
  t_dt_minute      = protected t_unsigned range 0..59;
  t_dt_hour        = protected t_unsigned range 0..23;
  t_dt_week_day    = protected t_unsigned range 1..7;
  t_dt_month_day   = protected t_unsigned range 1..31;
  t_dt_year_day    = protected t_unsigned range 1..366;
  t_dt_month_week  = protected t_unsigned range 1..6;
  t_dt_year_week   = protected t_unsigned range 1..53;
  t_dt_month       = protected t_unsigned range 1..12;
  t_dt_year        = protected t_unsigned;
  t_dt_era         = protected t_unsigned;

  t_decomposed_timespan = record
    ticks          : t_ts_ticks;
    seconds        : t_ts_seconds;
    minutes        : t_ts_minutes;
    hours          : t_ts_hours;
    days           : t_ts_days;
    months         : t_ts_months;
    years          : t_ts_years;
    end record;

  
  t_decomposed_datetime = record
    tick           : t_dt_tick;
    second         : t_dt_second;
    minute         : t_dt_minute;
    hour           : t_dt_hour;
    day            : t_dt_month_day;
    month          : t_dt_month;
    year           : t_dt_year;
    era            : t_dt_era;
    end record;


  t_dt_find_direction = enum
    t_dtf_prev;
    t_dtf_prev_or_same;
    t_dtf_next_or_same;
    t_dtf_next;
    end enum;
  
  t_ts_decomposition = enum
    t_tsd_ticks;
    t_tsd_seconds;
    t_tsd_minutes;
    t_tsd_hours;
    t_tsd_days;
    t_tsd_months;
    t_tsd_years;
    end enum;


  t_ts_rounding = enum
    t_tsr_none;
    t_tsr_truncate;
    t_tsr_nearest;
    end enum;

  --------------------------------------------------------------------------------------------------
  virtual abstract decompose_datetime(
    datim          : in t_datetime)
    return t_decomposed_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract compose_datetime(
    datim          : in t_decomposed_datetime)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract add_decomposed_timespan(
    datim          : in t_datetime;
    timespan       : in t_decomposed_timespan)
    return         t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract substract_decomposed_timespan(
    datim          : in t_datetime;
    timespan       : in t_decomposed_timespan)
    return         t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_decomposed_timespan(
    a              : in t_datetime;
    b              : in t_datetime;
    smallest       : in t_ts_decomposition:=t_tsd_ticks;
    largest        : in t_ts_decomposition:=t_tsd_years;
    rounding       : in t_ts_rounding:=t_tsr_none)
    return         t_decomposed_timespan;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_tick(
    datim          : in t_datetime)
    return t_dt_tick;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_second(
    datim          : in t_datetime)
    return t_dt_second;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_minute(
    datim          : in t_datetime)
    return t_dt_minute;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_hour(
    datim          : in t_datetime)
    return t_dt_hour;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_day_of_week(
    datim          : in t_datetime)
    return t_dt_week_day;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_day_of_month(
    datim          : in t_datetime)
    return t_dt_month_day;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_day_of_year(
    datim          : in t_datetime)
    return t_dt_year_day;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_week_of_month(
    datim          : in t_datetime)
    return t_dt_month_week;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_week_of_year(
    datim          : in t_datetime)
    return t_dt_year_week;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_month(
    datim          : in t_datetime)
    return t_dt_month;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_year(
    datim          : in t_datetime)
    return t_dt_year;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_era(
    datim          : in t_datetime)
    return t_dt_era;
  --------------------------------------------------------------------------------------------------
  virtual abstract is_leap_second(
    datim          : in t_datetime)
    return t_logical;
  --------------------------------------------------------------------------------------------------
  virtual abstract is_leap_day(
    datim          : in t_datetime)
    return t_logical;
  --------------------------------------------------------------------------------------------------
  virtual abstract is_leap_month(
    datim          : in t_datetime)
    return t_logical;
  --------------------------------------------------------------------------------------------------
  virtual abstract is_leap_year(
    datim          : in t_datetime)
    return t_logical;
  --------------------------------------------------------------------------------------------------
  virtual abstract find_tick_of_second(
    datim          : in t_datetime;
    second         : in t_dt_tick;
    direction      : in t_dt_find_direction:=t_dtf_next;
    reset_shorter  : in t_logical:=true)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract find_second_of_minute(
    datim          : in t_datetime;
    second         : in t_dt_second;
    direction      : in t_dt_find_direction:=t_dtf_next;
    reset_shorter  : in t_logical:=true)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract find_minute_of_hour(
    datim          : in t_datetime;
    second         : in t_dt_minute;
    direction      : in t_dt_find_direction:=t_dtf_next;
    reset_shorter  : in t_logical:=true)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract find_hour_of_day(
    datim          : in t_datetime;
    second         : in t_dt_hour;
    direction      : in t_dt_find_direction:=t_dtf_next;
    reset_shorter  : in t_logical:=true)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract find_day_of_week(
    datim          : in t_datetime;
    day            : in t_dt_week_day;
    direction      : in t_dt_find_direction:=t_dtf_next;
    reset_shorter  : in t_logical:=true)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract find_day_of_month(
    datim          : in t_datetime;
    second         : in t_dt_month_day;
    direction      : in t_dt_find_direction:=t_dtf_next;
    reset_shorter  : in t_logical:=true)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract find_day_of_year(
    datim          : in t_datetime;
    second         : in t_dt_year_day;
    direction      : in t_dt_find_direction:=t_dtf_next;
    reset_shorter  : in t_logical:=true)
    return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_days_in_week(
    datim          : in t_datetime)
    return t_ts_days;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_days_in_month(
    datim          : in t_datetime)
    return t_ts_days;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_days_in_year(
    datim          : in t_datetime)
    return t_ts_days;
  --------------------------------------------------------------------------------------------------
  end c_earth_calendar;



----------------------------------------------------------------------------------------------------
#separate public julian;
----------------------------------------------------------------------------------------------------
--#separate public gregorian;
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
class abstract c_datetime_provider =
----------------------------------------------------------------------------------------------------
  --------------------------------------------------------------------------------------------------
  virtual abstract get_datetime return t_datetime;
  --------------------------------------------------------------------------------------------------
  virtual abstract get_machine_uptime return t_timespan;
  --------------------------------------------------------------------------------------------------
  end c_datetime_provider;



----------------------------------------------------------------------------------------------------
#separate public os;
----------------------------------------------------------------------------------------------------


end datetime;