----------------------------------------------------------------------------------------------------
module private input =
-- Input operations routines.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

use
  system.windows.wincon;


{#if #declared radekr; #and then; radekr;
----------------------------------------------------------------------------------------------------
class private c_input_queue_filler = 
-- process that read the input and pussh events into queue
----------------------------------------------------------------------------------------------------
    


    end c_input_queue_filler;

#end if;}

----------------------------------------------------------------------------------------------------
class private c_input_queue = 
-- Input queue
----------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    virtual fill_queue =
    -- Virtual method that reads more input events into queue.
    -- Has to be overriden for specific input sources.
    --
    -- Parametrs:
    --   [count] specifies how many new events was put in the queue  
    --   [error] if subprogram fails this will be set to true
    ------------------------------------------------------------------------------------------------
    begin 
      raise feature_not_implemented;
      end fill_queue;



    ------------------------------------------------------------------------------------------------
    virtual put_event =
    -- Virtual method that puts events into system input queue
    -- Has to be overriden for specific input sources.
    --
    -- Result :
    --   Returns value should return logical result of this action.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end put_event;



    ------------------------------------------------------------------------------------------------
    static get_event =
    -- This method waits until queue does not contain an input event specified by [event_filter],
    -- it returns first such event as [input_event]. Such returned event is removed from the queue.
    -- 
    -- Result:
    --   If subprogram fails error flag wil be set to true
    ------------------------------------------------------------------------------------------------
    var   
      i            : t_unsigned32 := queue_data:first;
      count        : t_unsigned;                 -- number of new event pushed into queue

    begin 
      -- wait until there is the required event in queue
      while not test_event(event_filter) loop
        -- push another event into queue
        fill_queue(count,error);
        
        -- in case of error abandon
        if error then return end if;
        end loop;

      -- go trough the queue and return first event that match the filter
      loop
        if queue_data[i]^.event_type in event_filter then
          input_event:=queue_data[i];
          
          -- remove retruned event from the queue
          -- %% ©ezy pole ale tady stejnˆ nebude string ale list
          -- queue_data:=queue_data[0..i-1] & queue_data[i+1..queue_data:length]
          for j in queue_data:range loop
            if j<i then queue_data[j]:=queue_data[j];
            elsif j>i then queue_data[j-1]:=queue_data[j];
            end if;
            end loop;
          queue_data:length-1;
          return;
          end if;
        i+1;
        until i<=queue_data:length;
      end get_event;



    ------------------------------------------------------------------------------------------------
    static look_event =
    --
    ------------------------------------------------------------------------------------------------
    var   
      i            : t_unsigned32 := queue_data:first;
    
    begin 
      loop
        if queue_data[i]^.event_type in event_filter then
          input_event:=queue_data[i];
          return;
          end if;
        i+1;
        until i<=queue_data:length;
      end look_event;



    ------------------------------------------------------------------------------------------------
    static test_event =
    -- This method search through the [input_queue] and returns true if the queue contains an event
    -- specified by [event_filter].
    -- 
    -- Result:
    --   True if any input event from t_input_type_filter is found in queue
    --   Otherwise returns False.
    ------------------------------------------------------------------------------------------------
    var 
      i            : t_unsigned32 := queue_data:first;
      count        : t_unsigned;                 -- number of new event pushed into queue
    
    begin 
      -- test for existence of event
      while i<=queue_data:length loop;
        if queue_data[i]^.event_type in event_filter then
          result:=true;
          return;
          end if;
        i+1;
        end loop;
      end test_event;



    ------------------------------------------------------------------------------------------------
    static flush_queue =
    -- This method will remove all events that match with [event_filter] from [queue_data].
    --
    -- Result:
    --   This subprogram never fails.
    ------------------------------------------------------------------------------------------------
    var 
      i            : t_unsigned := queue_data:first;

    begin
      -- test for existence of event
      while i<=queue_data:length loop;
        if queue_data[i]^.event_type in event_filter then
          -- remove from queue
          -- remove retruned event from the queue
          -- %%TODO ©ezy pole ale tady stejnˆ nebude string ale list
          -- queue_data:=queue_data[0..i-1] & queue_data[i+1..queue_data:length]
          for j in queue_data:range loop
            if j<i then queue_data[j]:=queue_data[j];
            elsif j>i then queue_data[j-1]:=queue_data[j];
              end if;
            end loop;
          queue_data:length-1;
        else
          i+1;
          end if;
        end loop;
      end flush_queue;



    ------------------------------------------------------------------------------------------------
    entry =
    -- %% entry jen pro jistotu
    ------------------------------------------------------------------------------------------------
    begin
      -- stdin:=getstdhandle(std_input_handle);
      -- %% tady bych mˆl nastartovat thread kter˜ bude cp t ud losti do fronty
      end entry; 
  
    end c_input_queue;



end input;