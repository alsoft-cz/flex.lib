----------------------------------------------------------------------------------------------------
module private strings =
-- Character strings' manipulation.
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

with
  standard.characters,
  standard.characters.iso10646,
  standard.numerics;

----------------------------------------------------------------------------------------------------
procedure str_fill_character (
    fill           : in t_char32ustr:base;
    length         : in t_char32ustr:range)
    return t_char32str =
-- %%FLEX Temporary, to be removed when '[for 1..n use " "]' starts working.
----------------------------------------------------------------------------------------------------
begin
  for i in 1..length loop
    result & fill;
    end loop;
  end str_fill_character;



----------------------------------------------------------------------------------------------------
procedure str_adjust =
-- Adjusts the length of the given string [str] to be [length] characters.
----------------------------------------------------------------------------------------------------
begin
  -- check validity of parameters
  if pad_ends=t_str_end_set:[] or (trim_policy=st_yes and trim_ends=t_str_end_set:[]) then
    raise parameter_error;
    end if;

  -- pad string to required length
  if str:length<length then
    -- pad on the right side only
    if pad_ends=t_str_end_set:[se_right] then
      result:=str;
      for i in 1..length-str:length loop
        result & pad_with;
        end loop;
    { %%FLEX
      result:=str & [for 1..length-str:length use pad_with];
    }

    -- pad on the left side only
    elsif pad_ends=t_str_end_set:[se_left] then
      for i in 1..length-str:length loop
        result & pad_with;
        end loop;
      result & str;
    { %%FLEX
      result:=[for 1..length-str:length use pad_with] & str;
    }

    -- both
    else
    { %%FLEX
      result:=[for 1..(length-str:length) div 2 use pad_with]
              & str &
              [for 1..(length-str:length) div 2 use pad_with+(length-str:length) mod 2];
    }      
      result:=str_fill_character(pad_with,(length-str:length) div 2) 
              & str & 
              str_fill_character(pad_with,(length-str:length) div 2+(length-str:length) mod 2);
      end if;

  -- trim string to required length
  elsif str:length>length then
    case trim_policy
      -- trimming allowed
      when st_yes do
          -- trim on the right side only
          if trim_ends=t_str_end_set:[se_right] then
            for i in 1..length loop
              result & str[i];
              end loop;
          { %%FLEX
            result & [for 1..length use str[i]];
          }

          -- trim on the left side only
          elsif trim_ends=t_str_end_set:[se_left] then
            for i in str:length-length+1..str:length loop
              result & str[i];
              end loop;
          { %%FLEX
            result & [for str:length-lenght+1..str:length use str[i]];
          }

          -- trim on both sides only
          else
            for i in (str:length-length) div 2 + 1..(str:length-length) div 2 + length loop
              result & str[i];
              end loop;
          { %%FLEX
            result & [(str:length-length) div 2 + 1..(str:length-length) div 2 + length use str[i]];  
          }
            end if;

      -- trimming disabled
      when st_no do result:=str;

      -- trimming disallowed
      when st_error do raise string_error;
      end case;

  -- in all other cases return the original string
  else
    result:=str;
    end if;
  end str_adjust;



----------------------------------------------------------------------------------------------------
procedure str_trim =
-- Trims characters [trim] from string [str] on the defined sides [side] of string. 
----------------------------------------------------------------------------------------------------
var
  i                : t_char32ustr:range;
  j                : t_char32ustr:range;

begin
  -- do not trim the string
  if trim_ends=t_str_end_set:[] then
    result:=str;
    return;
    end if;

  -- count the trim ofset from left
  if se_left in trim_ends 
    then
      i:=str:first;
      while i<=str:length and then str[i]=trim loop
        succ i;
        end loop;
      -- no characters left
      if i>str:length then
        result:='';
        return;
        end if;
    else
      i:=str:first;
      end if;
  
  -- count the trim ofset from rigth
  if se_right in trim_ends 
    then
      j:=str:length;
      while j>=i and str[j]=trim loop 
        pred j;
        end loop;
      -- no characters left
      if j<i then
        result:='';
        return;
        end if;
    else
      j:=str:length;
      end if;

  -- trim the string
  for k in i..j loop
    result & str[k];
    end loop;
{ %%TODO(SLICE)
  result:=str[i..j];
}
  end str_trim;



----------------------------------------------------------------------------------------------------
procedure str_replace_character =
-- Replaces all occurences of the [old_char] character in [str] with the [new_char] character.
-- If the [old_char] equals to the [new_char] then the result equals to [str]. 
----------------------------------------------------------------------------------------------------
begin
  -- no replacement needs to be done
  if old_char=new_char then
    result:=str;
    return
    end if;

  for i in 1..str:length loop
    if str[i]=old_char then 
      result & new_char;
    else 
      result & str[i];
      end if;
    end loop;
    
  end  str_replace_character;



----------------------------------------------------------------------------------------------------
procedure str_replace_substring =
-- Replaces all occurences of the [old_substr] substring in [str] with the [new_substr] substring.
-- If the [old_substr] equals to the [new_substr] then the result equals to [str]. 
----------------------------------------------------------------------------------------------------
var
  i                : t_char32ustr:range;
  xsubstr          : t_char32str;                -- temporary to be removed


begin
  -- no replacement needs to be done
  if old_substr=new_substr then
    result:=str;
    return
    end if;

  i:=str:first;
  while i<=str:length loop
    -- compare substring
    str_copy(str,i,i+old_substr:length-1,xsubstr);
    if xsubstr=old_substr
  { %%FLEX
    if str[i..i+old_substr:length-1]=old_substr
  }
      -- match found
      then 
        -- replace
        result & new_substr;

        -- increment actual position by length of replaced substring
        i+old_substr:length;

      -- no match, copy actual character
      else 
        -- append original character to the result
        result & str[i];
        succ i;
        end if;
    end loop;  
  end str_replace_substring;



----------------------------------------------------------------------------------------------------
procedure str_remove_character =
-- Removes all occurences of the [char] character from the string [str].
----------------------------------------------------------------------------------------------------
begin
  for i in str:range loop
    if str[i]<>char then
      result & str[i];
      end if;
    end loop;
  end str_remove_character;



----------------------------------------------------------------------------------------------------
procedure str_remove_substring =
-- Removes all occurences of the [substr] substrings from the string [str].
----------------------------------------------------------------------------------------------------
var
  i                : t_char32ustr:range;
  xsubstr          : t_char32str;                -- temporary to be replaced

begin
  -- an empty substring needs not to be removed
  if substr='' then
    result:=str;
    return;
    end if;

  i:=str:first;
  while i<=str:length loop
    -- compare substring
    str_copy(str,i,i+substr:length-1,xsubstr);
    if xsubstr=substr
  { %%FLEX
    if str[i..i+substr:length-1]=substr
  }
      -- match found
      then 
        -- increment actual position by length of removed substring
        i+substr:length;

      -- no match, copy actual character
      else 
        -- append original character to the result
        result & str[i];
        succ i;
        end if;
    end loop;  
  
  end str_remove_substring;



----------------------------------------------------------------------------------------------------
procedure str_count_character =
-- Counts occurences of the [char] characters in [str]. 
----------------------------------------------------------------------------------------------------
begin
  for i in str:range loop
    if str[i]=char then
      result+1;
      end if;
    end loop;
  end str_count_character;



----------------------------------------------------------------------------------------------------
procedure str_pos_substring =
-- Returns position of first occurence of [substr] in [str].
--
-- Result:
--   This subprogram always succeeds.
--   If there is no occurence of [substr] in [str] subprogram returns 0.
----------------------------------------------------------------------------------------------------
var
  found            : t_logical;
  max_i            : t_unsigned;                 -- upper loop limit
  shift_k          : t_unsigned;                 -- K-shift size
  shift_l          : t_unsigned;                 -- L-shift size
  i                : t_unsigned;                 -- loop control variable
  str_len          : t_unsigned;                 -- [str:length]
  substr_len       : t_unsigned;                 -- [substr:length]

begin
  -- store lengths
  str_len:=str:length;
  substr_len:=substr:length;

  -- check lengths
  if str_len<substr_len then
    -- "substring" is longer the [str], it cannot be contained within...
    return;
    end if;

  -- special case (searching for one item)
  if substr_len=1 then
    result:=str_pos_character(str, substr[1]);
    return;
    end if;

  -- compute shifts
  if substr[1]=substr[2]
    then
      shift_k:=2;
      shift_l:=1;
    else
      shift_k:=1;
      shift_l:=2;
      end if;

  --%%TODO maybe some better algorithm (BM, KMP, ...)
  -- "Not So Naive" algorithm (http://www-igm.univ-mlv.fr/~lecroq/string/node13.html)
  i:=1;
  max_i:=str_len-substr_len+1;
  while i<=max_i loop
    if str[i+1]<>substr[2]
      then
        -- mismatch at the second character
        i + shift_k;
      else
        found:=true;
        for j in 3..substr_len loop
          if str[i+j-1]<>substr[j] then
            found:=false;
            break;
            end if;
          end loop;
        if found and then str[i]=substr[1] then
          result:=i;
          return;
          end if;
        i + shift_l;
        end if;
    end loop;
  end str_pos_substring;



----------------------------------------------------------------------------------------------------
procedure str_pos_character =
-- Returns position of first occurence of [char] in [str].
--
-- Result:
--   This subprogram always succeeds.
--   If there is no occurence of [char] in [str], subprogram returns 0.
----------------------------------------------------------------------------------------------------
begin
  for i in str:range loop
    if str[i]=char then
      result:=i;
      return;
      end if;
    end loop;
  end str_pos_character;



----------------------------------------------------------------------------------------------------
procedure str_count_substring =
-- Counts occurences of [substr] substrings in [str]. 
----------------------------------------------------------------------------------------------------
var
  i                : t_char32ustr:range;
  xsubstr          : t_char32str;                -- temporary to be replaced

begin
  -- the substring may not be empty
  if substr='' then
    raise parameter_error;
    return;
    end if;

  i:=str:first;
  while i<=str:length loop
    -- compare substring
    str_copy(str,i,i+substr:length-1,xsubstr);
    if xsubstr=substr
  { %%FLEX
    if str[i..i+substr:length-1]=substr
  }
      -- match found
      then 
        -- increment result
        succ result;

        -- increment actual position by length of found substring
        i+substr:length;

      -- no match found, increment look up position
      else
        succ i;
        end if;
    end loop;  
  end str_count_substring;



----------------------------------------------------------------------------------------------------
procedure str_separate =
-- Separates string [str] separated by character [separator] to string [_string] of strings .
-- Caller is responsible for freeing the allocated string [_string].
----------------------------------------------------------------------------------------------------
var 
  j                : t_char32str_string:range;
  count            : t_unsigned;

begin 
  -- count the substrings
  count:=str_count_character(str,separator);

  -- allocate [_string] to hold the resulting number of substrings
  new _string range count+1;
  _string^:length:=count+1;

  -- separate the original string into a list of substrings     
  j:=1;
  for i in str:range loop
    if str[i]<>separator 
      -- character is not a separator => append to the actual substring
      then 
        _string^[j] & str[i];

      -- character is a separator => move to next substring
      else
        -- increment index of the array
        succ j;
        end if;
    end loop;
    
rollback
  discard _string;
  end str_separate;



----------------------------------------------------------------------------------------------------
procedure str_combine =
-- Joins strings of an array [_array] into a string separated by character [separator].
----------------------------------------------------------------------------------------------------
begin 
{  for i in _string:range loop
    result & _string[i] & separator; 
    end loop;}
  for i in 1.._string:last-1 loop
    result & _string[i] & separator; 
    end loop;
  result & _string[_string:last];
  end str_combine;



----------------------------------------------------------------------------------------------------
procedure str_is_empty =
-- Return true if the [str] string is empty or contain only empty characters [char].
----------------------------------------------------------------------------------------------------
begin
  -- is string of a zero length ?
  if str:length<1 then
    result:=true;
    return;
    end if;

  -- does string contains only empty characters ?
  for i in str:range loop
    if str[i]<>char then
      -- does not!
      return;
      end if;
    end loop;

  -- string is empty
  result:=true;
  end str_is_empty;



----------------------------------------------------------------------------------------------------
procedure str_fill_substring =
-- Returns string of length filled with substrings [substr]. If the length of string [str] is
-- not divisible with length of substring [substr] then the last substring will be trimmed at 
-- the rigth end of it.
----------------------------------------------------------------------------------------------------
begin
  -- fill with whole substrings
  for i in 1..length div substr:length loop
    result & substr;
    end loop;

  -- fill the rest with substring trimmed from rigth
  for i in 1..length mod substr:length loop
    result & substr[i];
    end loop;
  end str_fill_substring;



----------------------------------------------------------------------------------------------------
procedure str_to_upper =
-- Converts all lower-case letters within <par>str</par> to corresponding upper-case letters. All
-- upper-case letters and non-letter characters remain unchanged. The result of the subprogram is
-- the converted string.
----------------------------------------------------------------------------------------------------
begin
  for i in str:range loop
    result & iso_char_to_upper(str[i]);
    end loop;
  end str_to_upper;



----------------------------------------------------------------------------------------------------
procedure str_to_lower =
-- Converts all upper-case letters within <par>str</par> to corresponding lower-case letters. All
-- lower-case letters and non-letter characters remain unchanged. The result of the subprogram is
-- the converted string.
----------------------------------------------------------------------------------------------------
begin
  for i in str:range loop
    result & iso_char_to_lower(str[i]);
    end loop;
  end str_to_lower;



----------------------------------------------------------------------------------------------------
procedure str_to_title =
-- Converts all letters within <par>str</par> to corresponding title-case string representation.
-- The first letter in a word i a title-case an the following are lower-case, all others remain 
-- unchanged.
----------------------------------------------------------------------------------------------------
var
  first            : t_logical:=true;              -- first letter in a word

begin
  for i in str:range loop
    if first 
      then
        if iso_char_is_letter(str[i]) then
          -- this is first => so the next one is not
          first:=false;
          result & iso_char_to_title(str[i]);
          end if;
      else
        result & iso_char_to_lower(str[i]);
        if not iso_char_is_lower(result[i]) then
          -- is not a letter => next letter is first in a word
          first:=true;
          end if;
        end if;
    end loop;
  end str_to_title;



----------------------------------------------------------------------------------------------------
procedure str_copy =
-- Copies a substring of string [str] from position [_start] to position [_stop] into [result].
----------------------------------------------------------------------------------------------------
var
  tmp_result       : p_char32ustr;

begin
  -- in order to handle str_copy(str,_,_,str), we have to use a temporary buffer instead of
  -- modifying result directly
  new tmp_result range 1+_end-_start;
  for i in _start..min_unsigned(_end,str:length) loop
    tmp_result^ & str[i];
    end loop;
  result:=tmp_result^;
leave
  discard tmp_result;
  end str_copy;       



----------------------------------------------------------------------------------------------------
procedure str_create_copy =
-- Returns a new instance of string [scr] from position [_start] to position [_stop] as a pointer 
-- [dest].
--
-- This subprogram is only temprorary and needs to be removed.
----------------------------------------------------------------------------------------------------
begin
  new dest range _end-_start+1;
  for i in _start..min_unsigned(_end,src:length) loop
    dest^ & src[i];
    end loop;
  end str_create_copy;       



----------------------------------------------------------------------------------------------------
procedure str_compare_case_insensitive =
-- Case-insensitive comparison of strings [A] and [B].
--
-- Result:
--   The return value is [true], if the strings are equal except for casing, and [false] otherwise.
----------------------------------------------------------------------------------------------------
begin
  -- two strings of distinct sizes are always considered unequal
  if A:length<>B:length then
    return;
    end if;

  -- compare both strings
  for i in A:range loop
    if iso_char_to_lower(A[i])<>iso_char_to_lower(B[i]) then
      return;
      end if;
    end loop;

  -- the two strings are equal
  result:=true;
  end str_compare_case_insensitive;



----------------------------------------------------------------------------------------------------
procedure str_hash =
-- Returns a hash of the string.
----------------------------------------------------------------------------------------------------
var
  hash             : t_mod_unsigned;
begin
  hash:=0;
  for i in str:range loop
    hash:=hash*31 + t_mod_unsigned(str[i]:ord);
    end loop;
  result:=t_unsigned(hash);
  end str_hash;


----------------------------------------------------------------------------------------------------
#separate private dynamic;
----------------------------------------------------------------------------------------------------

end strings;