----------------------------------------------------------------------------------------------------
module private console =
-- Console I/O.
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

with
  standard.input,
  standard.characters,
  standard.characters.unicode;

const
    -- write
    t_dpss_con_set_pos   : t_unsigned = 1001;    -- set cursor position
    t_dpss_con_clear     : t_unsigned = 1002;    -- clear console
    t_dpss_con_fgcolor   : t_unsigned = 1003;    -- set ink color
    t_dpss_con_bgcolor   : t_unsigned = 1004;    -- set paper color

    -- read
    t_dpss_con_event     : t_unsigned = 1501;    -- console event


----------------------------------------------------------------------------------------------------
#separate private streams;
----------------------------------------------------------------------------------------------------
#separate private formatters;
----------------------------------------------------------------------------------------------------
  
var
    stdout_stream  : streams.p_console_output_stream;
    stdout_redir   : p_output_stream_redirector;

    stderr_stream  : streams.p_console_output_stream;
    stderr_redir   : p_output_stream_redirector;

    stdin_stream   : streams.p_console_input_stream;
    stdin_redir    : p_input_stream_redirector;

    stdout_writer  : formatters.p_console_text_writer;
    stderr_writer  : formatters.p_console_text_writer;
    stdin_reader   : formatters.p_console_text_reader;



----------------------------------------------------------------------------------------------------
procedure read_event =
----------------------------------------------------------------------------------------------------
begin
  stdin_stream^.set_mode(t_im_all_events_no_echo);
  stdin_reader^.read_event(event,eod);
  end read_event;



----------------------------------------------------------------------------------------------------
procedure read_mouse =
----------------------------------------------------------------------------------------------------
begin
  stdin_stream^.set_mode(t_im_mouse_events_no_echo);
  loop
    stdin_reader^.read_event(mouse,eod);
    until not eod or mouse.event_code=t_ec_mouse_move;
  end read_mouse;



----------------------------------------------------------------------------------------------------
procedure read_key =
----------------------------------------------------------------------------------------------------
begin
  stdin_stream^.set_mode(t_im_key_events_no_echo);
  loop
    stdin_reader^.read_event(key,eod);
    until not eod or key.event_code<>t_ec_mouse_move;
  end read_key;



----------------------------------------------------------------------------------------------------
procedure key_pressed =
----------------------------------------------------------------------------------------------------
begin
  result:=stdin_stream^.key_pressed;
  end key_pressed;


----------------------------------------------------------------------------------------------------
procedure get_cursor_position =
----------------------------------------------------------------------------------------------------
begin
  stdin_stream^.get_cursor_position(pos);
  end get_cursor_position;



----------------------------------------------------------------------------------------------------
procedure get_console_size =
----------------------------------------------------------------------------------------------------
begin
  stdin_stream^.get_console_size(pos);
  end get_console_size;



----------------------------------------------------------------------------------------------------
procedure read_char =
----------------------------------------------------------------------------------------------------
begin
  stdin_stream^.set_mode(mode);
  console_reader^.read_char(s,eod);
  end read_char;



----------------------------------------------------------------------------------------------------
procedure read =
----------------------------------------------------------------------------------------------------
begin
  stdin_stream^.set_mode(mode);
  console_reader^.read(s,eod);
  end read;



----------------------------------------------------------------------------------------------------
procedure read_line =
----------------------------------------------------------------------------------------------------
begin
  stdin_stream^.set_mode(mode);
  console_reader^.read_line(s,eod);
  end read_line;



----------------------------------------------------------------------------------------------------
procedure input_char =
----------------------------------------------------------------------------------------------------
var
    eod            : t_logical;

begin
  read_char(s,eod,mode);
  if eod then
    raise stream_end_of_data;
    end if;
  end input_char;



----------------------------------------------------------------------------------------------------
procedure input =
----------------------------------------------------------------------------------------------------
var
    eod            : t_logical;

begin
  read(s,eod,mode);
  if eod then
    raise stream_end_of_data;
    end if;
  end input;



----------------------------------------------------------------------------------------------------
procedure input_line =
----------------------------------------------------------------------------------------------------
var
    eod            : t_logical;

begin
  read_line(s,eod,mode);
  if eod then
    raise stream_end_of_data;
    end if;
  end input_line;



----------------------------------------------------------------------------------------------------
procedure input_key =
----------------------------------------------------------------------------------------------------
var
    eod            : t_logical;

begin
  read_key(key,eod);
  if eod then
    raise stream_end_of_data;
    end if;
  end input_key;



----------------------------------------------------------------------------------------------------
procedure write_char =
----------------------------------------------------------------------------------------------------
begin
  console_writer^.write_char(s);
  end write_char;



----------------------------------------------------------------------------------------------------
procedure write =
----------------------------------------------------------------------------------------------------
begin
  console_writer^.write(s);
  end write;



----------------------------------------------------------------------------------------------------
procedure write_line =
----------------------------------------------------------------------------------------------------
begin
  console_writer^.write_line(s);
  end write_line;



----------------------------------------------------------------------------------------------------
procedure set_cursor_position =
----------------------------------------------------------------------------------------------------
begin
  stdout_writer^.set_cursor_position(pos);
  end set_cursor_position;



----------------------------------------------------------------------------------------------------
procedure clear_console =
----------------------------------------------------------------------------------------------------
begin
  stdout_writer^.clear_console;
  end clear_console;



----------------------------------------------------------------------------------------------------
procedure set_foreground_color =
----------------------------------------------------------------------------------------------------
begin
  stdout_writer^.set_foreground_color(color);
  end set_foreground_color;



----------------------------------------------------------------------------------------------------
procedure set_background_color =
----------------------------------------------------------------------------------------------------
begin
  stdout_writer^.set_background_color(color);
  end set_background_color;



----------------------------------------------------------------------------------------------------
entry =
-- Module initialization.
----------------------------------------------------------------------------------------------------
begin
  -- initialize the console output stream
  new stdout_stream;
  stdout_stream^.init_console(false);

  -- redirector
  new stdout_redir;
  stdout_redir^.init_output_redirector(stdout_stream);
  console_output:=^c_output_stream:(stdout_redir^);

  -- writer
  new stdout_writer;
  stdout_writer^.init_text_writer(console_output);
  console_writer:=^c_text_writer:(stdout_writer^);

  -- initialize the console error stream
  new stderr_stream;
  stderr_stream^.init_console(true);

  -- redirector
  new stderr_redir;
  stderr_redir^.init_output_redirector(stderr_stream);
  console_error_output:=^c_output_stream:(stderr_redir^);

  -- writer
  new stderr_writer;
  stderr_writer^.init_text_writer(console_error_output);
  console_error_writer:=^c_text_writer:(stderr_writer^);

  -- initialize the console input stream
  new stdin_stream;
  stdin_stream^.init_console;

  -- redirector
  new stdin_redir;
  stdin_redir^.init_input_redirector(stdin_stream);
  console_input:=^c_input_stream:(stdin_redir^);

  -- writer
  new stdin_reader;
  stdin_reader^.init_text_reader(console_input);
  console_reader:=^c_text_reader:(stdin_reader^);
  end entry;



----------------------------------------------------------------------------------------------------
exit =
-- Module finalization.
----------------------------------------------------------------------------------------------------
begin
  discard stdout_writer;
  discard stdout_redir;
  discard stdout_stream;

  discard stderr_writer;
  discard stderr_redir;
  discard stderr_stream;

  discard stdin_reader;
  discard stdin_redir;
  discard stdin_stream;
  end exit;
end console;