----------------------------------------------------------------------------------------------------
procedure create_eod =
----------------------------------------------------------------------------------------------------
begin
  packet.style:=t_dps_signal;
  packet.signal:=t_dpss_eod;
  end create_eod;



----------------------------------------------------------------------------------------------------
procedure create_flush =
----------------------------------------------------------------------------------------------------
begin
  packet.style:=t_dps_signal;
  packet.signal:=t_dpss_flush;
  end create_flush;


----------------------------------------------------------------------------------------------------
procedure create_signal =
----------------------------------------------------------------------------------------------------
begin
  packet.style:=t_dps_signal;
  packet.signal:=signal;
  packet.signal_data:=userdata;
  end create_signal;



----------------------------------------------------------------------------------------------------
procedure create_temporary_text =
----------------------------------------------------------------------------------------------------
begin
  packet.style:=t_dps_temporary;
  packet.size:=text:length*t_char32:size;
  packet.data:unchecked:=^text:unchecked;
  t_unsigned(packet.data:unchecked) + t_unsigned:size;
  packet.phint:=t_dph_flex_string;
  end create_temporary_text;



----------------------------------------------------------------------------------------------------
procedure create_packet =
----------------------------------------------------------------------------------------------------
begin
  packet.style:=style;
  packet.size:=size;
  packet.data:=data;
  end create_packet;



----------------------------------------------------------------------------------------------------
procedure copy_to_packet =
----------------------------------------------------------------------------------------------------
begin
  packet.style:=t_dps_heap;
  packet.size:=size;
  new packet.data range size;
  --%%TODO rez polem
  copy_data(data,0,packet.data,0,size);
  end copy_to_packet;



----------------------------------------------------------------------------------------------------
procedure deep_copy =
----------------------------------------------------------------------------------------------------
var
    data           : p_data_array;
    size           : t_offset;

begin
  outpacket:=inpacket;
  case (inpacket.style)
    when t_dps_signal do
    when t_dps_other do
      inpacket.other^.copy^(inpacket,outpacket);
    when others do
      read_packet(inpacket,data,size);
      copy_to_packet(outpacket,data,size);
    end case;
  end deep_copy;



----------------------------------------------------------------------------------------------------
procedure discard_packet =
----------------------------------------------------------------------------------------------------
var
  heap             : p_data_array;

begin
  case (packet.style)
    when t_dps_heap do
      heap:=packet.data;
      discard heap;
    when t_dps_signal do
      if packet.other<>nil then
        heap:=packet.signal_data;
        discard heap;
        end if;
    when t_dps_other do
      packet.other^.dispose^(packet);
    when others do
      -- nothing
    end case;
  --packet:=nil;
  end discard_packet;



----------------------------------------------------------------------------------------------------
procedure read_packet =
----------------------------------------------------------------------------------------------------
begin
  case (packet.style)
    when t_dps_other do
      packet.other^.read^(packet,data,size);
    when others do
      data:=packet.data;
      size:=packet.size;
    end case;
  end read_packet;



----------------------------------------------------------------------------------------------------
procedure read_temporary_text = 
----------------------------------------------------------------------------------------------------
var
    ptr            : t_unsigned;

begin
  if packet.style<>t_dps_temporary or else packet.phint<>t_dph_flex_string then
    raise program_error;
    end if;
  ptr:unchecked:=packet.data:unchecked;
  ptr - t_unsigned:size;
  text:unchecked:=ptr;
  end read_temporary_text;




----------------------------------------------------------------------------------------------------
procedure copy_from_packet =
----------------------------------------------------------------------------------------------------
var
  read             : t_offset;
  pdata            : p_data_array;
  psize            : t_offset;

begin
  case (inpacket.style)
    when t_dps_other do
      inpacket.other^.read^(inpacket,pdata,psize);
    when others do
      pdata:=inpacket.data;
      psize:=inpacket.size;
    end case;

  read:=psize-inoffset;
  if read>size then
    read:=size;
    end if;

  --%%TODO rez polem
  copy_data(pdata,inoffset,outdata,outoffset,read);

  outoffset + read;
  inoffset + read;
  end copy_from_packet;



----------------------------------------------------------------------------------------------------
procedure copy_text_to_packet =
----------------------------------------------------------------------------------------------------
var
  data             : p_data_array;

begin
  data:unchecked:=^text:unchecked;
  t_unsigned(data:unchecked) + t_unsigned:size;
  packet.style:=t_dps_heap;
  packet.size:=text:length*t_char32:size;
  new packet.data range packet.size;
  --%%TODO rez polem
  copy_data(data,0,packet.data,0,packet.size);
  end copy_text_to_packet;


----------------------------------------------------------------------------------------------------
procedure realloc_packet =
----------------------------------------------------------------------------------------------------
var
    _data          : p_data_array;
    _size          : t_offset;
    _new           : p_data_array;
    _out           : t_data_packet;

begin
  read_packet(packet,_data,_size);
  size:=_size+newbytes;
  _out.style:=t_dps_heap;
  _out.size:=size;
  --%%TODO realoc by flex adjust
  new _out.data range size;
  --%%TODO rez polem
  copy_data(_data,0,_out.data,0,_size);
  --end %%TODO realoc by flex adjust
  data:=_out.data;
  discard_packet(packet);
  packet:=_out;
  end realloc_packet;


----------------------------------------------------------------------------------------------------
procedure copy_data =
----------------------------------------------------------------------------------------------------
begin
  --%%TODO rez polem
  -- fuj
  if size>0 then
    for i in 0..(size-1) loop
      outdata^[i+outoffset]:=indata^[i+inoffset];
      end loop;
    end if;
  end copy_data;