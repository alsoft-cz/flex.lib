----------------------------------------------------------------------------------------------------
module private characters =
-- Character manipulation for different code page standards (ASCII, UNICODE, ISO 10646)
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
#separate private ascii;
-- Support for 8bit ASCII character coding.
----------------------------------------------------------------------------------------------------
#separate private unicode;
-- Support for 16bit UNICODE character coding.
----------------------------------------------------------------------------------------------------
#separate private iso10646;
-- Support for 32bit ISO 10646 character coding.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class private abstract c_character_decoder =
-- Character decored.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static finalize_input =
    -- Informs the decoder, that there will be no more input character. The decored checks if 
    -- decoding of the last character was finalized. When not, <ent>character_decoder_error</ent> is 
    -- raised, otherwise no action is taken.
    ------------------------------------------------------------------------------------------------
    begin
      -- check if a character is already prepared
      if not char_prepared then
        raise character_decoder_error;
        end if;
      end finalize_input;



    ------------------------------------------------------------------------------------------------
    static set_endian =
    -- sets byte order of input bytes
    ------------------------------------------------------------------------------------------------
    begin
      endian:=new_endian;
      end set_endian;


    
    ------------------------------------------------------------------------------------------------
    static get_character =
    -- Returns the lastly decoded character.
    ------------------------------------------------------------------------------------------------
    begin 
      -- check if a character is already prepared
      if not char_prepared then
        raise character_decoder_error;
        end if;

      -- return the lastly decoded character
      result:=c;
      end get_character;

    end c_character_decoder;



----------------------------------------------------------------------------------------------------
class private c_character_decoder_ascii =
-- ASCII (8bit) character decoder.
----------------------------------------------------------------------------------------------------

    var
      cp           : p_code_page;                -- code-page used for character translation

    ------------------------------------------------------------------------------------------------
    static set_codepage =
    -- Assign a code-page table to the decoder. From now on, the input characters are translated 
    -- to ISO 10646 by looking up in this table. 
    ------------------------------------------------------------------------------------------------
    begin  
      this.cp:=cp;
      end set_codepage;



    ------------------------------------------------------------------------------------------------
    override put_byte =
    -- Feeds in a single byte of input. 
    ------------------------------------------------------------------------------------------------
    begin
      -- suppose character is not prepared
      char_prepared:=false;
      if cp<>nil
        then c:=cp^[t_char8(b)];
        else c:=t_char32(b);
        end if;

      char_prepared:=true;
      char_done:=char_prepared;
      end put_byte;

    end c_character_decoder_ascii;



----------------------------------------------------------------------------------------------------
class private c_character_decoder_utf8 = 
-- UTF-8 decoder.
----------------------------------------------------------------------------------------------------

    var 
      n              : t_unsigned8;              -- number of bytes to follow
                                                 -- the n is determined by the first byte 

    ------------------------------------------------------------------------------------------------
    override put_byte =
    -- Feeds in a single byte of input. 
    ------------------------------------------------------------------------------------------------

        --------------------------------------------------------------------------------------------
        #template set_c (and_mask,shift_count);
        --------------------------------------------------------------------------------------------
          t_mod_unsigned32(c:ord):=(t_mod_unsigned32(b) and and_mask) shl shift_count;
          #end set_c;

        --------------------------------------------------------------------------------------------
        #template add_c (and_mask,shift_count);
        --------------------------------------------------------------------------------------------
          t_mod_unsigned32(c:ord) + (t_mod_unsigned32(b) and and_mask) shl shift_count;
          #end add_c;

    var
      may_be_ill   : t_unsigned8;                -- T-if this byte sequence may form an 
                                                 -- ill-formed character 

    begin
      -- suppose character is not prepared
      char_prepared:=false;

      if n=0

        -- first byte
        then
          -- clear the last character
          c:=\0;

          -- ASCII character
          if b>=$00 and b<=$7f then
            c:=t_char32(b);
            char_prepared:=true;
            n:=0;

          -- first of two byte sequence
          elsif b>2$1100_0000 and b<=2$1101_1111 then
            -- illegal character
            if b<2$1100_0010 then
              raise character_decoder_error;
              end if;

            set_c($1F,6);
            n:=1;

          -- first of three byte sequence
          elsif b>=2$1110_0000 and b<=2$1110_1111 then
            if b=$E0 or b=$ED or b=$F0 or b=$F4 
              -- next bytes may form an illegal character
              then may_be_ill:=b;
              -- this may be a valid character
              else may_be_ill:=0;
              end if;

            set_c($0F,12);
            n:=2;

          -- first of four byte sequence
          elsif b>=2$1111_0000 and b<=2$1111_0111 then
            set_c($07,18)
            n:=3;

          -- all other values are not allowed
          else
            raise character_decoder_error;
            end if;

        -- other bytes  
        else
          -- must be within a specific range
          if not (b>=$80 and b<=$BF) then
            raise character_decoder_error;
            end if;

          -- last byte
          if n=1 then
            add_c($3F,0);
            char_prepared:=true;
            n:=0;
            if c=\$0000feff then
              -- byte order mark, eat it
              char_prepared:=false;
              end if;  

          -- the one before last byte
          elsif n=2 then
            -- check for illegal formation
            if (may_be_ill=$E0 and b<$A0)
            or (may_be_ill=$ED and b>$9F) then
              raise character_decoder_error;
              end if;

            add_c($3F,6);
            n-1;

          -- second before last byte
          elsif n=3 then
            -- check for illegal formation
            if (may_be_ill=$F0 and b<$90)
            or (may_be_ill=$F4 and b>$8F) then
              raise character_decoder_error;
              end if;

            add_c($3F,12);
            n-1;

          -- all other values are not allowed
          else
            raise character_decoder_error;
            end if;           
          end if;

      char_done:=char_prepared;
      end put_byte;

    end c_character_decoder_utf8;



----------------------------------------------------------------------------------------------------
class private c_character_decoder_utf16 = 
-- UTF-16 decoder.
----------------------------------------------------------------------------------------------------

    var 
      even           : t_logical;                -- even byte in a sequence of input bytes
      first_surrogate: t_logical := true;        -- T- first of two 16 bit sequences
      tmp16bit       : t_mod_unsigned16;         -- temporary 16 bit sequence
      wwww           : t_mod_unsigned8;          -- wwww part a scalar value
      zzzz           : t_mod_unsigned8;          -- zzzz part a scalar value
      yyyyyy         : t_mod_unsigned8;          -- yyyyyy part a scalar value
      xxxxxx         : t_mod_unsigned8;          -- xxxxxx part a scalar value
      
    ------------------------------------------------------------------------------------------------
    override put_byte =
    -- Feeds in a single byte of input. 
    ------------------------------------------------------------------------------------------------
    var
      bmp            : t_logical;                -- the character is from bmp
                     
    begin
      -- suppose character is not prepared
      char_prepared:=false;

      -- check for input byte order
      if endian=te_little_endian

        -- little endian
        then
          if not even 
            -- even byte is a high order one
            then tmp16bit:=t_mod_unsigned16(b);
            else tmp16bit + t_mod_unsigned16(b) shl 8;
            end if;

        -- big endian
        else
          if even
            -- even byte is a low order one
            then tmp16bit + t_mod_unsigned16(b);
            else tmp16bit:=t_mod_unsigned16(b) shl 8;
            end if;

          end if;

      -- next will proceed each time we get an even byte
      if even then

        if first_surrogate
          -- first surrogate
          then
            if (tmp16bit shr 10)=2$110110
              -- high surrogate byte (110110ww wwzzzzyy)
              then
                wwww  :=(tmp16bit and 2$1111_0000_00) shr 6;
                zzzz  :=(tmp16bit and 2$1111_00) shr 2;
                yyyyyy:=(tmp16bit and 2$11);
                bmp   :=false;
                first_surrogate:=false;
              
              -- character is from bmp (16bit only)
              else
                -- check for Byte Order Mark
                if tmp16bit=$FFFE then
                  -- convert to $feff
                  tmp16bit:=$FEFF;

                  -- swith endian
                  if endian=te_little_endian 
                    then set_endian(te_big_endian);
                    else set_endian(te_little_endian);
                    end if;
                
                  end if;

                t_mod_unsigned32(c:ord):=tmp16bit;
                bmp:=true;
            
                -- character is prepared
                char_prepared:=true;
                end if;

          -- second surrogate
          else
            if (tmp16bit shr 10)=2$110111
              -- low surrogate byte (110111yy yyxxxxxx)
              then
                yyyyyy+((tmp16bit and 2$1111_000000) shr 6);
                xxxxxx:=(tmp16bit and 2$111111);

                -- next will be first surrogate
                first_surrogate:=true;

              -- anything else is an error
              else 
                raise character_decoder_error;
                end if;

            end if;

          -- count the resulting 32bit ordinal value of a character
          -- if second surrogate is not or a character is from bmp
          if first_surrogate and not bmp then

            -- if c is a character from bmp it is already counted
            if not bmp then
              t_mod_unsigned32(c:ord):=((t_mod_unsigned32(wwww  )+1) shl 16) +
                                        (t_mod_unsigned32(zzzz  ) shl 12) +
                                        (t_mod_unsigned32(yyyyyy) shl 6) +
                                         t_mod_unsigned32(xxxxxx);
              end if;

            -- character is prepared
            char_prepared:=true;
            end if;
        end if;

      -- if this was even byte in sequence the next must be odd etc.
      even:=not even;

      char_done:=char_prepared;
      end put_byte;

    end c_character_decoder_utf16;



----------------------------------------------------------------------------------------------------
class private c_character_decoder_ucs2 = 
-- UCS-2 decoder.
----------------------------------------------------------------------------------------------------

    var
      first        : t_logical:=true;            -- first of two 8bit bytes
    
    ------------------------------------------------------------------------------------------------
    override put_byte =
    -- Feeds in a single byte of input. 
    ------------------------------------------------------------------------------------------------
    begin
      -- suppose character is not prepared
      char_prepared:=false;

      if first 
        -- this is for first of two 8bit bytes
        then
          {if endian=te_little_endian 
            then c:ord:=b;
            else} t_mod_unsigned32(c:ord) := t_mod_unsigned32(b);
              {end if;}
          first:=false;

        -- this is for second of two 8bit bytes
        else 
          {if endian=te_big_endian 
            then} t_mod_unsigned32(c:ord) + t_mod_unsigned32(b) shl 8;
            {else c:ord + (b shl 8);
              end if;}
         
          {-- control for BOM
          if c:ord=$fffe then
            -- convert c to $feff
            c:ord:=$feff;

            --switch_endian;
            if endian=te_little_endian 
              then set_endian(te_big_endian);
              else set_endian(te_little_endian);
              end if;

            end if;}
                 
          -- character is prepared 
          char_prepared:=true;
          first:=true;
          end if;                     
      
      char_done:=char_prepared;    
      end put_byte;

    end c_character_decoder_ucs2;



----------------------------------------------------------------------------------------------------
class private c_character_decoder_ucs4 = 
-- UCS-4 decoder.
----------------------------------------------------------------------------------------------------

    var
      n            : t_unsigned8;                -- byte sequence counter

    ------------------------------------------------------------------------------------------------
    override put_byte =
    -- Feeds in a single byte of input. 
    ------------------------------------------------------------------------------------------------
    begin
      -- suppose character is not ready
      char_prepared:=false;
      case n
        when 0 do
          {if endian=te_little_endian
            then c:ord:=b;
            else} t_mod_unsigned32(c:ord):=t_mod_unsigned32(b) shl 24;
            {end if;}
          n+1;

        when 1 do
          {if endian=te_little_endian
            then c:ord + b shl 8;
            else} t_mod_unsigned32(c:ord) + t_mod_unsigned32(b) shl 16;
            {end if;}
          n+1;

        when 2 do 
          {if endian=te_little_endian
            then c:ord + b shl 16;
            else} t_mod_unsigned32(c:ord) + t_mod_unsigned32(b) shl 8;
            {end if;}
          n+1;

        when 3 do
          {if endian=te_little_endian
            then c:ord + b shl 24;
            else} t_mod_unsigned32(c:ord) + t_mod_unsigned32(b);
            {end if;}
          n:=0;

          {-- control for BOM
          if c:ord=$fffe0000 then
            -- convert character to $feff
            c:ord:=$feff;

            --switch_endian;
            if endian=te_little_endian 
              then set_endian(te_big_endian);
              else set_endian(te_little_endian);
              end if;

            end if;}
          
          -- character is prepared
          char_prepared:=true;

        when others do 
          raise character_decoder_error;
          end case;

      char_done:=char_prepared;
      end put_byte;

    end c_character_decoder_ucs4;



----------------------------------------------------------------------------------------------------
class private abstract c_character_encoder =
-- Character encored.
----------------------------------------------------------------------------------------------------

    var 
      n            : t_unsigned8;                -- output bytes counter

    ------------------------------------------------------------------------------------------------
    virtual set_endian =
    -- Sets byte order of output bytes and puts character $feff at the begining of output where
    -- applicable.
    ------------------------------------------------------------------------------------------------
    begin 
      endian:=new_endian;
      finalize_output;
      end set_endian;


    
    ------------------------------------------------------------------------------------------------
    static finalize_output =
    -- Informs the encoder, that there will be no more output character. The decored checks if 
    -- all encoded bytes were retrieved. When not, <ent>character_encoder_error</ent> is 
    -- raised, otherwise <ent>output_bytes</ent> and <ent>bytes_out</ent> are cleared.
    ------------------------------------------------------------------------------------------------
    begin
      -- check if a character is already prepared
      if bytes_out<output_bytes:length then
        raise character_encoder_error;
        end if;

      -- clear output variables
      output_bytes:=nil;
      bytes_out:=0;
      end finalize_output;



    ------------------------------------------------------------------------------------------------
    static get_output =
    -- Returns one byte of encoded character, and sets <ent>all_out</ent> to True when there is no
    -- more bytes to complete this encoding.
    ------------------------------------------------------------------------------------------------
    begin 
      -- check if there is anything to output
      if output_bytes:length=0 then
        raise character_encoder_error;
        end if;

      -- set entry expectaions
      all_out:=false;
      if n<1 then
        n:=1;
        end if;

      -- output byte
      b:=output_bytes[n];
      n+1;
      bytes_out+1;

      -- arrangements after last byte of sequence is output
      if n>output_bytes:length then
        all_out:=true;
        n:=1;
        bytes_out:=0;
        output_bytes:=nil;
        end if;       
      end get_output;

    end c_character_encoder;



----------------------------------------------------------------------------------------------------
class private c_character_encoder_ascii = 
-- ASCII (8bit) character encoder.
----------------------------------------------------------------------------------------------------

    var
      cp           : p_code_page;                -- code-page used for character translation

    ------------------------------------------------------------------------------------------------
    static set_codepage = 
    -- Assign a code-page table to the encoder. From now on, the input characters are translated 
    -- from ISO 10646 by looking up in this table. 
    ------------------------------------------------------------------------------------------------
    begin
      this.cp:=cp;
      end set_codepage;


    
    ------------------------------------------------------------------------------------------------
    override put_character =
    -- Feeds in a single character. 
    ------------------------------------------------------------------------------------------------
    {#if #declared radekr; #and then; radekr;
    var 
      i            : t_code_page:range;          -- index
      found        : t_logical;                  -- character was found in the codepage table
      depth        : t_unsigned8;
    #end if;}
    
    begin 
    --#if #declared radekr; #and then; radekr then;
      -- %% not finished debug and testing purposes implementation
      -- clear output
      output_bytes:=nil;

      output_bytes & t_unsigned8(c:ord);
      
    {  -- raise feature_not_implemented;
      %%TODO translation from 32bit to 8bit basically finish this function
              nedokonÄŤeno protoĹľe nenĂ­ jistĂ© jak se budou mapovat rĹŻznĂ© kĂłdovĂ© strĂˇnky

      
      -- clear output
      output_bytes:=nil;

      if cp<>nil
        -- we know the codepage
        then 
          i:=0;
          -- find character in codepage table
          while depth<8 loop
            k:=1;
            for j in 1..7-depth loop
              k*2;
              end loop;
            if cp^[i].char32<c then
              i + k;
            elsif cp^[i].char32>c then
              if i<k*2 then
                raise character_encoder_error;
                end if;
              i - k*2;
            else 
              fourd:=true;
              output_bytes & cp^[i].char8:ord;
              return;
              end if;

            depth+1;
            end loop;

          if not found then 
            raise character_encoder_error;
            end if;

        -- we don't know the codepage
        else 
          if c:ord>$ff then
            raise character_encoder_error;
            end if;
          output_bytes & t_unsigned8(c:ord);
        end if;}
    --#else;  
    --  raise feature_not_implemented;
    --#end if;
      end put_character;
    end c_character_encoder_ascii;



----------------------------------------------------------------------------------------------------
class private c_character_encoder_utf8 =
-- UTF-8 decoder.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override set_endian =
    -- Sets byte order of output bytes and puts character $feff at the begining of output where
    -- applicable.
    ------------------------------------------------------------------------------------------------
    begin
{      %%TODO(INHERITED)}
      endian:=new_endian;
      finalize_output;
      if endian=te_little_endian
        then output_bytes:=[$FF,$FE];
        else output_bytes:=[$FE,$FF];
        end if;
      bytes_ready:=true;
      end set_endian;

    
    
    ------------------------------------------------------------------------------------------------
    override put_character =
    -- Feeds in a single character.
    ------------------------------------------------------------------------------------------------
    begin 
      -- clear output
      output_bytes:=nil;

      -- character is an overrange character 
      if c:ord>$10fffd then
        raise character_encoder_error;

      -- one byte sequence
      elsif c:ord<=$7F then
        output_bytes & t_unsigned8(c:ord);

      -- two byte sequence
      elsif c:ord<=2$11111_111111 then
        output_bytes & t_unsigned8(2$110_00000 or (t_mod_unsigned32(c:ord) shr 6))
                     & t_unsigned8(2$10_000000 or (t_mod_unsigned32(c:ord) and 2$111111));

        -- check for illegal characters
        if output_bytes[1]<$c2 then
          raise character_encoder_error;
          end if;

      -- three byte sequence
      elsif c:ord<=2$1111_111111_111111 then
        output_bytes & t_unsigned8(2$1110_0000 or (t_mod_unsigned32(c:ord) shr 12))
                     & t_unsigned8(2$10_000000 or (t_mod_unsigned32(c:ord) shr 6 and 2$111111))
                     & t_unsigned8(2$10_000000 or (t_mod_unsigned32(c:ord) and 2$111111));

        -- check for illegal characters
        if (output_bytes[1]=$e0 and output_bytes[2]<$a0)
        or (output_bytes[1]=$ed and output_bytes[2]>$9f) then
          raise character_encoder_error;
          end if;

      -- four byte sequence
      elsif c:ord<=2$11111_1111_111111_111111 then
        output_bytes & t_unsigned8(2$11110_000 or (t_mod_unsigned32(c:ord) shr 18))
                     & t_unsigned8(2$10_000000 or (t_mod_unsigned32(c:ord) shr 12 and 2$111111))                    
                     & t_unsigned8(2$10_000000 or (t_mod_unsigned32(c:ord) shr 6 and 2$111111))
                     & t_unsigned8(2$10_000000 or (t_mod_unsigned32(c:ord) and 2$111111));

        -- check for illegal characters
        if (output_bytes[1]=$F0 and output_bytes[2]<$90)
        or (output_bytes[1]=$F4 and output_bytes[2]>$8F) then
          raise character_encoder_error;
          end if;

      -- anything else is wrong
      else 
        raise character_encoder_error;
        end if;
      end put_character;

    end c_character_encoder_utf8;



----------------------------------------------------------------------------------------------------
class private c_character_encoder_utf16 = 
-- UTF-16 decoder.
----------------------------------------------------------------------------------------------------
       
    ------------------------------------------------------------------------------------------------
    override set_endian =
    -- Sets byte order of output bytes and puts character $feff at the begining of output where
    -- applicable.
    ------------------------------------------------------------------------------------------------
    begin 
{     %%TODO(INHERITED)}
      endian:=new_endian;
      finalize_output;
      if endian=te_little_endian 
        then output_bytes:=[$FF,$FE];
        else output_bytes:=[$FE,$FF];
        end if;
      bytes_ready:=true;
      end set_endian;


    
    ------------------------------------------------------------------------------------------------
    override put_character =
    -- Feeds in a single character. 
    ------------------------------------------------------------------------------------------------
    var 
      uuuuu        : t_mod_unsigned8;            -- uuuuu part a scalar value
      zzzz         : t_mod_unsigned8;            -- zzzz part a scalar value
      yyyyyy       : t_mod_unsigned8;            -- yyyyyy part a scalar value
      xxxxxx       : t_mod_unsigned8;            -- xxxxxx part a scalar value
    
    begin 
      -- clear output
      output_bytes:=nil;

      -- character is an overrange character 
      if c:ord>$10FFFF then
        raise character_encoder_error;
        end if;

      if c:ord<=$FFFF
        -- output will be a 16bit sequence 
        then
          -- first check for non valid characters
          if c:ord=$FFFF or c:ord=$FFFE then
            raise character_encoder_error;
            end if;

          -- surrogate pairs has to be generated by encoder not by application
          if c:ord>=$D800 and c:ord<=$DFFF then
            raise character_encoder_error;
            end if;

          -- encode character output
          if endian=te_little_endian
            -- low byte first
            then
              output_bytes & t_unsigned8(t_mod_unsigned32(c:ord) and $FF) & t_unsigned8((t_mod_unsigned32(c:ord) and $FF00) shr 8);
            
            -- high byte first
            else
              output_bytes & t_unsigned8((t_mod_unsigned32(c:ord) and $FF00) shr 8) & t_unsigned8(t_mod_unsigned32(c:ord) and $FF);
              end if;

        -- output will be of a two 16bit sequences
        else
          -- decompose scalar value of character
          uuuuu :=(t_mod_unsigned32(c:ord) and 2$11111_0000_000000_000000) shr 16;
          zzzz  :=(t_mod_unsigned32(c:ord) and 2$1111_000000_000000) shr 12;
          yyyyyy:=(t_mod_unsigned32(c:ord) and 2$111111_000000) shr 6;
          xxxxxx:= t_mod_unsigned32(c:ord) and 2$111111;

          -- encode character output value
          if endian=te_little_endian 
            then
            -- low byte first
              output_bytes & t_unsigned8(((uuuuu-1 and 2$11) shl 6) or (zzzz shl 2) or ((yyyyyy and 2$110000) shr 4))
                           & t_unsigned8(2$1101_1000 or ((uuuuu-1 and 2$1100) shr 2))
                           & t_unsigned8(((yyyyyy and 2$11) shl 6) or xxxxxx)
                           & t_unsigned8(2$1101_1100 or ((yyyyyy and 2$1100) shr 2)) ;

            -- high byte first
            else
              output_bytes & t_unsigned8(2$1101_1000 or ((uuuuu-1 and 2$1100) shr 2))
                           & t_unsigned8(((uuuuu-1 and 2$11) shl 6) or (zzzz shl 2) or ((yyyyyy and 2$110000) shr 4))
                           & t_unsigned8(2$1101_1100 or ((yyyyyy and 2$1100) shr 2))
                           & t_unsigned8(((yyyyyy and 2$11) shl 6) or xxxxxx);
              end if;
          end if;
        end put_character;

    end c_character_encoder_utf16;

    

----------------------------------------------------------------------------------------------------
class private c_character_encoder_ucs2 = 
-- UCS-2 decoder.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override set_endian =
    -- Sets byte order of output bytes and puts character $feff at the begining of output where
    -- applicable.
    ------------------------------------------------------------------------------------------------
    begin 
{     %%TODO(INHERITED)}
      endian:=new_endian;
      finalize_output;
      if endian=te_little_endian 
        then output_bytes:=[$FF,$FE];
        else output_bytes:=[$FE,$FF];
        end if;
      bytes_ready:=true;
      end set_endian;


    
    ------------------------------------------------------------------------------------------------
    override put_character =
    -- Feeds in a single character. 
    ------------------------------------------------------------------------------------------------
    begin 
      -- clear output
      output_bytes:=nil;

      -- character is an overrange character 
      if c:ord>$FFFF then
        raise character_encoder_error;
        end if;

      {-- encode character into two 8bit bytes
      if endian=te_little_endian 
        then
        -- low byte first
          output_bytes & t_unsigned8(c:ord and $FF) &
                         t_unsigned8((c:ord and $FF00) shr 8);
        -- high byte first
        else}
          output_bytes & t_unsigned8((t_mod_unsigned32(c:ord) and $FF00) shr 8) &
                         t_unsigned8( t_mod_unsigned32(c:ord) and $FF);
          {end if;}
      end put_character;

    end c_character_encoder_ucs2;


    
----------------------------------------------------------------------------------------------------
class private c_character_encoder_ucs4 =
-- UCS-4 decoder.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override set_endian =
    -- Sets byte order of output bytes and puts character $feff at the begining of output where
    -- applicable.
    ------------------------------------------------------------------------------------------------
    begin 
{     %%TODO(INHERITED)}
      endian:=new_endian;
      finalize_output;
      if endian=te_little_endian 
        then output_bytes:=[$FF,$FE,$00,$00];
        else output_bytes:=[$00,$00,$FE,$FF];
        end if;
      bytes_ready:=true;
      end set_endian;


    
    ------------------------------------------------------------------------------------------------
    override put_character =
    -- Feeds in a single character. 
    ------------------------------------------------------------------------------------------------
    begin 
      -- clear output
      output_bytes:length:=0;

      -- encode character into four 8bit bytes
      {if endian=te_little_endian 
        then
        -- low byte first
          output_bytes & t_unsigned8( c:ord and $FF)
                       & t_unsigned8((c:ord and $FF00) shr 8) 
                       & t_unsigned8((c:ord and $FF0000) shr 16)
                       & t_unsigned8((c:ord and $FF000000) shr 24);

        -- high byte first
        else}
          output_bytes & t_unsigned8((t_mod_unsigned32(c:ord) and $FF000000) shr 24) 
                       & t_unsigned8((t_mod_unsigned32(c:ord) and $FF0000) shr 16) 
                       & t_unsigned8((t_mod_unsigned32(c:ord) and $FF00) shr 8) 
                       & t_unsigned8( t_mod_unsigned32(c:ord) and $FF);
          {end if;}
      end put_character;

    end c_character_encoder_ucs4;



----------------------------------------------------------------------------------------------------
class private abstract c_text_writer =
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  static write_fill =
  ------------------------------------------------------------------------------------------------
  var
    --%%TODO(AGGREGATE) Viz nĂ­Ĺľe.
    spaces         : static const string 256 of t_char32 := [for 1..spaces:type:last use " "];

  var
    buff           : p_char32ustr;

  begin
    if count>0 then
      if ch=" " then
        --%%TODO(AGGREGATE) PouĹľĂ­t na mĂ­ru sestavenĂ˝ dynamickĂ˝ agregĂˇt!
        write_first(spaces,count);
      else
        new buff range count;
        --%%TODO rez polem ?
        for i in 1..count loop
          buff^[i]:=ch;
          end loop;
        write(buff^);
        discard buff;
        end if;
      end if;
    end write_fill;
  end c_text_writer;



----------------------------------------------------------------------------------------------------
class private abstract c_text_reader =
----------------------------------------------------------------------------------------------------

  end c_text_reader;



----------------------------------------------------------------------------------------------------
#separate private streams;
----------------------------------------------------------------------------------------------------

end characters;