----------------------------------------------------------------------------------------------------
module private state_machine =
-- A universal state machine.
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
class private c_state = 
-- A single state of the state machine.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    virtual leave_state =
    -- Volá uživatelskou sekvenci příkazů spojenou s výstupem ze stavu.
    ------------------------------------------------------------------------------------------------
    begin
      -- vyvolání události spojené s přechodem ze stavu
      execute(event_leave_state);
      end leave_state;



    ------------------------------------------------------------------------------------------------
    virtual enter_state =
    -- Volá uživatelskou sekvenci příkazů spojenou se vstupem do stavu.
    ------------------------------------------------------------------------------------------------
    begin
      -- vyvolání událostí spojené s přechodem do stavu
      execute(event_enter_state);
      end enter_state;

    end c_state;



----------------------------------------------------------------------------------------------------
class private c_state_machine = 
-- A universal state machine.
----------------------------------------------------------------------------------------------------

    var
      current_state: p_state:=nil;               -- current state

    const
      mem_step     = 10;                         -- pro zvětšení kapacity řetězce o [mem_step]

    ------------------------------------------------------------------------------------------------
    static add_state =
    -- Adds a state [state] to the state machine.
    -- If the state have been already added to the state machine, [state_machine_error] exception is raised.
    ------------------------------------------------------------------------------------------------
    var
      new_state    : t_state;                    -- pro přidání stavu

    begin
      -- [state] musí existovat
      if state=nil then
        raise parameter_error;
        end if;

      -- stejný stav nesmí být přidán do KA dvakrát
      if find_state(state)<>0 then
        raise state_machine_error;
        end if;

      -- test, zda je pořeba realokovat pameť pro další stavy
      if states^:last=states^:length then
        -- ADJUST states range states^:last+mem_step;
        end if;

      -- alokovat přechody 
      new new_state.transitions range mem_step;

      -- přidat ukazatel na stav do záznamu [new_state], jenž se stane položkou řetězce stavů
      new_state.state:=state;

      -- přidat nový záznam - stav do KA
      states^ & new_state;

    rollback
      -- dealokovat přechody
      discard new_state.transitions;
      end add_state;



    ------------------------------------------------------------------------------------------------
    static remove_state =
    -- Smaže stav z KA a všechny přechody, které jsou s ním spojeny. Pokud se má smazat aktivní stav
    -- KA [current_state], je generovana výjimka [state_machine_error].
    -- The state have had to be added to the state machine via the [add_state] method before, 
    -- otherwise [state_machine_error] exception is raised.
    ------------------------------------------------------------------------------------------------
    var
      i_state          : t_unsigned;             -- pozice stavu v řetězci stavů
      i_transition     : t_unsigned;             -- pozice přechodu v řetězci přechodů

    begin
      -- [current_state] nesmí být smazán
      if state=current_state then
        raise state_machine_error;
        end if;

      -- vyhledat pozici stavu pro vymazání
      i_state:=find_state(state);

      -- neexistuje stav pro vymazání
      if i_state=0 then
        raise state_machine_error;
        end if;

      -- najít a smazat všechy přechody ve všech stavech vedoucí k nekonzistenci
      for i in states^:range loop
        -- najít v řetězci přechodů přechod vedoucí do stavu pro vymazání
        i_transition:=find_transition(i,state);

        -- test, zda se našel přechod pro vymazání
        if i_transition>0 then
          -- vyjmout přechod
          {%%TODO(SLICE)}
          for k in i_transition+1..states^[i].transitions^:length loop
            states^[i].transitions^[k-1]:=states^[i].transitions^[k];
            end loop;

          -- ubyl jeden přechod
          pred states^[i].transitions^:length;

          -- pokud řetězec přechodů má min mem_step položek volných a velikost alokovaného
          -- řetězce je větší než mem_step
          if states^[i].transitions^:length mod mem_step=0 and states^[i].transitions^:last<>mem_step then
            -- dealokovat přidanou paměť přechodům
            -- ADJUST states^[i].transitions range states^[i].transitions:last-mem_step;
            end if;
          end if;
        end loop;

      -- zrušení přechodů na stavu, který se má smazat
      discard states^[i_state].transitions;
      -- zrušit stav
      {%%TODO(SLICE)}
      for i in i_state+1..states^:length loop
        states^[i-1]:=states^[i];
        end loop;

      -- ubyl jeden stav
      pred states^:length;

      -- pokud řetězec stavů má mem_step položek volných
      if states^:length mod mem_step=0 and states^:last<>mem_step then
        -- dealokovat přidanou paměť stavům
        -- ADJUST states range states^:last-mem_step;
        end if;
      end remove_state;



    ------------------------------------------------------------------------------------------------
    static add_transition =
    -- Defines a new transition from this state to another state [to_state].
    -- The transition can be performed only when then transition allowance check [check] returns 
    -- True, otherwise it is forbidden to perform the transition.
    -- When a transition from this state to [to_state] was already defined (regardless of the
    -- transition allowance check), [state_machine_error] exception is raised.
    ------------------------------------------------------------------------------------------------
    var 
      _new_transition : t_transition;            -- pomocná proměnná k navázání recordu na string
      i_state         : t_unsigned;              -- pozice stavu v řetězci stavů

    begin
      -- [from_state], [to_state] a [transition_check] musí existovat, jinak error
      if from_state=nil or to_state=nil or check=nil then
        raise parameter_error;
        end if;

      -- najít index stavu, ve kterém bude začínat přechod
      i_state:=find_state(from_state);

      -- počáteční stav nebo koncový stav přechodu neexistuje
      if i_state=0 or find_state(to_state)=0 then 
        raise state_machine_error;
        end if;

      -- testovat na duplicitu přechodu
      if find_transition(i_state,to_state)>0 then
        -- přechod je již definován
        raise state_machine_error;
        end if;

      -- pokud pamět pro další přechod není k dispozici, realokovat větší pamět
      if states^[i_state].transitions^:last=states^[i_state].transitions^:length then
        -- ADJUST states^[i_state].transitions range transitions^:last+mem_step;
        end if;

      -- přidat přechod do tohoto stavu
      {%%TODO(AGGREGATE)}
      _new_transition.to_state:=to_state;
      _new_transition.check:=check;
      states^[i_state].transitions^ & _new_transition;

    rollback
      -- pokud realokovala se paměť pro přechody
      if states^[i_state].transitions^:length+mem_step=states^[i_state].transitions^:last and
      states^[i_state].transitions^:last<>mem_step then
        -- dealokovat přidanou paměť přechodům
        -- ADJUST states^[i_state].transitions range states^[i_state].transitions^:last-mem_step;
        end if;
      end add_transition;


    
    ------------------------------------------------------------------------------------------------
    static remove_transition =
    -- Removes a transition from [from_state] to another state [to_state].
    -- The transition have had to be defined via the [add_transition] method before, otherwise
    -- [state_machine_error] exception is raised.
    ------------------------------------------------------------------------------------------------
    var
      i_state      : t_unsigned;                 -- pozice stavu v řetězci stavů
      i_transition : t_unsigned;                 -- pozice přechodu v řetězci přechodů

    begin
      -- [from_state] a [to_state] i [states] musí existovat, jinak error
      if from_state=nil or to_state=nil then
        raise parameter_error;
        end if;

      -- najít stav, ve kterém bude začínat přechod
      i_state:=find_state(from_state);

      -- hledat přechod, který se má odstranit
      i_transition:=find_transition(i_state,to_state);

      -- nebyl nalezen přechod pro vyjmutí z tohoto stavu
      if i_transition=0 then
        raise state_machine_error;
        end if;

      -- odstranit přechod
      {%%TODO(SLICE)}
      for k in i_transition+1..states^[i_state].transitions^:length loop
        states^[i_state].transitions^[k-1]:=states^[i_state].transitions^[k];
        end loop;

      -- ubyl jeden přechod
      pred states^[i_state].transitions^:length;

      -- pokud řetězec přechodů má mem_step položek volných a velikost alokovaného řetězce je větší
      -- než mem_step
      if states^[i_state].transitions^:length mod mem_step=0 and states^[i_state].transitions^:last<>mem_step then
        -- dealokovat přidanou paměť přechodům
        -- ADJUST states^[i_state].transitions range states^[i_state].transitions:last-mem_step;
        end if;
      end remove_transition;



    ------------------------------------------------------------------------------------------------
    static set_first_state =
    -- Sets the first state of the state machine. 
    -- The state have had to be added to the state machine via the [add_state] method before, 
    -- otherwise [state_machine_error] exception is raised. The first state of the state machine
    -- can be specified only once. If a current state is already determined, [state_machine_error]
    -- exception is raised.
    --   Before entering the first state [event_first_state] is signaled. After that, normal event 
    -- signalig takes place, when the first state is set. That is, all events starting from 
    -- [event_before_enter_state] are signaled.
    --   If the first state is a final state as well, [event_final_state] is signaled in the end.
    ------------------------------------------------------------------------------------------------
    begin
      -- [state] není definován nebo [current_state] již existuje nebo [state] je mimo KA
      if state=nil or current_state<>nil or find_state(state)=0 then 
        raise parameter_error;
        end if;
      
      -- vyvolání událostí spojené se vstupem do počátečního stavu
      execute(event_first_state);

      -- nastaví počáteční stav
      current_state:=state;

      -- vyvolání událostí spojené se vstupem do počátečního stavu
      enter_state;
      end set_first_state;


    
    ------------------------------------------------------------------------------------------------
    static get_state =
    -- Returns the current state of the state machine.
    -- Returns NIL when no state was entered yet.
    ------------------------------------------------------------------------------------------------
    begin
      -- vrácení aktuálního stavu
      result:=current_state;
      end get_state;



    ------------------------------------------------------------------------------------------------
    static is_final_state =
    -- Checks if the current state is the final state of the state machine. 
    -- A final state is such a state, from which no transition to another state is defined.
    -- When no current state is selected, [state_machine_error] exception is raised.
    ------------------------------------------------------------------------------------------------
    begin
      -- [current_state] musí existovat
      if current_state=nil then
        raise state_machine_error;
        end if;

      -- je konečný stav, pokud počet přechodů z tohoto stavu je 0
      result:=states^[find_state(current_state)].transitions^:length=0;
      end is_final_state;

    

    ------------------------------------------------------------------------------------------------
    virtual can_transition =
    -- Checks if a transition to some next state can be performed.
    -- A transition can be performed when there are any transitions from the current state defined
    -- and when at least one of these transitions passes the corresponding transition allowance
    -- check.
    ------------------------------------------------------------------------------------------------
    begin
      -- vrátit, zda se lze dostat přechodem ze stavu [current_state] do dalšího stavu
      result:=find_transition_to_perform(find_state(current_state))<>0;
      end can_transition;

    

    ------------------------------------------------------------------------------------------------
    static do_transition =
    -- Performs a transition to some next state.
    -- The destination state is selected based on the return values of the trasition allowance 
    -- checks of all defined transitions (in order of definition via calls to the 
    -- [c_state.add_transition] method). There shall be exactly one transition passing the 
    -- transition allowance check. This transition is then performed, otherwise [state_machine_error]
    -- exception is raised.
    --   This concludes, that when there is no transition defined for the current state, it is
    -- treated as an error condition. It is up to the user to ensure by calling the [is_final_state]
    -- that the current state is not the final state so allowing [do_transition] to be called.
    --   When the final state is entered, [event_final_state] is signaled after the transition is
    -- completed (that is, after [event_after_enter_state] was signaled).
    ------------------------------------------------------------------------------------------------
    var 
      i_state          : t_unsigned;             -- pozice stavu v řetězci stavů
      i_transition     : t_unsigned;             -- pozice přechodu v řetězci stavů pro vykonání

    begin
      -- jestliže KA nemá nastaven počáteční stav, pak error
      if current_state=nil then
        raise state_machine_error;
        end if;

      -- najít index stavu v řetězci
      i_state:=find_state(current_state);

      -- najít index přechodu v [current_state], jimž se dá dostat do dalšího stavu
      i_transition:=find_transition_to_perform(i_state);

      -- test, zda je přechod nalezen
      if i_transition=0 then
        -- přechod není nalezen
        raise state_machine_error;
        end if;

      -- vykonat přechod
      -- vyvolání událostí spojené s přechodem do jiného stavu
      leave_state;

      -- nastavení na další stav v KA
      current_state:=states^[i_state].transitions^[i_transition].to_state;
      execute(event_transition);

      -- vyvolání událostí spojené s přechodem do jiného stavu
      enter_state;

      -- pokud to je tento nový stav konečný, vyvolat událost dostání se do konečného stavu
      if is_final_state then 
        execute(event_final_state);
        end if;
      end do_transition;


    
    ------------------------------------------------------------------------------------------------
    static run_state_machine =
    -- Repeatedly performs transitions until a final state has been reached. 
    -- This provides a default state machine execution model, where all user-specific actions take 
    -- place within the triggers of the particular events.
    --   Before calling [run_state_machine], the first state have to be selected via the 
    -- [set_first_state]. If the first state is the final state as well, the [run_state_machine]
    -- terminates immediately without performing any action.
    --   Note that there are no calls to [can_transition] and so [do_transition]s are executed in
    -- an uninterrupted sequence without any explicit actions or delays between them.
    ------------------------------------------------------------------------------------------------
    begin
      -- [current_state] musí existovat
      if current_state=nil then
        raise state_machine_error;
        end if;

      -- vykonávaní přechodů, dokud není konečný stav
      while not is_final_state loop
        do_transition;
        end loop;
      end run_state_machine;



    ------------------------------------------------------------------------------------------------
    static check_state =
    -- Ensures that the given [state] was added to this state machine. If not, [state_machine_error]
    -- exception is raised, otherwise no action is taken.
    ------------------------------------------------------------------------------------------------
    begin
      -- stav musí být definován
      if find_state(state)=0 then
        -- stav neexistuje..
        raise state_machine_error;
        end if;
      end check_state;



    ------------------------------------------------------------------------------------------------
    static find_state =
    -- Vrací index stavu v řetězci stavů. Pokud žádný stav v KA neexistuje - nebyl nalezen, metoda 
    -- vrátí hodnotu 0.
    ------------------------------------------------------------------------------------------------
    var
      state_found  : t_logical:=false;           -- indikuje, zda je stav nalezen

    begin
      -- [state] i [states] musí být definovaný
      if state=nil then
        result:=0;
        return;
        end if;

      -- hledat index stavu [state]
      -- začínat hledání na posledním stavu [states]
      result:=states^:length;

      -- test, zda se jedná o stav [state]
      while result>0 and then states^[result].state<>state loop
        -- posunout na předchozí stav
        pred result;
        end loop;
      end find_state;



    ------------------------------------------------------------------------------------------------
    static find_transition =
    -- Vrátí index přechodu, který je určen pozicí přechodu ve stavu, kde přechod začíná a stavem,
    -- do kterého se má přechod dostat. Pokud přechod není nalezen nebo pokud není nalezen stav,
    -- z kterého nebo do kterého by měl přechod končit, vrací se hodnota 0 - přechod nenalezen.
    ------------------------------------------------------------------------------------------------
    begin
      -- [i_from_state] a [to_state] musí být definovaný, [i_from_state] musí ukazovat do řetězce
      if i_from_state=0 or to_state=nil or i_from_state>states^:length then
        result:=0;
        return;
        end if;

      -- hledat index přechodu ve stavu na indexu [i_from_state]
      -- začínat hledání na posledním přechodu stavu [i_from_state]
      result:=states^[i_from_state].transitions^:length;

      -- test, zda přechod vede do stavu [to_state]
      while result>0 and then states^[i_from_state].transitions^[result].to_state<>to_state loop
        -- posunout na předchozí přechod
        pred result;
        end loop;
      end find_transition;



    ------------------------------------------------------------------------------------------------
    static find_transition_to_perform =
    -- Vrací index přechodu, jenž se může vykonat. Pokud žádný přechod není nalezen nebo pokud 
    -- existuje víc než dva přechody, jimiž se lze dostat dalšího stavu, 
    -- vrací se hodnota 0 - přechod nenalezen.
    ------------------------------------------------------------------------------------------------
    begin
      -- index přechodu ve stavu [i_state], jímž se dá dostat do dalšího stavu
      result:=0;

      -- [i_state] musí ukazovat do řetězce stavů
      if i_state=0 or i_state>states^:length then
        -- vrací se index neexistujícího přechodu (0)
        return;
        end if;
      
      -- hledat přechody z [i_state], ze kterých se dá dostat do dalšího stavu
      for i_transition in states^[i_state].transitions^:range loop
        -- test, zda to je hledaný přechod
        if states^[i_state].transitions^[i_transition].check^(current_state,states^[i_state].
        transitions^[i_transition].to_state) then
          -- test, zda jde o druhý přechod
          if result<>0 then
            -- 2. přechod, chyba
            result:=0;
            return;
            end if;

          -- nalezen 1. přechod
          result:=i_transition;
          end if;
        end loop;
      end find_transition_to_perform;



    ------------------------------------------------------------------------------------------------
    static leave_state =
    -- Volá události spojené s výstupem ze stavu.
    ------------------------------------------------------------------------------------------------
    begin
      -- vyvolání událostí spojené s přechodem do jiného stavu
      execute(event_before_leave_state);
      current_state^.leave_state;
      execute(event_after_leave_state);
      end leave_state;



    ------------------------------------------------------------------------------------------------
    static enter_state =
    -- Volá události spojené se vstupem do stavu.
    ------------------------------------------------------------------------------------------------
    begin
      -- vyvolání událostí spojené s přechodem do jiného stavu
      execute(event_before_enter_state);
      current_state^.enter_state;
      execute(event_after_enter_state);
      end enter_state;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Pro alokaci paměti řetězce stavů.
    ------------------------------------------------------------------------------------------------
    begin
      -- alokovat pamět pro řetězec stavů v tomto KA
      new states range mem_step;
      end entry;

    end c_state_machine;



----------------------------------------------------------------------------------------------------
procedure transition_always =
-- Special-purpose transition allowance check: Always allows transition (always returns True).
----------------------------------------------------------------------------------------------------
begin
  -- přechodem se lze dostat do dalšího stavu vždy
  result:=true;
  end transition_always;



----------------------------------------------------------------------------------------------------
procedure transition_never =
-- Special-purpose transition allowance check: Always denies transition (always returns False).
----------------------------------------------------------------------------------------------------
begin
  -- přechodem se nelze dostat do dalšího stavu nikdy
  result:=false;
  end transition_never;

end state_machine;