----------------------------------------------------------------------------------------------------
module public strings =
-- Character strings' manipulation.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
-- To do:
--   -- change the return types of all subprograms to unconstrained string,
--   -- in the implementation, use "char_*" instead of "iso_char_*",
--   -- passing arrays of unknown size into subprograms
--   -- declaring arrays of unconstrained strings
--   -- properly implement [str_compare_case_insensitive], the actual semantics is much simplified
----------------------------------------------------------------------------------------------------

type
{
  -- values of the symbolic substitution tags
  tsubstitutions   = string of ref tchar32ustr;
}
  -- ends of a string
  t_str_end          = enum
      se_left;                                   -- left side (the beginning of the string)
      se_right;                                  -- right side (the end of the string)
      end enum;
  t_str_end_set       = set of t_str_end;

  -- string trimming policy
  t_str_trim         = enum
      st_no;                                     -- never trim
      st_yes;                                    -- trim if necessary
      st_error;                                  -- raise {Parameter_Error} when trimmig
      end enum;

  -- array of strings
  -- this needs to be changed !!!
  t_char32str_array= string of t_char32str;

----------------------------------------------------------------------------------------------------
procedure str_adjust (
    str            : in t_char32ustr;            -- the string to be adjusted
    length         : in str:range;               -- required length of the resulting string
    pad_ends       : in t_str_end_set := [se_right];-- the ends of the string padding shall be added to
    pad_with       : in str:base := " ";         -- padding character
    trim_policy    : in t_str_trim := st_no;     -- T-the string may be trimmed when necessary
    trim_ends      : in t_str_end_set := [se_right])-- the ends of the string to be trimmed
    return t_char32str;                           -- adjusted string
-- Adjusts the length of the given string [str] to be [length] characters.
--   When the length of [str] is less then [length], the string is padded with [pad_with] character 
-- on [pad_ends] ends of the string. When [length] is odd, the extra padding character is placed on 
-- the right side of the string (if {se_rigth} is present in [pad_ends]).
--   When the length of [str] is greater than [length] and [trim_policy] is {st_yes} the extraneous 
-- characters on the sides specified in [trim_ends] are removed. When [length] is odd, the extra 
-- character is removed from the right side of the string (if {se_rigth} is present in [trim_ends]). 
-- When [trim_policy] is {st_error}, the subprogram fails and {Parameter_Error} is raised.
--   In all other cases, unless in the error conditions described below, the exact string [str] is 
-- returned without any modifications. 
--
-- Parameters:
--   pad_ends      May not be an empty set, otherwise {Parameter_Error} is raised.
--   trim_ends     May not be an empty set, otherwise {Parameter_Error} is raised even when 
--                 [trim_policy] is False.
--
-- Result:
--   -- When the subprogram fails, the return value is undefined.
--   -- When the subprogram succeeds, the return value is the value of the adjusted string [str].
----------------------------------------------------------------------------------------------------
procedure str_trim (
    str            : in t_char32ustr;            -- string to trim
    trim           : in t_char32;                -- character to trim out
    trim_ends      : in t_str_end_set := [se_right])-- the ends of the string to be trimmed
    return t_char32str;
-- Trims characters [trim] from string [str] on the defined sides [side] of string. 
--
-- Parameters:
--   trim_ends     If not specified the string would be trimed from the right end.
--   trim_ends     If empty set then the string would not be trimmed at all.
--
-- Examples:
--   str_trim('Hello World !!!',"!") = 'Hello World '
--   str_trim('Hello World !!!','H',[se_left]) = 'ello World !!!'
--   str_trim('xxx String xxx of xxx',"x",[se_left,se_right]) = ' String xxx of '
--
-- Result:
--   When the subprogram fails, the return value is undefined.
--   When the subprogram succeeds, the return value is the value of the trimmed string [str].
----------------------------------------------------------------------------------------------------
procedure str_replace_character (
    str            : in t_char32ustr;            -- string to convert
    old_char       : in t_char32;                -- character to be replaced
    new_char       : in t_char32)                -- character to replace with
    return t_char32str;                          -- converted string
-- Replaces all occurences of the [old_char] character in [str] with the [new_char] character.
-- If the [old_char] equals to the [new_char] then the result equals to [str]. 
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure str_replace_substring (
    str            : in t_char32ustr;            -- string to convert
    old_substr     : in t_char32ustr;            -- substring to be replaced
    new_substr     : in t_char32ustr)            -- substring to replace with
    return t_char32str;                          -- converted string
-- Replaces all occurences of the [old_substr] substring in [str] with the [new_substr] substring.
-- If the [old_substr] equals to the [new_substr] then the result equals to [str]. 
--
-- Examples:
--   str_replace_substring('aabbabbbaababbbba','bb','cc') = 'aaccaccbaabacccca'
--   str_replace_substring('aabbabbbaababbbba','bb','ab') = 'aaabaabbaabaababa'
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure str_remove_character (
    str            : in t_char32ustr;            -- string to convert
    char           : in t_char32)                -- character to be replaced
    return t_char32str;                          -- converted string
-- Removes all occurences of the [char] character from the string [str].
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure str_remove_substring (
    str            : in t_char32ustr;            -- string to convert
    substr         : in t_char32ustr)            -- substring to be replaced
    return t_char32str;                          -- converted string
-- Removes all occurences of the [substr] substrings from the string [str].
--
-- Examples:
--   str_remove_substring('aabbabbbaababbbba','bb') = 'aaabaabaa'
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure str_pos_substring (
    str            : in t_char32ustr;            -- string to count from
    substr         : in t_char32ustr)            -- substring to be found
    return t_unsigned;                           -- number of occurences
-- Returns position of first occurence of [substr] in [str].
--
-- Result:
--   This subprogram always succeeds.
--   If there is no occurence of [substr] in [str] subprogram returns 0.
----------------------------------------------------------------------------------------------------
procedure str_count_character (
    str            : in t_char32ustr;            -- string to count from
    char           : in t_char32)                -- character to be counted
    return t_unsigned;                           -- number of occurences
-- Counts occurences of the [char] characters in [str]. 
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure str_count_substring (
    str            : in t_char32ustr;            -- string to count from
    substr         : in t_char32ustr)            -- substring to be counted
    return t_unsigned;                           -- number of occurences
-- Counts occurences of [substr] substrings in [str].
--
-- Examples:
--   str_count_substring('aaa','aa') = 1
--     this special case is count as there is only one occurance of substring 'aa'
--
-- Parameters:
--   substr        May not be an empty string, otherwise {Parameter_Error} is raised.
--
-- Result:
--   When the subprogram fails, the return value is undefined.
--   When the subprogram succeeds, the return value is a number.
----------------------------------------------------------------------------------------------------
procedure str_separate (
    str            : in t_char32ustr;            -- string to split
    separator      : in t_char32;                -- separator of substrings
    _array         : out t_char32str_array);     -- resulting array
-- Separates string [str] separated by character [separator] to an array [_array] of substrings .
--
-- Result:
{
--   Tenhle podprogram bude ur‡itˆ muset nˆjak vy©e¨it velikost vr cen‚ho pole
}
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure array_to_str (
    _array         : in t_char32str_array;       -- array of strings
    separator      : in t_char32)                -- separator of substrings
    return t_char32str;                          -- resulting string
-- Joins strings of an array [_array] into a string separated by character [separator].
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure str_is_empty (                         
    str            : in t_char32ustr;            -- string to compared
    char           : in t_char32 := " ")         -- character to be considered as an empty character
    return t_logical;
-- Return true if the [str] string is empty or contain only empty characters.
--
-- Parameters:
--   char          Usualy the space character is considered to be empty
--
-- Examples:
--   str_is_empty('   ') = True
--   str_is_empty('xxxxxxxx',"x") = True
--   str_is_empty('Hello world',"l") = False
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
--procedure str_fill_character
----------------------------------------------------------------------------------------------------
procedure str_fill_substring (
    length         : in t_unsigned;              -- length of output string
    substr         : in t_char32ustr)            -- substring to fill with
    return t_char32str;
-- Returns string of length filled with substrings [substr]. If the length of string [str] is
-- not divisible with length of substring [substr] then the last substring will be trimmed at 
-- the rigth end of it.
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure str_to_upper (
    str            : in t_char32ustr)            -- string to convert
    return t_char32str;                          -- converted string
-- Converts all lower-case letters within <par>str</par> to corresponding upper-case letters. All
-- upper-case letters and non-letter characters remain unchanged. The result of the subprogram is
-- the converted string.
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure str_to_lower (
    str            : in t_char32ustr)            -- the string to be adjusted
    return t_char32str;
-- Converts all upper-case letters within <par>str</par> to corresponding lower-case letters. All
-- lower-case letters and non-letter characters remain unchanged. The result of the subprogram is
-- the converted string.
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
{
procedure str_format (
    str            : in t_char32ustr;
    subst          : in tsubstitutions)
    return t_char32ustr;
}
----------------------------------------------------------------------------------------------------
procedure str_copy (
    str            : in t_char32ustr;
    _start         : in t_unsigned;
    _end           : in t_unsigned)
    return t_char32str;
-- Returns a substring of string [str] from position [_start] to position [_stop].
--
-- This subprogram is only temprorary and needs to be removed.
----------------------------------------------------------------------------------------------------
procedure str_create_copy (
    src            : in t_char32ustr;
    dest           : out p_char32ustr;
    _start         : in t_unsigned;
    _end           : in t_unsigned);
-- Returns a new instance of string [scr] from position [_start] to position [_stop] as a pointer 
-- [dest].
--
-- This subprogram is only temprorary and needs to be removed.
----------------------------------------------------------------------------------------------------
procedure str_to_title (
    str            : in t_char32ustr)            -- the string to be adjusted
    return t_char32str;
-- Converts all letters within <par>str</par> to corresponding title-case string representation.
-- The first letter in a word i a title-case an the following are lower-case, all others remain 
-- unchanged.
--
-- Example:
--   str_to_title('tHE ExaPLE')='The Example'
--   str_to_title(' a big-nose maniac')=' A Big-Nose Maniac'
--
-- Result:
--   This subprogram always succeeds.
----------------------------------------------------------------------------------------------------
procedure str_compare_case_insensitive (
    A              : in t_char32ustr;
    B              : in t_char32ustr)
    return t_logical;
-- Case-insensitive comparison of strings [A] and [B].
--
-- Result:
--   The return value is [true], if the strings are equal except for casing, and [false] otherwise.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class public c_string =
-- Class for handling automatically allocated and deallocated unconstrained strings of t_char32
-- characters.
----------------------------------------------------------------------------------------------------  

    ------------------------------------------------------------------------------------------------
    static set_string (
      source       : in t_char32ustr);           -- source to be put in
    -- Sets string to store value of t_char32ustr given the value as [source].
    -- Exapmle:
    --    Setting string to ''-empty string would delete its content.
    ------------------------------------------------------------------------------------------------
    static add_char (
      char         : in t_char32);               -- character to be add
    -- Adds character to the end of this string value.
    ------------------------------------------------------------------------------------------------
    static add_string (
      str          : in t_char32ustr);           -- string to be add
    -- Adds character to the end of this string value.
    ------------------------------------------------------------------------------------------------
    static get_string return p_char32ustr;       -- resulting string
    -- Gets poiter to the string represented by this class.
    ------------------------------------------------------------------------------------------------
    static get_char (
      position       : in t_unsigned)              -- position of required character
      return  t_char32;              -- character to be add
    -- Gets the string of t_char32ustr represented by this class.
    ------------------------------------------------------------------------------------------------
    static del_char (
      position       : in t_unsigned);             -- position of character to be deleted
    -- Removes character at position [position] from the string.
    ------------------------------------------------------------------------------------------------
    static del_string (
      position       : in t_unsigned;              -- position of first deleted character
      count          : in t_unsigned);             -- number of deleted charactes
    -- Removes [count] number of character starting at position [position] from the string.
    ------------------------------------------------------------------------------------------------
    static length return t_unsigned;
    -- Returns length of string repsesented by instance of this class
    ------------------------------------------------------------------------------------------------
    procedure op_assign_cs_ts (
      A            : out c_string;
      B            : in t_char32ustr);
    -- A := B
    ------------------------------------------------------------------------------------------------
    procedure op_assign_ts_cs (
        A          : out t_char32ustr;
        B          : in c_string);
    -- A := B
    ------------------------------------------------------------------------------------------------}
    {%% overload is unimplemented
    overload := : op_assign;}
    ------------------------------------------------------------------------------------------------
    procedure op_concat_cs_cs (
      A            : in out c_string;
      B            : in c_string);
    -- A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_cs_ts (
      A            : in out c_string;
      B            : in t_char32ustr);
    -- A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_ts_cs (
      A            : in out t_char32ustr;
      B            : in c_string);
    -- A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_cs_tc (
      A            : in out c_string;
      B            : in t_char32);
    -- A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_cs_ts_cs (
      A            : in c_string;
      B            : in t_char32ustr) 
      return c_string;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_cs_ts_ps (
      A            : in c_string; 
      B            : in t_char32ustr) 
      return p_char32ustr;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_cs_cs_cs (
      A            : in c_string; 
      B            : in c_string) 
      return c_string;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_cs_cs_ps (
      A            : in c_string; 
      B            : in c_string) 
      return p_char32ustr;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_ts_cs_cs (
      A            : in t_char32ustr; 
      B            : in c_string) 
      return c_string;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_ts_cs_ps (
      A            : in t_char32ustr; 
      B            : in c_string) 
      return p_char32ustr;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_cs_tc_cs (
      A            : in c_string; 
      B            : in t_char32) 
      return c_string;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_cs_tc_ps (
      A            : in c_string; 
      B            : in t_char32) 
      return p_char32ustr;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_tc_cs_cs (
      A            : in t_char32; 
      B            : in c_string) 
      return c_string;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    procedure op_concat_tc_cs_ps (
      A            : in t_char32; 
      B            : in c_string) 
      return p_char32ustr;
    -- X := A & B
    ------------------------------------------------------------------------------------------------
    {%% overload is unimplemented
    overload & : op_concat_cs_cs,
                 op_concat_cs_cs,
                 op_concat_ts_cs,
                 op_concat_cs_ts;
                 op_concat_cs_uc_cs,
                 op_concat_cs_uc_ps,
                 op_concat_cs_cs_cs,
                 op_concat_cs_cs_ps,
                 op_concat_ts_cs_cs,
                 op_concat_ts_cs_ps,
                 op_concat_cs_tc_cs,
                 op_concat_cs_tc_ps,
                 op_concat_tc_cs_cs,
                 op_concat_tc_cs_ps;}
    ------------------------------------------------------------------------------------------------


  end c_string;


end strings;