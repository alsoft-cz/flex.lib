
-- ultimatni predek
class abstract c_abstract_stream;         type p_abstract_stream         = ^class c_abstract_stream;

-- interface streamu pro tahani za data
class abstract c_input_stream;            type p_input_stream            = ^class c_input_stream;
-- interface streamu pro tlaceni dat
class abstract c_output_stream;           type p_output_stream           = ^class c_output_stream;

-- predek pro uzivatele streamu
class abstract c_stream_reader;           type p_stream_reader           = ^class c_stream_reader;
class abstract c_stream_writer;           type p_stream_writer           = ^class c_stream_writer;

-- predek pro forwardery
class abstract c_stream_reader_filter;    type p_stream_reader_filter    = ^class c_stream_reader_filter;
class abstract c_stream_writer_filter;    type p_stream_writer_filter    = ^class c_stream_writer_filter;



----------------------------------------------------------------------------------------------------
class public abstract c_abstract_stream =
-- Abstraktní proud.
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  virtual abstract close;
  -- zavře stream, uvolní zdroj, blokuje volajícího
  ------------------------------------------------------------------------------------------------
  virtual get_flow(
    bytes          : out t_offset);
  -- vrati pocet protecenych bytu
  ------------------------------------------------------------------------------------------------
  virtual add_flow(
    data          : in ref t_data_packet);
  -- zvysi pocet protecenych bytu
  ------------------------------------------------------------------------------------------------
  virtual set_optimal_packet_size(
    bytes          : in t_offset);
  -- nastavi optimalni velikost packetu
  ------------------------------------------------------------------------------------------------
  virtual get_optimal_packet_size(
    bytes          : out t_offset);
  -- nastavi optimalni velikost packetu
  ------------------------------------------------------------------------------------------------
  virtual set_lazy_buffer(
    lazy           : in t_logical);
  -- nastavi povoleni pro zpozdeny zapis
  ------------------------------------------------------------------------------------------------
  virtual get_lazy_buffer(
    lazy           : out t_logical);
  -- precte povoleni pro zpozdeny zapis
  ------------------------------------------------------------------------------------------------

protected

var
  flow             : t_offset;
  optimal_size     : t_offset;
  lazy_buffer      : t_logical;

  end c_abstract_stream;



----------------------------------------------------------------------------------------------------
class public abstract c_input_stream = extend c_abstract_stream;
-- Abstraktní proud ke čtení.
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  virtual abstract read_packet(
      data         : out t_data_packet;
      options      : t_read_options);
  -- zapíše packet, blokuje volajícího do dokonceni nacteni
  ------------------------------------------------------------------------------------------------
  virtual abstract is_eod return t_logical;
  -- zjisti jetli jeste muzou prijit nejake data
  ------------------------------------------------------------------------------------------------
  virtual transfer_packet(
    target         : p_output_stream;
    transfer_eod   : t_logical:=false)           --F packet eod bude zahozen
    return t_logical;
  -- presune jeden packet
  ------------------------------------------------------------------------------------------------
  virtual transfer_all_packets(
    target         : p_output_stream;
    transfer_eod   : t_logical:=false);          --F packet eod bude zahozen
  -- presune vsechny packety az do end of data
  ------------------------------------------------------------------------------------------------
  end c_input_stream;



----------------------------------------------------------------------------------------------------
class public abstract c_output_stream = extend c_abstract_stream;
-- abstraktní proud k zápisu
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  virtual abstract write_packet(
      data       : in t_data_packet);
  -- zapíše packet, blokuje volajícího do dokonceni zapsani
  ------------------------------------------------------------------------------------------------
  virtual flush;
  -- nedestruktivne vyprazdni vsechny buffery, blokuje volajiciho
  ------------------------------------------------------------------------------------------------
  virtual abstract is_reading return t_logical;
  -- zjisti jetli jeste nekdo cte data
  ------------------------------------------------------------------------------------------------
  virtual transfer_packet(
    source         : p_input_stream;
    transfer_eod   : t_logical:=false)           --F packet eod bude zahozen
    return t_logical;
  -- presune jeden packet
  ------------------------------------------------------------------------------------------------
  virtual transfer_all_packets(
    source         : p_input_stream;
    transfer_eod   : t_logical:=false);          --F packet eod bude zahozen
  -- presune vsechny packety az do end of data
  ------------------------------------------------------------------------------------------------
  virtual write_eod;
  -- zapise end of data packet
  ------------------------------------------------------------------------------------------------
  end c_output_stream;



----------------------------------------------------------------------------------------------------
class public abstract c_stream_reader = 
-- Predek zapisovatele do streamu
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  virtual is_eod return t_logical;
  -- zjisti jestli uz byl vycten end of data packet
  ------------------------------------------------------------------------------------------------
  virtual close;
  -- uzavre podrizeny stream stream
  ------------------------------------------------------------------------------------------------
  virtual get_flow(
    bytes          : out t_offset);
  -- vrati pocet protecenych bytu
  ------------------------------------------------------------------------------------------------
  virtual set_optimal_packet_size(
    bytes          : in t_offset);
  -- nastavi optimalni velikost packetu
  ------------------------------------------------------------------------------------------------
  virtual get_optimal_packet_size(
    bytes          : out t_offset);
  -- nastavi optimalni velikost packetu
  ------------------------------------------------------------------------------------------------
  virtual set_lazy_buffer(
    lazy           : in t_logical);
  -- nastavi povoleni pro zpozdeny zapis
  ------------------------------------------------------------------------------------------------
  virtual get_lazy_buffer(
    lazy           : out t_logical);
  -- precte povoleni pro zpozdeny zapis
  ------------------------------------------------------------------------------------------------
--%%TODO protected
  ------------------------------------------------------------------------------------------------
  virtual init_reader (
      source     : in p_input_stream);     -- odkaz na vstupní stream
  --nastavi podrizeny stream
  ------------------------------------------------------------------------------------------------

  var
    _source        : p_input_stream;             -- odkaz na vstupní stream
    _isinicialized : t_logical;

  end c_stream_reader;




----------------------------------------------------------------------------------------------------
class public abstract c_stream_writer =
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  virtual is_reading return t_logical;
  -- zjisti jestli druha strana jeste cte data
  ------------------------------------------------------------------------------------------------
  virtual close;
  -- uzavre podrizeny stream
  ------------------------------------------------------------------------------------------------
  virtual flush;
  -- nedestruktivne vyprazdni vsechny buffery, blokuje volajiciho
  ------------------------------------------------------------------------------------------------
  virtual get_flow(
    bytes          : out t_offset);
  -- vrati pocet protecenych bytu
  ------------------------------------------------------------------------------------------------
  virtual set_optimal_packet_size(
    bytes          : in t_offset);
  -- nastavi optimalni velikost packetu
  ------------------------------------------------------------------------------------------------
  virtual get_optimal_packet_size(
    bytes          : out t_offset);
  -- nastavi optimalni velikost packetu
  ------------------------------------------------------------------------------------------------
  virtual set_lazy_buffer(
    lazy           : in t_logical);
  -- nastavi povoleni pro zpozdeny zapis
  ------------------------------------------------------------------------------------------------
  virtual get_lazy_buffer(
    lazy           : out t_logical);
  -- precte povoleni pro zpozdeny zapis
  ------------------------------------------------------------------------------------------------
--%%TODO protected
  ------------------------------------------------------------------------------------------------
  virtual init_writer(
      target     : in p_output_stream);        -- odkaz na výstupní stream
  ------------------------------------------------------------------------------------------------
  var
    _target        : p_output_stream;            -- odkaz na výstupní stream
    _isinicialized : t_logical;

  end c_stream_writer;
