----------------------------------------------------------------------------------------------------
module private formatters =
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class private c_console_text_writer =
-- implementace zapisovace textu do streamu
----------------------------------------------------------------------------------------------------
  --------------------------------------------------------------------------------------------------
  virtual set_cursor_position =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_data_packet;
    coord          : p_cursor_coordinates;

  begin
    new coord;
    coord^.x:=pos.x;
    coord^.y:=pos.y;
    create_signal(packet,m_dpss_con_set_pos:tag,p_data_array(coord:unchecked));
    _target^.write_packet(packet);
    end set_cursor_position;



  --------------------------------------------------------------------------------------------------
  virtual set_foreground_color =
  ----------------------------------------------------------------------------------------------------
  var
    packet         : t_data_packet;
    pcolor         : p_console_color;

  begin
    new pcolor;
    pcolor^:=color;
    create_signal(packet,m_dpss_con_fgcolor:tag,p_data_array(pcolor:unchecked));
    _target^.write_packet(packet);
    end set_foreground_color;



  --------------------------------------------------------------------------------------------------
  virtual set_background_color =
  ----------------------------------------------------------------------------------------------------
  var
    packet         : t_data_packet;
    pcolor         : p_console_color;

  begin
    new pcolor;
    pcolor^:=color;
    create_signal(packet,m_dpss_con_bgcolor:tag,p_data_array(pcolor:unchecked));
    _target^.write_packet(packet);
    end set_background_color;



  --------------------------------------------------------------------------------------------------
  virtual clear_console =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_data_packet;

  begin
    create_signal(packet,m_dpss_con_clear:tag,nil);
    _target^.write_packet(packet);
    end clear_console;



  --------------------------------------------------------------------------------------------------
  static init_console_writer =
  --------------------------------------------------------------------------------------------------
  begin
    init_text_writer(target,nil);
    end init_console_writer;
  end c_console_text_writer;



----------------------------------------------------------------------------------------------------
class private c_console_text_reader =
-- implementace ctenare textu ze streamu
----------------------------------------------------------------------------------------------------
  --------------------------------------------------------------------------------------------------
  static init_console_reader =
  --------------------------------------------------------------------------------------------------
  begin
    init_text_reader(source,nil);
    end init_console_reader;

  --------------------------------------------------------------------------------------------------
  virtual read_event =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_data_packet;

  begin
    loop
      _source^.read_packet(packet,t_ro_default);
      if packet.style=t_dps_signal then
        if packet.signal=m_dpss_con_event:tag then
          event:=p_console_event(packet.other:unchecked)^;
          discard_packet(packet);
          break;
        elsif packet.signal>=m_dpss_important:tag then
          discard_packet(packet);
          raise stream_invalid_data;
          end if;
        end if;
      discard_packet(packet);
      end loop;
    end read_event;
  end c_console_text_reader;
end formatters;
