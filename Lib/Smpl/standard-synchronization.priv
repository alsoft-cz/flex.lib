----------------------------------------------------------------------------------------------------
module private synchronization =
-- Synchronization
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------
with
  flex.hw_api,
  flex.references,
  flex.synchronization;

----------------------------------------------------------------------------------------------------
class private c_critical_section = 
----------------------------------------------------------------------------------------------------
var
  critical         : t_rtl_critical;

  --------------------------------------------------------------------------------------------------
  static lock =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_critical_lock(critical);
    end lock;



  --------------------------------------------------------------------------------------------------
  static try_lock =
  --------------------------------------------------------------------------------------------------
  begin
    result:=rtl_critical_try_lock(critical,flex.t_rtl_timeout(milisec));
    end try_lock;



  --------------------------------------------------------------------------------------------------
  static unlock =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_critical_unlock(critical);
    end unlock;



  --------------------------------------------------------------------------------------------------
  entry =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_critical_new(critical);
    end entry;



  --------------------------------------------------------------------------------------------------
  exit =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_critical_discard(critical);
    end exit;
  end c_critical_section;


----------------------------------------------------------------------------------------------------
class private c_readers_writers = 
----------------------------------------------------------------------------------------------------
var
  readers_object   : t_rtl_readers;

  --------------------------------------------------------------------------------------------------
  static reader_lock =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_readers_read(readers_object);
    end reader_lock;

  
  
  --------------------------------------------------------------------------------------------------
  static reader_try_lock =
  --------------------------------------------------------------------------------------------------
  begin
    result:=rtl_readers_try_read(readers_object,flex.t_rtl_timeout(milisec));
    end reader_try_lock;

  
  
  --------------------------------------------------------------------------------------------------
  static reader_unlock =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_readers_done(readers_object);
    end reader_unlock;

  
  
  --------------------------------------------------------------------------------------------------
  static writer_lock =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_readers_write(readers_object);
    end writer_lock;

  
  
  --------------------------------------------------------------------------------------------------
  static writer_try_lock =
  --------------------------------------------------------------------------------------------------
  begin
    result:=rtl_readers_try_write(readers_object,flex.t_rtl_timeout(milisec));
    end writer_try_lock;

  
  
  --------------------------------------------------------------------------------------------------
  static writer_unlock =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_readers_done(readers_object);
    end writer_unlock;



  --------------------------------------------------------------------------------------------------
  entry =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_readers_new(readers_object);
    end entry;



  --------------------------------------------------------------------------------------------------
  exit =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_readers_discard(readers_object);
    end exit;
  end c_readers_writers;



----------------------------------------------------------------------------------------------------
class private c_queue = 
----------------------------------------------------------------------------------------------------
var
  que              : t_rtl_squeue;

  --------------------------------------------------------------------------------------------------
  static reset =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_squeue_reset(que);
    end reset;




  --------------------------------------------------------------------------------------------------
  static append_msg =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_squeue_append(que,flex.t_rtl_pointer(msg:unchecked));
    end append_msg;



  --------------------------------------------------------------------------------------------------
  static accept_any_msg =
  --------------------------------------------------------------------------------------------------
  var
    data           : flex.t_rtl_pointer;
  begin
    rtl_squeue_draw_out(que,data);
    msg:unchecked:=data;
    end accept_any_msg;


  --------------------------------------------------------------------------------------------------
  static try_accept_any_msg =
  --------------------------------------------------------------------------------------------------
  var
    data           : flex.t_rtl_pointer;
  begin
    result:=rtl_squeue_try_draw_out(que,data,flex.t_rtl_timeout(milisec));
    msg:unchecked:=data;
    end try_accept_any_msg;



  --------------------------------------------------------------------------------------------------
  static wait_empty =
  --------------------------------------------------------------------------------------------------
  begin
    if not rtl_squeue_wait_empty(que,flex.t_rtl_wait_infinite) then
      raise tasking_error;
      end if;
    end wait_empty;



  --------------------------------------------------------------------------------------------------
  entry =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_squeue_new(que,^rtl_ref_collector_discard);
    end entry;



  --------------------------------------------------------------------------------------------------
  exit =
  --------------------------------------------------------------------------------------------------
  begin
    rtl_squeue_discard(que);
    end exit;
  end c_queue;

----------------------------------------------------------------------------------------------------
procedure interlocked_increment =
----------------------------------------------------------------------------------------------------
var
    old            : flex.t_rtl_native_signed;

begin
  rtl_interlocked_exchange_add(^locked_value:unchecked,flex.t_rtl_native_signed(add_value:unchecked),old);
  end interlocked_increment;



----------------------------------------------------------------------------------------------------
procedure interlocked_read =
----------------------------------------------------------------------------------------------------
begin
  rtl_interlocked_read_ptr(^locked_value:unchecked,flex.t_rtl_pointer(value:unchecked));
  end interlocked_read;



----------------------------------------------------------------------------------------------------
procedure sleep =
----------------------------------------------------------------------------------------------------
begin
  rtl_sleep(flex.t_rtl_timeout(milisec));
  end sleep;
end synchronization;
