----------------------------------------------------------------------------------------------------
module private hash_tables =
-- Data structures - hash tables.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class private c_hash_table_item =
-- Hash table item.
----------------------------------------------------------------------------------------------------

    end c_hash_table_item;



----------------------------------------------------------------------------------------------------
class private abstract c_hash_table =
-- Hash table.
----------------------------------------------------------------------------------------------------

    use
      supervised c_hash_table_item;

    ------------------------------------------------------------------------------------------------
    static init =
    -- Initializes the hash table.
    --   When [homogenous] is set to True, then only items of type [item_type] are permitted in the 
    -- hash table, otherwise only items of type [item_type] and all its descendants. All hash table
    -- manipulation procedures raise [list_error] when the type of an item violates this rule.
    ------------------------------------------------------------------------------------------------
    begin
      -- set up basic parameters
      this.modulus:=modulus;
      this.item_type:=item_type;
      this.homogenous:=homogenous;
     
      -- create the actual hash table
      new this.hash_table range this.modulus;
      end init;



    ------------------------------------------------------------------------------------------------
    static store =
    -- Inserts the given [item] into the hash table.
    ------------------------------------------------------------------------------------------------
    var
      slot         : p_hash_slot;

    begin
      -- item musí být definován
      if item=nil then
        return;
        end if;

      -- select a slot
      slot:=^hash_table^[item^.item_id mod modulus];

      -- insert into it
      if slot^.last<>nil
        then slot^.last^.next:=item;
        else slot^.first:=item;
        end if;
      item^.prev:=slot^.last;
      item^.next:=nil;
      slot^.last:=item;

      -- reflect the change of the number of items in the slot
      succ slot^.count;

      -- reflect the change of the number of items in hash table
      succ count;
      end store;



    ------------------------------------------------------------------------------------------------
    static find =
    -- Finds and [item] by its [id]. When there is no item with such an [id] in the hash table, 
    -- sets [item] to NIL.
    ------------------------------------------------------------------------------------------------
    begin
      -- try to find the item
      item:=hash_table^[id mod modulus].first;
      while item<>nil and then item^.item_id<>id loop
        item:=item^.next;
        end loop;
      end find;



    ------------------------------------------------------------------------------------------------
    override insert =
    -- Inserts the given [item] into the container.
    ------------------------------------------------------------------------------------------------
    begin
      -- assign an ID
      assign_hash_id(item);

      -- store into the hash table
      store(item);
      end insert;



    ------------------------------------------------------------------------------------------------
    override remove =
    -- Removes the given [item] from the container.
    ------------------------------------------------------------------------------------------------
    var
      slot         : p_hash_slot;

    begin
      -- select a slot
      slot:=^hash_table^[p_hash_table_item(item)^.item_id mod modulus];

      -- remove the item from the slot
      if p_hash_table_item(item)^.next<>nil
        then p_hash_table_item(item)^.next^.prev:=p_hash_table_item(item)^.prev
        else slot^.last:=p_hash_table_item(item)^.prev;
        end if;
      if p_hash_table_item(item)^.prev<>nil
        then p_hash_table_item(item)^.prev^.next:=p_hash_table_item(item)^.next
        else slot^.first:=p_hash_table_item(item)^.next;
        end if;
      p_hash_table_item(item)^.prev:=nil;
      p_hash_table_item(item)^.next:=nil;

      -- reflect the change of the number of items in the slot
      pred slot^.count;

      -- reflect the change of the number of items in hash table
      pred count;
      end remove;



    ------------------------------------------------------------------------------------------------
    override delete =
    -- Removes and discards the given [item] from the container. Sets value of [item] to nil.
    ------------------------------------------------------------------------------------------------
    begin
      -- remove from the hash table
      remove(item);

      -- and discard
      discard item;
      end delete;



    ------------------------------------------------------------------------------------------------
    override delete_all =
    -- Removes and discards all items in the container.
    ------------------------------------------------------------------------------------------------
    var
      item         : p_hash_table_item;          -- první prvek hash table

    begin
      -- načíst první prvek
      item:=get_first;

      -- smazat všechny prvky hash table
      while item<>nil loop
        -- načíst první prvek a smazat ho
        delete(item);
        item:=get_first;
        end loop;
      end delete_all;



    ------------------------------------------------------------------------------------------------
    static has_item =
    -- Vrací, zda [item] je prvkem hash table. Pokud je, vrací [true].
    ------------------------------------------------------------------------------------------------
    var 
      item_in_hash : p_hash_table_item;          -- aktuální prvek v hash table

    begin
      -- item musí být definován
      if item=nil then
        result:=false;
        return;
        end if;

      -- hledat první prvek ve stejném slotu jako hledaný prvek
      item_in_hash:=hash_table^[item^.item_id mod modulus].first;

      -- hledat hledaný prvek od prvního prvku seznamu
      while item_in_hash<>nil and then item_in_hash<>item loop
        -- přechod na další prvek
        item_in_hash:=item_in_hash^.next;
        end loop;

      -- byl nalezen hledaný prvek ?
      result:=item_in_hash=item;
      end has_item;



    ------------------------------------------------------------------------------------------------
    static get_first =
    -- Vrací první prvek hash table. Pokud žádný prvek tabulka nemá, vrací NIL.
    ------------------------------------------------------------------------------------------------
    var 
      i_slot       : t_unsigned;                 -- ukazatel na slot

    begin
      -- zbavit se triviálních případů
      if count=0 then return end if;

      -- najít první obsazený slot
      i_slot:=hash_table^:first;
      while hash_table^[i_slot].first=nil loop
        succ i_slot;
        end loop;

      -- vrátit první prvek slotu
      result:=hash_table^[i_slot].first;
      end get_first;
    

    
    ------------------------------------------------------------------------------------------------
    static set_first =
    -- Vrací první prvek hash table. Pokud žádný prvek tabulka nemá, vrací NIL.
    ------------------------------------------------------------------------------------------------
    var 
      i_slot       : t_unsigned;                 -- ukazatel na slot

    begin
      -- zbavit se triviálních případů
      if count=0 then return end if;

      -- najít první obsazený slot
      i_slot:=hash_table^:first;
      while hash_table^[i_slot].first=nil loop
        succ i_slot;
        end loop;

      -- vrátit první prvek slotu
      item:=hash_table^[i_slot].first;
      end set_first;



    ------------------------------------------------------------------------------------------------
    static get_last =
    -- Vrací poslední prvek hash table. Pokud žádný prvek tabulka nemá, vrací NIL.
    ------------------------------------------------------------------------------------------------
    var 
      i_slot       : t_unsigned;                 -- ukazatel na slot

    begin
      -- zbavit se triviálních případů
      if count=0 then return end if;

      -- najít první obsazený slot
      i_slot:=hash_table^:last;
      while hash_table^[i_slot].last=nil loop
        pred i_slot;
        end loop;

      -- vrátit první prvek slotu
      result:=hash_table^[i_slot].last;
      end get_last;
    


    ------------------------------------------------------------------------------------------------
    static set_last =
    -- Vrací poslední prvek hash table. Pokud žádný prvek tabulka nemá, vrací NIL.
    ------------------------------------------------------------------------------------------------
    var 
      i_slot       : t_unsigned;                 -- ukazatel na slot

    begin
      -- zbavit se triviálních případů
      if count=0 then return end if;

      -- najít první obsazený slot
      i_slot:=hash_table^:last;
      while hash_table^[i_slot].last=nil loop
        pred i_slot;
        end loop;

      -- vrátit první prvek slotu
      item:=hash_table^[i_slot].last;
      end set_last;


    
    ------------------------------------------------------------------------------------------------
    static get_prev =
    -- Vrací předcházející prvek k [item] v hash table. Pokud zadaný prvek není v hash table
    -- nalezen vrací NIL. 
    ------------------------------------------------------------------------------------------------
    var 
      i_slot       : t_unsigned;                 -- ukazatel na slot, ve kterém by mohl být [prev_item]

    begin
      -- předpoklad neexistejce předcházejícího prvku
      result:=nil;
      
      -- item musí být definován
      if item=nil then
        return;
        end if;

      -- je [item] prvkem hash table ?
      if not has_item(item) then 
        -- není prvkem hash table, vrátit [result:=nil]
        return;
        end if;

      -- existuje v aktuálním slotě předcházející item ?
      if item^.prev<>nil then
        -- ano, existuje, vrátit [prev_item]
        result:=item^.prev;
        return;
        end if;

      -- zjistit index slotu aktuálního prvku
      i_slot:=item^.item_id mod modulus;

      -- hledat předcházející prvek (procházet předcházející sloty, dokud nebude prvek nalezen)
      while i_slot<>hash_table^:first loop;
        -- přejít na předcházející slot
        pred i_slot;

        -- je slot neprázdný ?
        if hash_table^[i_slot].last<>nil then
          -- ne, vrátit předcházející prvek
          result:=hash_table^[i_slot].last;
          break;
          end if;
        end loop;
      end get_prev;

    

    ------------------------------------------------------------------------------------------------
    static set_prev =
    -- Vrací předcházející prvek k [item] v hash table. Pokud zadaný prvek není v hash table
    -- nalezen vrací [item:=nil]. 
    ------------------------------------------------------------------------------------------------
    var 
      i_slot       : t_unsigned;                 -- ukazatel na slot, ve kterém by mohl být [prev_item]

    begin
      -- item musí být definován
      if item=nil then
        return;
        end if;

      -- je [item] prvkem hash table ?
      if not has_item(item) then 
        -- není prvkem hash table, vrátit [item:=nil]
        item:=nil;
        return;
        end if;

      -- existuje v aktuálním slotu předcházející item ?
      if item^.prev<>nil then
        -- ano, existuje, vrátit [prev_item]
        item:=item^.prev;
        return;
        end if;

      -- zjistit index slotu aktuálního prvku
      i_slot:=item^.item_id mod modulus;

      -- předpoklad neexistejce předcházejícího prvku
      item:=nil;
      
      -- hledat předcházející prvek (procházet předcházející sloty, dokud nebude prvek nalezen)
      while i_slot<>hash_table^:first loop;
        -- přejít na předcházející slot
        pred i_slot;

        -- je prvek nalezen ?
        if hash_table^[i_slot].last<>nil then
          -- ano, vrátit předcházející prvek
          item:=hash_table^[i_slot].last;
          break;
          end if;
        end loop;
      end set_prev;

    

    ------------------------------------------------------------------------------------------------
    static get_next =
    -- Vrací následující prvek k [item] v hash table. Pokud zadaný prvek není v hash table
    -- nalezen, vrací [item:=nil]. 
    ------------------------------------------------------------------------------------------------
    var 
      i_slot       : t_unsigned;                 -- ukazatel na slot, ve kterém by mohl být [next_item]

    begin
      -- předpoklad neexistejce následujícího prvku
      result:=nil;
      
      -- item musí být definován
      if item=nil then
        return;
        end if;

      -- je [item] prvkem hash table ?
      if not has_item(item) then 
        -- není prvkem hash table, vrátit [result:=nil]
        return;
        end if;

      -- existuje v aktuálním slotě následující item ?
      if item^.next<>nil then
        -- ano, existuje, vrátit [next_item]
        result:=item^.next;
        return;
        end if;

      -- zjistit index slotu aktuálního prvku
      i_slot:=item^.item_id mod modulus;

      -- hledat následující prvek (procházet následující sloty, dokud nebude prvek nalezen)
      while i_slot<>hash_table^:last loop;
        -- přejít na následující slot
        succ i_slot;

        -- je prvek nalezen ?
        if hash_table^[i_slot].first<>nil then
          -- ano, vrátit následující prvek
          result:=hash_table^[i_slot].first;
          break;
          end if;
        end loop;
      end get_next;



    ------------------------------------------------------------------------------------------------
    static set_next =
    -- Vrací následující prvek k [item] v hash table. Pokud zadaný prvek není v hash table
    -- nalezen, vrací [item:=nil]. 
    ------------------------------------------------------------------------------------------------
    var 
      i_slot       : t_unsigned;                 -- ukazatel na slot, ve kterém by mohl být [next_item]

    begin
      -- item musí být definován
      if item=nil then
        return;
        end if;

      -- je [item] prvkem hash table ?
      if not has_item(item) then 
        -- není prvkem hash table, vrátit [next_item:=nil]
        item:=nil;
        return;
        end if;

      -- existuje v aktuálním slotě následující item ?
      if item^.next<>nil then
        -- ano, existuje, vrátit [next_item]
        item:=item^.next;
        return;
        end if;

      -- zjistit index slotu aktuálního prvku
      i_slot:=item^.item_id mod modulus;

      -- předpoklad neexistejce následujícího prvku
      item:=nil;

      -- hledat následující prvek (procházet následující sloty, dokud nebude prvek nalezen)
      while i_slot<>hash_table^:last loop;
        -- přejít na následující slot
        succ i_slot;

        -- je prvek nalezen ?
        if hash_table^[i_slot].first<>nil then
          -- ano, vrátit následující prvek
          item:=hash_table^[i_slot].first;
          break;
          end if;
        end loop;
      end set_next;



    ------------------------------------------------------------------------------------------------
    exit =
    -- Finalization.
    ------------------------------------------------------------------------------------------------
    begin
      discard hash_table;
      end exit;

    end c_hash_table;



----------------------------------------------------------------------------------------------------
class private c_incremental_hash_table = 
-- Hash table with automatically assigned incremental item IDs.
----------------------------------------------------------------------------------------------------

    var
      next_id      : t_hash_item_id := 1;        -- next ID to be assigned

    ------------------------------------------------------------------------------------------------
    override assign_hash_id =
    -- Assigns an ID to the given [item].
    ------------------------------------------------------------------------------------------------
    begin
      -- assign an ID to the item
      item^.item_id:=next_id;

      -- calucate the least next item ID
      succ next_id;
      end assign_hash_id;
    end c_incremental_hash_table;



end hash_tables;