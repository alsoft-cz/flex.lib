----------------------------------------------------------------------------------------------------
module private standard =
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

with
  system;

#if #environment target_os_family;='WIN32' then;
use
  system.windows.winbase,
  system.windows.windef,
  system.windows.windef.winnt;
#end if;
#if #environment target_os_family;='UNIX' then;
use
  unix;
#end if;

const
  -- standard library debugging mode
  std_debug        = true;

const
  -- operating system selection (to ease conditional compilation)
  os_win32         = #environment target_os_family;='WIN32';
  os_linux         = #environment target_os_family;='UNIX' and then #environment target_os_type;='LINUX';
  -- subsystem
  sub_console      = #environment target_os_subsystem_type;='CONSOLE';
  sub_gui          = #environment target_os_subsystem_type;='GUI';
  -- unsupported #error message
  os_unsupported   = 'Unsupported OS family';

#if #environment target_os_family;='WIN32' then;
type
  -- conversions of specific system types to modular arithmetic
  t_mod_dword      = mod unsigned system.windows.windef.dword:bits;
  
const  
  -- null handle value
  null_handle      = system.windows.windef.winnt.t_handle(0);
#end if;

#if os_win32 then;
----------------------------------------------------------------------------------------------------
procedure to_system_string (
    str            : in t_char32ustr;
    sysstr         : out windows.windef.winnt.pwstr) =
-- Convert standard string to OS string.
----------------------------------------------------------------------------------------------------
with
  standard.strings;

var
  unistr           : p_char16ustr;

begin
  -- convert ISO string to Unicode string
  -- %%TECH: Theoretically, Windows are able to work with UTF-16LE (i.e. surrogate pairs etc.),
  --         but in practice, it does not work (more often than not), e.g. a surrogate pair is
  --         displayed as _two_ unknown characters etc. So that we use [str_iso_to_unicode]
  --         instead of [str_iso_to_utf16].
  str_iso_to_unicode(str,unistr);

  -- move to system zero-terminated string
  new sysstr range unistr^:length+1;
  for i in unistr^:range loop
    sysstr^[i-1]:=unistr^[i];
    end loop;

  -- append the zero terminator
  sysstr^[unistr^:length]:=\0;

leave
  -- free memory
  discard unistr;
  end to_system_string;


----------------------------------------------------------------------------------------------------
procedure to_ascii_string (
    str            : in t_char32ustr;
    sysstr         : out windows.windef.winnt.lpstr) =
-- Convert standard string to OS 8bit string.
----------------------------------------------------------------------------------------------------
with
  standard.strings;

var
  ascstr           : p_char8ustr;

begin
  -- convert ISO string to ASCII string
  str_iso_to_ascii(str,ascstr);

  -- move to system zero-terminated string
  new sysstr range ascstr^:length+1;
  for i in ascstr^:range loop
    sysstr^[i-1]:=ascstr^[i];
    end loop;

  -- append the zero terminator
  sysstr^[ascstr^:length]:=\0;

leave
  -- free memory
  discard ascstr;
  end to_ascii_string;

#elsif os_linux then;

----------------------------------------------------------------------------------------------------
procedure to_system_string (
    str            : in t_char32ustr;
    sysstr         : out unix.psys_str) =
-- Convert standard string to OS string.
----------------------------------------------------------------------------------------------------
begin
  raise feature_not_implemented;
  end to_system_string;
#else;
  #error os_unsupported;
#end if;



#if os_win32 then;
----------------------------------------------------------------------------------------------------
procedure from_system_string (
    sysstr         : in windows.windef.winnt.pwstr;
    str            : out p_char32ustr) =
-- Convert standard string to OS string.
----------------------------------------------------------------------------------------------------
with
  standard.strings;

var
  length           : t_unsigned;
  unistr           : p_char16ustr;

begin
  while sysstr^[length]<>\0 loop
    succ length;
    end loop;

  new unistr range length;
  for i in 0..length-1 loop
    unistr^ & t_char16(sysstr^[i]);
    end loop;

  str_unicode_to_iso(unistr^,str);
leave
  discard unistr;
  end from_system_string;
#else;
  #error os_unsupported;
#end if;


----------------------------------------------------------------------------------------------------
#separate private triggers;
-- Event triggers.
----------------------------------------------------------------------------------------------------
#separate private classes;
-- Object data structers
----------------------------------------------------------------------------------------------------
#separate private synchronization;
-- Temporary module: Synchronization.
----------------------------------------------------------------------------------------------------
#separate private tasks;
-- Temporary module: Tasks.
----------------------------------------------------------------------------------------------------
#separate private streams;
-- Data streams.
----------------------------------------------------------------------------------------------------
#separate private characters;
-- Support for different character coding schemes (ASCII/UNICODE/ISO 10646).
---------------------------------------------------------------------------------------------------
#separate private datetime;
-- Date/time.
----------------------------------------------------------------------------------------------------
#separate private input;
-- Input operations routines.
----------------------------------------------------------------------------------------------------
#separate private console;
-- Console I/O.
----------------------------------------------------------------------------------------------------
#separate private sockets;
-- Network I/O.
----------------------------------------------------------------------------------------------------
#separate private conversions;
-- Miscellaneous conversion routines.
----------------------------------------------------------------------------------------------------
#separate private strings;
-- Character strings' manipulation.
----------------------------------------------------------------------------------------------------
#separate private numerics;
-- Mathematical computations.
----------------------------------------------------------------------------------------------------
#separate private random;
-- random numers
----------------------------------------------------------------------------------------------------
#separate private names;
-- Object names.
----------------------------------------------------------------------------------------------------
#separate private files;
-- Files.
----------------------------------------------------------------------------------------------------
#separate private program_control;
-- General program execution control.
----------------------------------------------------------------------------------------------------
#separate private state_machine;
-- State machine.
----------------------------------------------------------------------------------------------------

end standard;
