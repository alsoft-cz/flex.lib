----------------------------------------------------------------------------------------------------
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

var
  crlf           : static const string 2 of t_char32 := \$0d\$0a;
  cr             : static const t_char32             := \$0d;
  lf             : static const t_char32             := \$0a;

----------------------------------------------------------------------------------------------------
class private c_stream_text_writer =
----------------------------------------------------------------------------------------------------
var
  encoder          : p_character_encoder;

  --------------------------------------------------------------------------------------------------
  static init_text_writer = 
  --------------------------------------------------------------------------------------------------
  var
      res          : t_logical;
      buffer       : array 0..3 of t_data_byte;
      pos          : t_offset;

  begin
    -- nastavim cil
    init_writer(target);
    -- nastavim kodovani
    this.encoder:=encoder;
    if encoder<>nil and not disable_bom then
      encoder^.set_endian(res);
      if res then
        loop
          encoder^.get_output(t_unsigned8(buffer[pos]),res);
          succ pos;
          until res;
          p_stream_generic_writer(^this)^.write_unchecked(buffer,pos);
        end if;
      end if;
    end init_text_writer;



  ------------------------------------------------------------------------------------------------
  override c_text_writer.close =
  ------------------------------------------------------------------------------------------------
  begin
    if encoder<>nil then
      --%%TODO encoder^.finalize_output;
      end if;
    close;
    end close;



  ------------------------------------------------------------------------------------------------
  override c_text_writer.write_char =
  ------------------------------------------------------------------------------------------------
  var
      all_out      : t_logical;
      buffer       : array 0..3 of t_data_byte;
      pos          : t_offset;

  begin
    if encoder<>nil then
      encoder^.put_character(text);
      -- output all bytes
      loop
        encoder^.get_output(t_unsigned8(buffer[pos]),all_out);
        succ pos;
        until all_out;
      p_stream_generic_writer(^this)^.write_unchecked(buffer,pos);
    else
      p_stream_generic_writer(^this)^.write_char32(text);
      end if;
    end write_char;



  ------------------------------------------------------------------------------------------------
  override c_text_writer.write =
  ------------------------------------------------------------------------------------------------
  begin
    if encoder<>nil then
      c_text_writer:(this).write_first(text,text:length);
    else
      -- neni treba prekodovat , ukladam nativne
      write_text(text);
      end if;
    end write;

  
  
  ------------------------------------------------------------------------------------------------
  override c_text_writer.write_first =
  ------------------------------------------------------------------------------------------------
  var
    all_out        : t_logical;
    buffer         : p_data_array;
    pos            : t_offset;
    optimal_size   : t_offset;

  begin
    if encoder<>nil then
      get_optimal_packet_size(optimal_size);
      if optimal_size>(count*t_char32:size) then
        optimal_size:=(count*t_char32:size);
        end if;

      -- pripravim buffer
      new buffer range optimal_size;
      for i in 1 .. count loop
        encoder^.put_character(text[i]);
        -- output all bytes
        loop
          encoder^.get_output(t_unsigned8(buffer^[pos]),all_out);
          succ pos;
          -- odeslu buffer pokud je plny
          if pos=optimal_size then
            p_stream_generic_writer(^this)^.write_heap(p_data_array_long(buffer:unchecked)^,pos);
            new buffer range optimal_size;
            pos:=0;
            end if;
          until all_out;
        end loop;

      -- odeslu zbyle data
      if pos>0 then
        p_stream_generic_writer(^this)^.write_heap(p_data_array_long(buffer:unchecked)^,pos);
      else
        discard buffer;
        end if;
    else
      -- neni treba prekodovat , ukladam nativne
      write_text_part(text,count);
      end if;
    end write_first;



  ------------------------------------------------------------------------------------------------
  override c_text_writer.write_line =
  ------------------------------------------------------------------------------------------------
  begin
    c_text_writer:(this).write(text);
    c_text_writer:(this).write(crlf);
    end write_line;
  end c_stream_text_writer;



----------------------------------------------------------------------------------------------------
class private c_stream_text_reader =
----------------------------------------------------------------------------------------------------
var
  decoder          : p_character_decoder;

  --------------------------------------------------------------------------------------------------
  static init_text_reader = 
  --------------------------------------------------------------------------------------------------
  begin
    -- priradim zdroj dat
    init_reader(source);
    -- nastavim kodovani
    this.decoder:=decoder;
    end init_text_reader;



  ------------------------------------------------------------------------------------------------
  override c_text_reader.close =
  ------------------------------------------------------------------------------------------------
  begin
    if decoder<>nil then
      --%%TODO decoder^.finalize_input;
      end if;
    close;
    end close;



  ------------------------------------------------------------------------------------------------
  override c_text_reader.read_char =
  ------------------------------------------------------------------------------------------------
  var
      b            : t_data_byte;
      done         : t_logical;

  begin
    if decoder<>nil then
      loop
        p_stream_generic_reader(^this)^.read_byte(b,eod);
        if eod then
          --%%TODO decoder^.finalize_input;
          return;
          end if;
        decoder^.put_byte (t_unsigned8(b),done);
        until done;
      text:=decoder^.get_character();
    else
      -- kodovani netreba ctu nativne
      p_stream_generic_reader(^this)^.read_char32(text,eod);
      end if;
    end read_char;

  
  
  ------------------------------------------------------------------------------------------------
  override c_text_reader.read_first =
  ------------------------------------------------------------------------------------------------
  var
    c              : t_char32;

  begin
    if decoder<>nil then
      -- ctu po znaku do konce bufferu
      loop
        if text:length>=count then
          break;
          end if;
        c_text_reader:(this).read_char(c,eod);
        if eod then
          --%%TODO decoder^.finalize_input;
          return;
        else
          text & c;
          end if;
        end loop;
    else
      read_text(text,eod);
      end if;
    end read_first;



  ------------------------------------------------------------------------------------------------
  override c_text_reader.read =
  ------------------------------------------------------------------------------------------------
  begin
    c_text_reader:(this).read_first(text,text:last,eod);
    end read;



  ------------------------------------------------------------------------------------------------
  override c_text_reader.read_line =
  ------------------------------------------------------------------------------------------------
  var
    readbytes      : t_offset;
    c              : t_char32;

  begin
    -- ctu po znaku do konce radku nebo bufferu
    loop
      c_text_reader:(this).read_char(c,eod);
      if not eod then
        if c=cr then
          -- preskocit
        elsif c=lf then
          -- preskocit a ukoncit cteni
          break;
        else
          text & c;
          end if;
      else
        break;
        end if;
      end loop;
    end read_line;
  end c_stream_text_reader;





--------------------------------------------------------------------------------------------------
procedure convert_packet(
    data           : in out t_data_packet;
    charbuff       : in out t_data_char32;
    charpos        : in out t_unsigned;
    endian         : in out t_logical;
    encoder        : in p_character_encoder:=nil;
    decoder        : in p_character_decoder:=nil)= 
--------------------------------------------------------------------------------------------------
var
  inpacket       : t_data_packet;
  _indata        : p_data_array;
  _insize        : t_offset;
  _outdata       : p_data_array;
  _outsize       : t_offset;
  _outpos        : t_offset;
  done           : t_logical;

begin
  if data.style=t_dps_signal or (decoder=nil and encoder=nil) then
    return;

  -- both convertors
  elsif decoder<>nil and encoder<>nil then
    inpacket:=data;
    data:=nil;
    read_packet(inpacket,_indata,_insize);

    _outsize:=_insize;
    new _outdata range _outsize;  --predpoklad
    create_packet(data,_outdata,_outsize,t_dps_dynamic);

    if not endian then
      endian:=true;
      encoder^.set_endian(done);
      if done then
        loop
          encoder^.get_output(t_unsigned8(_outdata^[_outpos]),done);
          succ _outpos;
          if _outpos>=_outsize then
            realloc_packet(data,_outsize,_outdata,_outsize);
            end if;
          until done;
        end if;
      end if;

    for i in 1..(_insize) loop
      decoder^.put_byte (t_unsigned8(_indata^[i-1]),done);
      if done then
        encoder^.put_character(decoder^.get_character());
        loop
          encoder^.get_output(t_unsigned8(_outdata^[_outpos]),done);
          succ _outpos;
          if _outpos>=_outsize then
            realloc_packet(data,_outsize,_outdata,_outsize);
            end if;
          until done;
        end if;
      end loop;
    data.size:=_outpos;
    discard_packet(inpacket);

  -- decoder only
  elsif decoder<>nil then
    inpacket:=data;
    data:=nil;
    read_packet(inpacket,_indata,_insize);

    _outsize:=_insize*t_char32:size;  -- predpoklad
    new _outdata range _outsize;
    create_packet(data,_outdata,_outsize,t_dps_dynamic);

    for i in 1..(_insize) loop
      decoder^.put_byte (t_unsigned8(_indata^[i-1]),done);
      if done then
        p_char32(^_outdata^[_outpos]:unchecked)^:=decoder^.get_character();
        _outpos + t_char32:size;
        if _outpos>=(_outsize-3) then
          realloc_packet(data,_outsize,_outdata,_outsize);
          end if;
        end if;
      end loop;
    data.size:=_outpos;
    discard_packet(inpacket);

  -- encoder only
  elsif encoder<>nil then
    inpacket:=data;
    data:=nil;
    read_packet(inpacket,_indata,_insize);

    _outsize:=_insize div (t_char32:size-1);  -- predpoklad
    new _outdata range _outsize;
    create_packet(data,_outdata,_outsize,t_dps_dynamic);

    if not endian then
      endian:=true;
      encoder^.set_endian(done);
      if done then
        loop
          encoder^.get_output(t_unsigned8(_outdata^[_outpos]),done);
          succ _outpos;
          if _outpos>=_outsize then
            realloc_packet(data,_outsize,_outdata,_outsize);
            end if;
          until done;
        end if;
      end if;

    for i in 1..(_insize) loop
      charbuff[charpos]:=_indata^[i-1];
      succ charpos;
      if charpos=3 then
        encoder^.put_character(p_char32(^charbuff:unchecked)^);
        loop
          encoder^.get_output(t_unsigned8(_outdata^[_outpos]),done);
          succ _outpos;
          if _outpos>=_outsize then
            realloc_packet(data,_outsize,_outdata,_outsize);
            end if;
          until done;
        charpos:=0;
        end if;
      end loop;
    data.size:=_outpos;
    discard_packet(inpacket);
    end if;
  end convert_packet;


----------------------------------------------------------------------------------------------------
class private c_input_stream_text_recoder = 
----------------------------------------------------------------------------------------------------
var
  eod              : t_logical;
  closed           : t_logical;
  decoder          : p_character_decoder;
  encoder          : p_character_encoder;

  --char buffer
  charbuff         : t_data_char32;
  charpos          : t_unsigned;

  --endian control
  endian_bom       : t_logical;

  --split long packet
  longpacket       : t_data_packet;
  longpos          : t_offset;
  _isinitialized   : t_logical;


  --------------------------------------------------------------------------------------------------
  static init_recoder =
  --------------------------------------------------------------------------------------------------
  begin
    init_reader(source);
    this.decoder:=decoder;
    this.encoder:=encoder;
    _isinitialized:=true;
    end init_recoder;



  --------------------------------------------------------------------------------------------------
  static disable_byte_order_mark =
  --------------------------------------------------------------------------------------------------
  begin
    endian_bom:=true;
    end disable_byte_order_mark;



  --------------------------------------------------------------------------------------------------
  override c_input_stream.close =
  --------------------------------------------------------------------------------------------------
  begin
    if closed then
      raise stream_already_closed;
      end if;
    if _isinitialized then
      _source^.close;
      closed:=true;
      end if;
    end close;



  --------------------------------------------------------------------------------------------------
  override c_input_stream.read_packet =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    size           : t_offset;

  begin
    -- otestuju opravnenost pozadavku
    if closed then
      raise stream_already_closed;
      end if;
    if eod then
      raise stream_end_of_data;
      end if;
    if not _isinitialized then
      raise stream_error;
      end if;

    if longpos<>0 then
      size:=packet_size(longpacket)-longpos;
      if size>options.maximal_size then
        size:=options.maximal_size;
        end if;

      new data.data range size;
      data.style:=t_dps_dynamic;
      copy_from_packet(longpacket,longpos,data.data,data.size,size);
      if packet_size(longpacket)=longpos then
        discard_packet(longpacket);
        longpos:=0;
        end if;

      -- zapocitam prutok
      c_input_stream:(this).add_flow(data);
    else

      _source^.read_packet(longpacket,t_ro_default);
      begin
        convert_packet(longpacket,charbuff,charpos,endian_bom,encoder,decoder);
      catch
        when c_character_decoder.character_decoder_error,c_character_encoder.character_encoder_error do
          raise stream_invalid_data;
        end;

      size:=packet_size(longpacket);
      if size>options.maximal_size then
        size:=options.maximal_size;
        new data.data range size;
        data.style:=t_dps_dynamic;
        copy_from_packet(longpacket,longpos,data.data,data.size,size);
      else
        data:=longpacket;
        longpacket:=nil;
        end if;

      -- zapocitam prutok
      c_input_stream:(this).add_flow(data);

      -- zjistim jestli uz byl posledni
      if data.style=t_dps_signal then 
        if data.signal=t_dpss_eod then
          eod:=true;
          end if;
        end if;
      end if;
    end read_packet;
  


  --------------------------------------------------------------------------------------------------
  override c_input_stream.is_eod =
  --------------------------------------------------------------------------------------------------
  begin 
    if closed then
      raise stream_already_closed;
      end if;
    result:=eod;
    end is_eod;
  end c_input_stream_text_recoder;



----------------------------------------------------------------------------------------------------
class private c_output_stream_text_recoder = 
-- implementace prekodovavace znaku
----------------------------------------------------------------------------------------------------
var
  eod              : t_logical;
  closed           : t_logical;
  decoder          : p_character_decoder;
  encoder          : p_character_encoder;

  --char buffer
  charbuff         : t_data_char32;
  charpos          : t_unsigned;

  --Byte Order Mark control
  endian_bom       : t_logical;

  _isinitialized   : t_logical;

  --------------------------------------------------------------------------------------------------
  static init_recoder =
  --------------------------------------------------------------------------------------------------
  begin
    init_writer(target);
    this.encoder:=encoder;
    this.decoder:=decoder;
    _isinitialized:=true;
    end init_recoder;



  --------------------------------------------------------------------------------------------------
  static disable_byte_order_mark =
  --------------------------------------------------------------------------------------------------
  begin
    endian_bom:=true;
    end disable_byte_order_mark;



  --------------------------------------------------------------------------------------------------
  override c_output_stream.close =
  --------------------------------------------------------------------------------------------------
  begin
    if closed then
      raise stream_already_closed;
      end if;
    if _isinitialized then
      _target^.close;
      closed:=true;
      end if;
    end close;



  --------------------------------------------------------------------------------------------------
  override c_output_stream.write_packet =
  --------------------------------------------------------------------------------------------------
  var
    outpacket      : t_data_packet;

  begin
    outpacket:=data;
    begin
      convert_packet(outpacket,charbuff,charpos,endian_bom,encoder,decoder);
    catch
      when c_character_decoder.character_decoder_error,c_character_encoder.character_encoder_error do
        raise stream_invalid_data;
      end;
    _target^.write_packet(outpacket);
    end write_packet;



  --------------------------------------------------------------------------------------------------
  override c_output_stream.is_reading =
  --------------------------------------------------------------------------------------------------
  begin
    result:=_target^.is_reading;
    end is_reading;
  end c_output_stream_text_recoder;
