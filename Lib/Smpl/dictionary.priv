----------------------------------------------------------------------------------------------------
module private dictionary =
-- Dictionary implementation
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

with
  standard.classes;

-- dopředné deklarace
class c_dictionary_tree_node;     type p_dictionary_tree_node     = ^class c_dictionary_tree_node;
class c_string_dictionary_key;    type p_string_dictionary_key    = ^class c_string_dictionary_key;
class c_string_dictionary_value;  type p_string_dictionary_value  = ^class c_string_dictionary_value;

----------------------------------------------------------------------------------------------------
class c_dictionary_tree_node = extend c_binary_tree_node;
-- Uzel stromu, reprezentuje uspařádanou dvojici [klíč,hodnota]
----------------------------------------------------------------------------------------------------

    var
      key           : p_dictionary_key;          -- klíč
      value         : p_dictionary_value;        -- hodnota

    ------------------------------------------------------------------------------------------------
    static init (
        key        : in p_dictionary_key;
        value      : in p_dictionary_value) =
    -- inicializace
    ------------------------------------------------------------------------------------------------
    begin
      -- inicializovat
      this.key:=key;
      this.value:=value;

      -- kontrola, zda je definován klíč
      if key=nil then
        raise dictionary_error;
        end if;
      end init;



    ------------------------------------------------------------------------------------------------
    static discard_fields (
        what       : in t_dictionary_delete_mode) =
    -- uvolní pamět držených objektů
    ------------------------------------------------------------------------------------------------
    begin
      -- uvolnit klíč
      if key<>nil and (what=ddm_both or what=ddm_key) then
        discard key;
        end if;

      -- uvolnit hodnotu
      if value<>nil and (what=ddm_both or what=ddm_value) then
        discard value;
        end if;
      end discard_fields;

    end c_dictionary_tree_node;



----------------------------------------------------------------------------------------------------
class private c_dictionary_value =
-- Hodnota uložená ve slovníku.
----------------------------------------------------------------------------------------------------

    end c_dictionary_value;



----------------------------------------------------------------------------------------------------
class private c_dictionary_key =
-- Obecný předek pro klíč do slovníku
----------------------------------------------------------------------------------------------------

    end c_dictionary_key;



----------------------------------------------------------------------------------------------------
class c_dictionary_tree = extend c_binary_tree;
-- Specializace binárního vyhledávacího stromu pro použití ve slovníku
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override compare =
    -- Vrátí výsledek porovnání dvou uzlů.
    ------------------------------------------------------------------------------------------------
    begin
      -- zjistit výsledek
      case p_dictionary_tree_node(node_a)^.key^.compare(p_dictionary_tree_node(node_b)^.key)
        when kct_bigger  do result:=cn_bigger;
        when kct_smaller do result:=cn_smaller;
        when kct_equal   do result:=cn_equal;
        end case;
      end compare;

    end c_dictionary_tree;



----------------------------------------------------------------------------------------------------
class private c_dictionary =
-- Slovník - třída, která uchovává seznam dvojic klíč-hodnota 
-- a pro každý klíč umí efektivně najít hodnotu
----------------------------------------------------------------------------------------------------

    var
      tree         : c_dictionary_tree;          -- binární vyhledávací strom

    ------------------------------------------------------------------------------------------------
    static delete_all =
    -- Vymaže všechny položky slovníku
    ------------------------------------------------------------------------------------------------
    var
      iterator     : c_binary_tree_iterator;     -- iterátor
      item         : p_item;                     -- uzel stromu

    begin
      -- zrušit všechny klíče a hodnoty
      iterator.init(tree,ttwd_inv_infix); 
      while iterator.get(item) loop
        p_dictionary_tree_node(item)^.discard_fields(what);
        end loop;

      -- zrušit uzly stromu
      tree.delete_all;
      end delete_all;



    ------------------------------------------------------------------------------------------------
    static remove_all =
    -- Vyčistí slovník
    ------------------------------------------------------------------------------------------------
    begin
      -- zrušit uzly stromu
      tree.delete_all;
      end remove_all;



    ------------------------------------------------------------------------------------------------
    static insert_row =
    -- Přidá do slovníku dvojici [key,item]
    -- Pokud už [key] ve slovníku existuje, vyvolá výjimku [dictionary_error]
    ------------------------------------------------------------------------------------------------
    var
      node         : p_dictionary_tree_node;     -- vkládaný uzel stromu

    begin
      -- pokud už klíč ve stromě existuje, skončit na výjimku
      if find_row(key)<>nil then
        raise dictionary_error;
        end if;

      -- vyvořit a inicializovat uzel
      new node;
      node^.init(key,value);

      -- vložit uzel
      tree.insert(node);
      end insert_row;



    ------------------------------------------------------------------------------------------------
    static delete_row =
    -- Vymaže klíč a jeho hodnotu ze slovníku, klíč i jeho hodnotu uvolní z paměti.
    ------------------------------------------------------------------------------------------------
    var
      tmp_item     : aliased c_dictionary_tree_node; -- pomocný uzel stromu
      node         : p_dictionary_tree_node;         -- mazaný uzel

    begin
      -- inicializovat pomocný uzel stromu
      tmp_item.init(key,nil);

      -- najít vymazávaný uzel
      node:=tree.find(^tmp_item);

      -- provést výmaz
      if node<>nil then 
        -- uvolnit klíč a hodnotu
        node^.discard_fields(what);

        -- vymazat uzel stromu
        tree.delete(node);
        end if;
      end delete_row;



    ------------------------------------------------------------------------------------------------
    static remove_row =
    -- Vymaže klíč a jeho hodnotu ze slovníku, klíč a jeho hodnotu neuvolní z paměti.
    ------------------------------------------------------------------------------------------------
    begin
      -- provést výmaz
      delete_row(key,ddm_none);
      end remove_row;



    ------------------------------------------------------------------------------------------------
    static find_row =
    -- Najde hodnotu klíče ve slovníku.
    ------------------------------------------------------------------------------------------------
    var
      tmp_item     : aliased c_dictionary_tree_node; -- pomocný uzel stromu
      tmp_res      : p_dictionary_tree_node;     -- výsledek

    begin
      -- inicializovat pomocný uzel stromu
      tmp_item.init(key,nil);

      -- najít výslednou hodnotu
      tmp_res:=tree.find(^tmp_item);

      -- pokud byl nalezen správný uzel, zjístit výsledek
      if tmp_res<>nil then 
        result:=tmp_res^.value;
        end if;
      end find_row;



    ------------------------------------------------------------------------------------------------
    entry =
    -- inicializace
    ------------------------------------------------------------------------------------------------
    begin
      -- inicializovat strom
      tree.init(c_dictionary_tree_node:tag);
      end entry;



    ------------------------------------------------------------------------------------------------
    exit =
    -- uvolnění paměti
    ------------------------------------------------------------------------------------------------
    begin
      -- smaže uzlu stromu
      tree.delete_all;
      end exit;

    end c_dictionary;



----------------------------------------------------------------------------------------------------
class c_string_dictionary_key = extend c_dictionary_key;
-- Řetězcový klíč do slovníku
----------------------------------------------------------------------------------------------------

    var
      value        : p_char32ustr;               -- hodnota klíče

    ------------------------------------------------------------------------------------------------
    static init (
        val        : in t_char32ustr) =          -- hodnota klíče
    -- inicializace
    ------------------------------------------------------------------------------------------------
    begin
      -- vytvořit a inicializovat
      new this.value range val:length;
      this.value^:=val;
      end init;



    ------------------------------------------------------------------------------------------------
    override compare =
    -- returns 1 if [other]>[this], -1 of [other]<[this], 0 if [this] is [other]
    ------------------------------------------------------------------------------------------------
    begin
      -- porovnání řetězců
      if p_string_dictionary_key(other)^.value^<value^ then 
        result:=kct_smaller;
        return;
        end if;

      -- porovnání řetězců
      if p_string_dictionary_key(other)^.value^>value^ then 
        result:=kct_bigger;
        return;
        end if;

      -- řetězce jsou si rovny
      result:=kct_equal;
      end compare;



    ------------------------------------------------------------------------------------------------
    exit =
    -- uvolnění paměti
    ------------------------------------------------------------------------------------------------
    begin
      -- uvolnit
      discard value;
      end exit;

    end c_string_dictionary_key;



----------------------------------------------------------------------------------------------------
class private c_string_dictionary =
-- Slovník s řetězcovými klíči
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static insert_value =
    -- Přidá do slovníku dvojici [key,value]
    ------------------------------------------------------------------------------------------------
    var
      sk           : p_string_dictionary_key;    -- pomocný záznam pro klíč

    begin
      -- vytvořit klíč
      new sk;
      sk^.init(key);

      -- vložit
      insert_row(sk,value);

      -- vložením přejde zopovědnost za zrušení klíče na slovník, proto žádné discard
      end insert_value;



    ------------------------------------------------------------------------------------------------
    static delete_value =
    -- Vymaže klíč a jeho hodnotu ze slovníku
    ------------------------------------------------------------------------------------------------
    var
      sk           : p_string_dictionary_key;    -- pomocný záznam pro klíč

    begin
      -- vytvořit klíč
      new sk;
      sk^.init(key);

      -- vymazat klíč a jeho hodnotu
      delete_row(sk,what);

    leave
      -- uvolnit pamět
      discard sk;
      end delete_value;



    ------------------------------------------------------------------------------------------------
    static find_value =
    -- Najde hodnotu klíče ve slovníku
    ------------------------------------------------------------------------------------------------
    var
      sk           : p_string_dictionary_key;    -- pomocný záznam pro klíč

    begin
      -- vytvořit klíč
      new sk;
      sk^.init(key);

      -- najít hodnotu příslušnou ke klíči
      result:=find_row(sk);

    leave
      -- uvolnit pamět
      discard sk;
      end find_value;



    ------------------------------------------------------------------------------------------------
    exit =
    ------------------------------------------------------------------------------------------------
    begin
      -- uvolnit klíče
      delete_all(ddm_key);
      end exit;

    end c_string_dictionary;



----------------------------------------------------------------------------------------------------
class c_string_dictionary_value = extend c_dictionary_value;
-- Kontejner na hodnotu klíče.
----------------------------------------------------------------------------------------------------

    var
      value        : p_char32ustr;               -- vlastní hodnota

    ------------------------------------------------------------------------------------------------
    static init (
        val        : in t_char32ustr) =          -- hodnota klíče
    -- inicializace
    ------------------------------------------------------------------------------------------------
    begin
      -- vytvořit dynamický řetězec
      new this.value range val:length;

      -- inicializovat obsah
      this.value^:=val;
      end init;



    ------------------------------------------------------------------------------------------------
    exit =
    -- Uvolnění
    ------------------------------------------------------------------------------------------------
    begin
      -- uvolnit vlastní klíč
      discard value;
      end exit;

    end c_string_dictionary_value;



----------------------------------------------------------------------------------------------------
class private c_string_string_dictionary =
-- Slovník s řetězcovými klíči a řetězcovými hodnotami
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static insert =
    -- Přidá do slovníku dvojici [key,item]
    ------------------------------------------------------------------------------------------------
    var
      val          : p_string_dictionary_value;  -- hodnota

    begin
      -- vytvořit pomocnou instanci
      new val;
  
      -- inicializovat hodnotu
      val^.init(value);

      -- vložit hodnotu
      insert_value(key,val);
      end insert;



    ------------------------------------------------------------------------------------------------
    static find =
    -- Najde hodnotu klíče ve slovníku
    ------------------------------------------------------------------------------------------------
    var
      res          : p_string_dictionary_value;  -- výslená hodnota

    begin
      -- zjistit hodnotu klíče
      res:=find_value(key);

      -- klíč se povedlo nalézt => překopírovat výslednou hodnotu
      if res<>nil then 
        result:=res^.value^;
        end if;
      end find;



    ------------------------------------------------------------------------------------------------
    static search =
    -- Najde hodnotu klíče ve slovníku, vrátí, zda byl klíč nalezen
    ------------------------------------------------------------------------------------------------
    var
      res          : p_string_dictionary_value;  -- výslená hodnota

    begin
      -- zjistit hodnotu klíče
      res:=find_value(key);

      -- klíč se nepovedlo nalézt => oznámit
      if res=nil then 
        result:=false;

      else
        -- oznámit, že se klíč povedlo nalézt a vrátit jeho hodnotu
        value:=res^.value^;
        result:=true;
        end if;
      end search;



    ------------------------------------------------------------------------------------------------
    static delete =
    -- Vymaže klíč a jeho hodnotu ze slovníku
    ------------------------------------------------------------------------------------------------
    begin
      -- provést výmaz
      delete_value(key,ddm_both);
      end delete;



    ------------------------------------------------------------------------------------------------
    exit =
    ------------------------------------------------------------------------------------------------
    begin
      -- uvolnit vše
      delete_all(ddm_both);
      end exit;

    end c_string_string_dictionary;

end dictionary;
