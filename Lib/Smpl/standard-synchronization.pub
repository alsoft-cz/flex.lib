----------------------------------------------------------------------------------------------------
module public synchronization =
-- Temporary module: Synchronization
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

#option required_security(100);

type 
  t_wait_handle    = t_pointer;
  t_wait_timeout   = t_signed;                   --%%TODO change to floating seconds

const
  -- waiting time duration contants
  t_wait_infinite  : t_wait_timeout   =  -1;
  t_wait_immediate : t_wait_timeout   =  0;

----------------------------------------------------------------------------------------------------
class public c_critical_section = 
----------------------------------------------------------------------------------------------------
  --------------------------------------------------------------------------------------------------
  static lock;
  --------------------------------------------------------------------------------------------------
  static try_lock(
    milisec        : in t_wait_timeout:=t_wait_immediate)
    return t_logical;
  --------------------------------------------------------------------------------------------------
  static unlock;
  --------------------------------------------------------------------------------------------------
  end c_critical_section;

type 
  p_critical_section = ^c_critical_section;



----------------------------------------------------------------------------------------------------
class public c_readers_writers = 
----------------------------------------------------------------------------------------------------
  --------------------------------------------------------------------------------------------------
  static reader_lock;
  --------------------------------------------------------------------------------------------------
  static reader_try_lock(
    milisec        : in t_wait_timeout:=t_wait_immediate)
    return t_logical;
  --------------------------------------------------------------------------------------------------
  static reader_unlock;
  --------------------------------------------------------------------------------------------------
  --------------------------------------------------------------------------------------------------
  static writer_lock;
  --------------------------------------------------------------------------------------------------
  static writer_try_lock(
    milisec        : in t_wait_timeout:=t_wait_immediate)
    return t_logical;
  --------------------------------------------------------------------------------------------------
  static writer_unlock;
  --------------------------------------------------------------------------------------------------
  end c_readers_writers;

type 
  p_readers_writers = ^c_readers_writers;



----------------------------------------------------------------------------------------------------
class public c_queue = 
----------------------------------------------------------------------------------------------------
  --------------------------------------------------------------------------------------------------
  static reset;
  --------------------------------------------------------------------------------------------------
  static append_msg(
    msg            : in t_pointer);
  --------------------------------------------------------------------------------------------------
  static accept_any_msg(
    msg            : out t_pointer);
  --------------------------------------------------------------------------------------------------
  static try_accept_any_msg(
    msg            : out t_pointer;
    milisec        : in t_wait_timeout:=t_wait_immediate)
    return t_logical;
  --------------------------------------------------------------------------------------------------
  static wait_empty;
  --------------------------------------------------------------------------------------------------
  end c_queue;

type 
  p_queue = ^c_queue;

----------------------------------------------------------------------------------------------------
procedure interlocked_increment(
  locked_value     : in ref t_unsigned;
  add_value        : in t_unsigned);
----------------------------------------------------------------------------------------------------
procedure interlocked_read(
  locked_value     : in ref t_unsigned;
  value            : out t_unsigned);
----------------------------------------------------------------------------------------------------
procedure sleep(
    milisec        : in t_wait_timeout:=t_wait_immediate);
----------------------------------------------------------------------------------------------------

end synchronization;
