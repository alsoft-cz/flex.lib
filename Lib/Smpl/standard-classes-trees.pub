{%%TODO(homogenous) - vyřešit případ vkládání nehomogenních dat, kdy ve stromě smějí být pouze
                      homogenní data}

----------------------------------------------------------------------------------------------------
module public trees =
-- Data structures - binary trees.
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

extend           
  standard.classes.lists;

-- forward declarations
class abstract c_binary_tree_node; type p_binary_tree_node     = ^class c_binary_tree_node;
class abstract c_binary_tree;      type p_binary_tree          = ^class c_binary_tree;
class c_binary_tree_iterator;      type p_binary_tree_iterator = ^class c_binary_tree_iterator;
class c_tree_node;                 type p_tree_node            = ^class c_tree_node;
class c_tree;                      type p_tree                 = ^class c_tree;
class c_tree_iterator;             type p_tree_iterator        = ^class c_tree_iterator;

type
  -- the direction of walking through a tree
  t_tree_walking_direction = enum
      ttwd_prefix;                               -- uzel -> levý -> pravý
      ttwd_inverted_prefix;                      -- uzel -> pravý -> levý
      ttwd_postfix;                              -- levý -> pravý -> uzel
      ttwd_inverted_postfix;                     -- pravý -> levý -> uzel
      ttwd_infix;                                -- levý -> uzel -> pravý, jen pro binární strom
      ttwd_inverted_infix;                       -- pravý -> uzel -> levý, jen pro binární strom
      end enum;
  t_tree_walking_direction_set = set of t_tree_walking_direction;

type
  -- placement of new nodes being inserted into an n-ary tree relative to a reference node
  t_tree_relative_placement = enum
      ttrp_first_child;                          -- insert as first child node 
      ttrp_last_child;                           -- insert as last child node
      ttrp_first_sibling;                        -- insert as first (left-most) sibling node
      ttrp_last_sibling;                         -- insert as last (right-most) sibling node
      ttrp_left_sibling;                         -- insert as (nearest) left sibling node
      ttrp_right_sibling;                        -- insert as (nearest) right sibling node
{      
      id_add;                                    -- vloží jako posledního souseda
      id_add_first;                              -- vloží jako prvního souseda
      id_add_child;                              -- vloží jako posledního potomka
      id_first_child;                            -- vloží jako prvního potomka
      id_insert_before;                          -- vloží hned před referenční uzel
      id_insert_after;                           -- vloží hned za referenční uzel
} 
      end enum;

message
  -- general tree error exception
  tree_error       extend container_error;



----------------------------------------------------------------------------------------------------
class public abstract c_binary_tree_node = extend c_item;
-- Uzel stromu.
----------------------------------------------------------------------------------------------------

  supervised

    var
      left         : p_binary_tree_node := nil;  -- left subtree
      right        : p_binary_tree_node := nil;  -- right subtree
      up           : p_binary_tree_node := nil;  -- root node
      weight       : t_signed := 0;              -- this node's weight (for AVL-balanced trees)
      depth        : t_unsigned := 0;            -- this node's depth

    end c_binary_tree_node;



----------------------------------------------------------------------------------------------------
class public abstract c_binary_tree = extend c_container;
-- Vyhledávací strom s podporou AVL. 
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        item_type  : in t_tag;                   -- typ uzlů
        avl        : in t_logical:=false;        -- T-vyvažovat
        unique_key : in t_logical:=true;         -- T-každý klíč unikátní
        homogenous : in t_logical:=true);        -- T-stejný typ uzlů
    -- Inicializace stromu.
    --   Pokud je [avl] nastaven na true, strom bude se bude vyvažovat.
    --   Pokud je [unique_key] nastaven na true, ve stromě nemohou být uzly se stejným klíčem.
    --   Pokud je [homogenous] nastaven na true, ve stromě mohou být jen uzly typu [item_type].
    --   Pokud inicializujeme strom, který není prázdný, generuje metoda výjimku [tree_error].
    ------------------------------------------------------------------------------------------------
    static has_node (
        node       : in p_binary_tree_node)      -- hledaný uzel
        return t_logical;                        -- T-uzel nalezen
    -- Vrací [true], pokud je [node] prvkem stromu.
    -- Pokud není uzel [node] definovaný, generuje metoda výjimku [parameter_error].
    ------------------------------------------------------------------------------------------------
    static get_root return p_binary_tree_node;
    -- Vrátí kořenový uzel. Pokud uzel není definován, vrací NIL.
    ------------------------------------------------------------------------------------------------
    static get_node_count (
        node       : in p_binary_tree_node;      -- aktuální uzel 
        count      : in out t_unsigned);         -- počet uzlů (pod)stromu
    -- Spočítá počet uzlů v podstromu včetně uzlu [node].
    ------------------------------------------------------------------------------------------------
    static merge_subtree (
        tree       : in out class c_binary_tree);-- přidávané uzly stromu
    -- Spojí dva stromy do jednoho. Stom [tree] reprezentuje strom přidávaných uzlů do stromu
    -- reprezentovanou instancí této třídy. Pokud existují dva uzly se stejným klíčem, je uzel 
    -- do stromu vložen v závislosti na parametru [unique_key].
    ------------------------------------------------------------------------------------------------
    static split_subtree (
        node       : in out p_binary_tree_node;  -- rušená větev
        subtree    : out class c_binary_tree);   -- nový strom
    -- Vyjme ze stromu podstrom včetně uzlu [node] a vytvoří a inicializuje novou instance 
    -- trídy [c_tree]. Pokud uzel není nalezen generuje výjimku [tree_error].
    ------------------------------------------------------------------------------------------------
    static delete_subtree (  
        node       : in out p_binary_tree_node); -- rušený uzel včetně jeho následníků
    -- Smaže podstrom včetně uzlu [node] ze stromu a uvolní pamět. Pokud není uzel [node] ve stromu
    -- nalezen, generuje metoda výjimku [tree_error].
    -- Pozn.: Uzel [node] po ukončení metody nemusí být nutně [nil]. V případě AVL vyvažování mohl
    -- být vnitřek (datová část) uzlu (který nebyl odstřaněn, ozn U) vložen na místo odstraněného uzlu
    -- [node], přičemž datová část uzlu [node] byla vložena do uzlu U a tento uzel byl následně
    -- odstraněn.
    ------------------------------------------------------------------------------------------------
    static find (
        node       : in p_binary_tree_node)      -- pomocný uzel stromu, má vyplněné klíčové položky
                                                 -- aby byl plnohodnotným parametrem procedury [compare]
        return p_binary_tree_node;               -- nil, pokud uzel nebyl nalezen
    -- Vyhledá první uzel, který má klíč rovný [node]. Pokud takový uzel nenalezne, vrací [false].
    ------------------------------------------------------------------------------------------------

  protected

    var
      root         : p_binary_tree_node := nil;  -- kořenový uzel stromu

    ------------------------------------------------------------------------------------------------
    virtual abstract compare (
        node_a     : in p_binary_tree_node;      -- uzel 1 pro porovnání klíčů
        node_b     : in p_binary_tree_node)      -- uzel 2 pro porovnání klíčů
        return t_comparison_result;              -- výsledek porovnání uzlů
    -- Vrátí výsledek porovnání dvou uzlů.
    ------------------------------------------------------------------------------------------------

    end c_binary_tree;



----------------------------------------------------------------------------------------------------
class public c_binary_tree_iterator = extend c_iterator;
-- Iterator.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        tree       : in class c_binary_tree;     -- strom, jímž se bude procházet
        direction  : in t_tree_walking_direction -- řízení směru procházení stromem
                   := ttwd_prefix);
    -- Inicializuje iterator používaný pro průchod stromem.
    ------------------------------------------------------------------------------------------------   

    end c_binary_tree_iterator;



----------------------------------------------------------------------------------------------------
class public c_tree_node = extend c_list_item;
-- Uzel stromu.
----------------------------------------------------------------------------------------------------

  supervised

    var
      up           : p_tree_node:=nil;           -- předek
      down         : c_list;                     -- následníci

    end c_tree_node;



----------------------------------------------------------------------------------------------------
class public c_tree = extend c_container;
-- N-nární strom.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        item_type  : in t_tag;                   -- typ uzlů
        homogenous : in t_logical:=true);        -- T-stejný typ uzlů
    -- Inicializace stromu.
    --   Pokud je [homogenous] nastaven na true, ve stromě mohou být jen uzly typu [item_type].
    --   Pokud inicializujeme strom, který není prázdný, generuje metoda výjimku [tree_error].
    ------------------------------------------------------------------------------------------------
    static get_node_count (
        node       : in p_tree_node)             -- podstrom
        return t_unsigned;
    -- Spočítá počet uzlů v podstromě určeném [node]
    ------------------------------------------------------------------------------------------------
    static has_node (
        node       : in p_tree_node)             -- hledaný uzel
        return t_logical;                        -- T-uzel nalezen
    -- Vrací logickou hodnotu, zda je uzel nalezen ve stromu.
    -- Pokud není uzel [node] definovaný, generuje metoda výjimku [parameter_error].
    ------------------------------------------------------------------------------------------------
    static get_root return p_tree_node;
    -- Vrací kořenový uzel.
    --   Pokud kořen není definován, vrací NIL.
    ------------------------------------------------------------------------------------------------
    static insert_node (
        node         : in p_tree_node;           -- vkládaný uzel
        current_node : in p_tree_node;           -- aktuální uzel
        placement    : in t_tree_relative_placement); -- pozice vložení
    -- Vloží uzel do stromu.
    --   Pokud [node]=NIL, generuje výjimku [parameter_error].
    --   Pokud [current_node] není ve stromu nalezen, generuje výjimku [tree_error].
    --   Pokud se má uzel vložit jako sousední uzel, ale [current_node]=[root], generuje výjimku
    --   [tree_error].
    ------------------------------------------------------------------------------------------------
    static merge_subtree (
        tree         : in out c_tree;            -- přidávané uzly stromu
        current_node : in p_tree_node:=nil;      -- aktuální uzel
        placement    : in t_tree_relative_placement); -- pozice vložení
    -- Spojí dva stromy do jednoho. Stom [tree] reprezentuje strom přidávaných uzlů do stromu
    -- reprezentovanou instancí této třídy. Po provedení této operace bude [tree] prázdný.
    --   Pokud připojovaný strom je prázdný, generuje výjimku [tree_error].
    --   Pokud [current_node]=NIL, zkusí se vložit kořen, pokud je kořen definován, generuje [tree_error].
    --   Pokud [current_node] není ve stromu nalezen, generuje výjimku [tree_error].
    --   Pokud libovoný uzel v [tree] je ve stromu nalezen, generuje výjimku [duplicate_item_error].
    --   Pokud se má nový strom vložit jako sousední uzel, ale [current_node]=[root], generuje výjimku
    --   [tree_error].
    ------------------------------------------------------------------------------------------------
    static split_subtree (
        node       : in p_tree_node;             -- rušená větev
        subtree    : out c_tree);                -- nový strom
    -- Vyjme ze stromu podstrom včetně uzlu [node] a vytvoří a inicializuje novou instanci
    -- třídy [c_tree].
    --   Pokud uzel není nalezen, generuje výjimku [tree_error].
    ------------------------------------------------------------------------------------------------
    static move_subtree (
        node         : in p_tree_node;           -- přesouvající se podstrom
        current_node : in p_tree_node;           -- aktuální uzel pro vložení
        placement    : in t_tree_relative_placement); -- pozice vložení
    -- Přesune podstrom z jednoho místa na jiné místo v tom samém stromu.
    --   Pokud [node]=NIL, generuje výjimku [parameter_error].
    --   Pokud [node] není ve stromu nalezen, generuje výjimku [tree_error].
    --   Pokud [current_node] není ve stromu nalezen, generuje výjimku [tree_error].
    --   Pokud se má uzel vložit vedle kořenového uzlu a má potomky, generuje výjimku [tree_error].
    --   Pokud [current_node] je poduzlem [node], generuje výjimku [tree_error].
    --   Pokud se má uzel podstromu vložit jako sousední uzel, ale [current_node]=[root], generuje
    --   výjimku [tree_error].
    ------------------------------------------------------------------------------------------------

  protected

    var
      root         : p_tree_node:=nil;           -- kořenový uzel stromu

    end c_tree;



----------------------------------------------------------------------------------------------------
class public c_tree_iterator = extend c_iterator;
-- Iterator.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        tree       : in class c_tree;            -- strom, jímž se bude procházet
        direction  : in t_tree_walking_direction -- řízení směru procházení stromem
                   := ttwd_prefix);
    -- Inicializuje iterator používaný pro průchod stromem.
    -- Při použití nesprávného směru iterování je vyvolána výjimka [parameter_error].
    ------------------------------------------------------------------------------------------------   

    end c_tree_iterator;

end trees;

