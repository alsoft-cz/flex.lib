----------------------------------------------------------------------------------------------------
module public trees =
-- Data structures - binary trees.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

extend           
  standard.classes.lists;


-- forward declarations
class abstract c_binary_tree_node; type p_binary_tree_node     = ^class c_binary_tree_node;
class c_binary_tree;               type p_binary_tree          = ^class c_binary_tree;
class c_binary_tree_iterator;      type p_binary_tree_iterator = ^class c_binary_tree_iterator;
class c_tree_node;                 type p_tree_node            = ^class c_tree_node;
class c_tree;                      type p_tree                 = ^class c_tree;
class c_tree_iterator;             type p_tree_iterator        = ^class c_tree_iterator;


type
  -- výsledek operace porovnání dvou uzlů
  t_compare_node = enum
      cn_equal;                                  -- uzly si jsou rovny
      cn_bigger;                                 -- uzel je větší
      cn_smaller;                                -- uzel je menší
      end enum for size use 4;

  -- výsledek operace porovnání dvou uzlů
  t_insert_direction = enum
      id_add;                                    -- vloží jako posledního souseda
      id_add_first;                              -- vloží jako prvního souseda
      id_add_child;                              -- vloží jako posledního potomka
      id_first_child;                            -- vloží jako prvního potomka
      id_insert_before;                          -- vloží hned před referenční uzel
      id_insert_after;                           -- vloží hned za referenční uzel
      end enum;


----------------------------------------------------------------------------------------------------
class public abstract c_binary_tree_node = extend c_item;
-- Uzel stromu.
----------------------------------------------------------------------------------------------------

  supervised

    var
      left         : p_binary_tree_node:=nil;    -- levý uzel
      right        : p_binary_tree_node:=nil;    -- pravý uzel
      weight       : t_unsigned:=1;              -- váha uzlu
      up           : p_binary_tree_node:=nil;    -- předek

    end c_binary_tree_node;



----------------------------------------------------------------------------------------------------
class public c_binary_tree = extend c_container;
-- Vyhledávací strom s podporou AVL. 
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        item_type  : in t_tag;                   -- typ uzlů
        avl        : in t_logical:=false;        -- T-vyvažovat
        unique_key : in t_logical:=true;         -- T-každý klíč unikátní
        homogenous : in t_logical:=true);        -- T-stejný typ uzlů
    -- Inicializace stromu.
    --   Pokud je [avl] nastaven na true, strom bude se bude vyvažovat.
    --   Pokud je [unique_key] nastaven na true, ve stromě nemohou být uzly se stejným klíčem.
    --   Pokud je [homogenous] nastaven na true, ve stromě mohou být jen uzly typu [item_type].
    ------------------------------------------------------------------------------------------------
    static has_node (
        node       : in p_binary_tree_node)             -- hledaný uzel
        return t_logical;                        -- T-uzel nalezen
    -- Vrací [true], pokud je [node] prvkem stromu.
    ------------------------------------------------------------------------------------------------
    static get_root return p_binary_tree_node;
    -- Vrátí kořenový uzel. Pokud uzel není definován, vrací NIL.
    ------------------------------------------------------------------------------------------------
    static merge_subtree (
        tree       : in out c_binary_tree);             -- přidávané uzly stromu
    -- Spojí dva stromy do jednoho. Stom [tree] reprezentuje strom přidávaných uzlů do stromu
    -- reprezentovanou instancí této třídy. Pokud existují dva uzly se stejným klíčem, je uzel 
    -- do stromu vložen v závislosti na parametru [unique_key].
    ------------------------------------------------------------------------------------------------
    static split_subtree (
        node       : in out p_binary_tree_node;  -- rušená větev
        subtree    : out c_binary_tree);         -- nový strom
    -- Vyjme ze stromu podstrom včetně uzlu [node] a vytvoří a inicializuje novou instance 
    -- trídy [c_tree]. Pokud uzel není nalezen, vrací prázdný strom se stejnými parametry jako
    -- má instace tohoto stromu.
    ------------------------------------------------------------------------------------------------
    static delete_subtree (  
        node       : in out p_binary_tree_node); -- rušený uzel včetně jeho následníků
    -- Smaže podstrom včetně uzlu [node] ze stromu a uvolní pamět.
    ------------------------------------------------------------------------------------------------
    static find (
        node       : in p_binary_tree_node)      -- pomocný uzel stromu, má vyplněné klíčové položky
                                                 -- aby byl plnohodnotným parametrem procedury [compare]
        return p_binary_tree_node;               -- nil, pokud uzel nebyl nalezen
    -- Vyhledá uzel, který je rovný [node]
    ------------------------------------------------------------------------------------------------

  protected

    var
      root         : p_binary_tree_node:=nil;           -- kořenový uzel stromu

    ------------------------------------------------------------------------------------------------
    virtual abstract compare (
        node_a     : in p_binary_tree_node;             -- uzel 1 pro porovnání klíčů
        node_b     : in p_binary_tree_node)             -- uzel 2 pro porovnání klíčů
        return t_compare_node;                   -- výsledek porovnání uzlů
    -- Vrátí výsledek porovnání dvou uzlů.
    ------------------------------------------------------------------------------------------------

    end c_binary_tree;



----------------------------------------------------------------------------------------------------
class public c_binary_tree_iterator = extend c_iterator;
-- Iterator.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        tree       : in class c_binary_tree;     -- strom, jímž se bude procházet
        direction  : in t_tree_walking_direction -- řízení směru procházení stromem
                   := ttwd_prefix);
    -- Inicializuje iterator používaný pro průchod stromem.
    ------------------------------------------------------------------------------------------------   

    end c_binary_tree_iterator;



----------------------------------------------------------------------------------------------------
class public c_tree_node = extend c_list_item;
-- Uzel stromu.
----------------------------------------------------------------------------------------------------

  supervised

    var
      up           : p_tree_node:=nil;           -- předek
      down         : c_list;                     -- následníci

    end c_tree_node;



----------------------------------------------------------------------------------------------------
class public c_tree = extend c_container;
-- N-nární strom.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        item_type  : in t_tag;                   -- typ uzlů
        homogenous : in t_logical:=true);        -- T-stejný typ uzlů
    -- Inicializace stromu.
    --   Pokud je [homogenous] nastaven na true, ve stromě mohou být jen uzly typu [item_type].
    ------------------------------------------------------------------------------------------------
    static has_node (
        node       : in p_tree_node)             -- hledaný uzel
        return t_logical;                        -- T-uzel nalezen
    -- Vrací logickou hodnotu, zda je uzel nalezen ve stromu.
    --   Pokud [node]=NIL, hlásí chybu.
    ------------------------------------------------------------------------------------------------
    static get_root return p_tree_node;
    -- Vrací kořenový uzel.
    --   Pokud kořen není definován, vrací NIL.
    ------------------------------------------------------------------------------------------------
    static insert_node (
        node         : in p_tree_node;           -- vkládaný uzel
        current_node : in p_tree_node;           -- aktuální uzel
        direction    : in t_insert_direction);   -- pozice vložení
    -- Vloží uzel do stromu.
    --   Pokud [node]=NIL, hlásí chybu.
    --   Pokud [current_node] není ve stromu nalezen, hlásí chybu.
    --   Pokud se má uzel vložit jako sousední uzel, ale [current_node]=[root], hlásí chybu.
    --   Pokud [node] je ve stromu nalezen, hlásí chybu.
    ------------------------------------------------------------------------------------------------
    static merge_subtree (
        tree         : in out c_tree;            -- přidávané uzly stromu
        current_node : in p_tree_node:=nil;      -- aktuální uzel
        direction    : in t_insert_direction);   -- pozice vložení
    -- Spojí dva stromy do jednoho. Stom [tree] reprezentuje strom přidávaných uzlů do stromu
    -- reprezentovanou instancí této třídy. Po provedení této operace bude [tree] prázdný.
    --   Pokud připojovaný strom je prázdný, hlásí chybu.
    --   Pokud [current_node]=NIL, zkusí se vložit kořen, pokud je kořen definován, hlásí chybu.
    --   Pokud [current_node] není ve stromu nalezen, hlásí chybu.
    --   Pokud libovoný uzel v [tree] je ve stromu nalezen, hlásí chybu.
    --   Pokud se má nový strom vložit jako sousední uzel, ale [current_node]=[root], hlásí chybu.
    ------------------------------------------------------------------------------------------------
    static split_subtree (
        node       : in p_tree_node;             -- rušená větev
        subtree    : out c_tree);                -- nový strom
    -- Vyjme ze stromu podstrom včetně uzlu [node] a vytvoří a inicializuje novou instanci
    -- třídy [c_tree].
    --   Pokud uzel není nalezen, hlásí chybu.
    ------------------------------------------------------------------------------------------------
    static move_subtree (
        node         : in p_tree_node;           -- přesouvající se podstrom
        current_node : in p_tree_node;           -- aktuální uzel pro vložení
        direction    : in t_insert_direction);   -- pozice vložení
    -- Přesune podstrom z jednoho místa na jiné místo v tom samém stromu.
    --   Pokud [node]=NIL, hlásí chybu.
    --   Pokud [node] není ve stromu nalezen, hlásí chybu.
    --   Pokud [current_node] není ve stromu nalezen, hlásí chybu.
    --   Pokud se má uzel vložit vedle kořenového uzlu a má potomky, hlásí chybu.
    --   Pokud [current_node] je poduzlem [node], hlásí chybu.
    --   Pokud se má uzel podstromu vložit jako sousední uzel, ale [current_node]=[root], hlásí chybu.
    ------------------------------------------------------------------------------------------------

  protected

    var
      root         : p_tree_node:=nil;           -- kořenový uzel stromu

    end c_tree;



----------------------------------------------------------------------------------------------------
class public c_tree_iterator = extend c_iterator;
-- Iterator.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        tree       : in class c_tree;            -- strom, jímž se bude procházet
        direction  : in t_tree_walking_direction -- řízení směru procházení stromem
                   := ttwd_prefix);
    -- Inicializuje iterator používaný pro průchod stromem.
    -- Při použití nesprávného směru iterování je vyvolána výjimka [tree_error]
    ------------------------------------------------------------------------------------------------   

    end c_tree_iterator;

end trees;

