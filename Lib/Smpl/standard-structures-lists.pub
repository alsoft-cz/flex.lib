---------------------------------------------------------------------------------------------------
module public lists =
-- Data structures - linked lists.
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------
{
  To do:
    -- join two lists (join list after/before given list),
    -- split list
    -- 
}
----------------------------------------------------------------------------------------------------

with
  standard.common;

extend           
  standard.common.structures;


type
  -- linked list
  t_list;
  p_list           = ^t_list;

  -- linked list item
  t_list_item;
  p_list_item      = ^class t_list_item;

  -- list iterator
  t_list_iterator;



----------------------------------------------------------------------------------------------------
procedure list_init (
    list           : out t_list;                 -- list
    item_type      : in t_tag;                   -- (root) type of its items
    homogenous     : in t_logical := true;       -- T-only items of type [item_type] are permitted
    circular       : in t_logical := false);     -- T-the list shall be circular
-- Initializes the list.
--   When [homogenous] is set to True, then only items of type [item_type] are permitted on the 
-- list, otherwise only items of type [item_type] and all its descendants. All list manipulation 
-- procedures raise [list_error] when the type of an item violates this rule.
----------------------------------------------------------------------------------------------------
procedure list_new_first (
    list           : in out t_list;
    item           : out p_list_item);
-- Creates new item and places it to the beginning of the list.
-- The type of the item is according to the type of the real parameter (item:tag:base).
----------------------------------------------------------------------------------------------------
procedure list_new_last (
    list           : in out t_list;
    item           : out p_list_item);
-- Creates new item and places it to the end of the list.
-- The type of the item is according to the type of the real parameter (item:tag:base).
----------------------------------------------------------------------------------------------------
procedure list_new_before (
    list           : in out t_list;
    refitem        : in p_list_item;
    item           : out p_list_item);
-- Creates new item and places it before the specified [refitem].
-- Raises LIST_ERROR if [refitem] is NIL.
-- The type of the item is according to the type of the real parameter (item:tag:base).
----------------------------------------------------------------------------------------------------
procedure list_new_after (
    list           : in out t_list;
    refitem        : in p_list_item;
    item           : out p_list_item);
-- Creates new item and places it after the specified [refitem].
-- Raises LIST_ERROR if [refitem] is NIL.
-- The type of the item is according to the type of the real parameter (item:tag:base).
----------------------------------------------------------------------------------------------------
procedure list_insert_first (
    list           : in out t_list;
    item           : in p_list_item);
-- Places the given item to the beginning of the list.
----------------------------------------------------------------------------------------------------
procedure list_insert_last (
    list           : in out t_list;
    item           : in p_list_item);
-- Places the given item to the end of the list.
----------------------------------------------------------------------------------------------------
procedure list_insert_before (
    list           : in out t_list;
    refitem        : in p_list_item;
    item           : in p_list_item);
-- Places the given item to before the specified [refitem].
----------------------------------------------------------------------------------------------------
procedure list_insert_after (
    list           : in out t_list;
    refitem        : in p_list_item;
    item           : in p_list_item);
-- Places the given item to after the specified [refitem].
----------------------------------------------------------------------------------------------------
procedure list_discard (
    list           : in out t_list;
    item           : in out p_list_item);
-- Removes the specified item from the list and discards it.
----------------------------------------------------------------------------------------------------
procedure list_discard_all (
    list           : in out t_list);
-- Discards all items of the list.    
----------------------------------------------------------------------------------------------------
procedure list_remove (
    list           : in out t_list;
    item           : in p_list_item);
-- Removes the specified item from the list.
----------------------------------------------------------------------------------------------------
procedure list_is_empty (
    list           : in t_list)
                   return t_logical;
-- Return [true] if the [list] is empty, or [false] otherwise.
----------------------------------------------------------------------------------------------------
procedure list_get_first (
    list           : in t_list)
                   return p_list_item;
-- Returns the first item of the list, or NIL if empty.
----------------------------------------------------------------------------------------------------
procedure list_get_last (
    list           : in t_list)
                   return p_list_item;
-- Returns the last item of the list, or NIL if empty.
----------------------------------------------------------------------------------------------------
procedure list_get_prev (
    item           : in p_list_item)
                   return p_list_item;
-- Returns the item before [item], or NIL if [item] is the first item in the list.
----------------------------------------------------------------------------------------------------
procedure list_get_next (
    item           : in p_list_item)
                   return p_list_item;
-- Returns the item after [item], or NIL if [item] is the last item in the list.
----------------------------------------------------------------------------------------------------
procedure list_set_first (
    list           : in t_list;
    item           : out p_list_item);
-- Sets [item] to the first item in the list.
----------------------------------------------------------------------------------------------------
procedure list_set_last (
    list           : in t_list;
    item           : out p_list_item);
-- Sets [item] to the last item in the list.
----------------------------------------------------------------------------------------------------
procedure list_set_prev (
    item           : in out p_list_item);
-- Sets [item] to the previous item in the list.
----------------------------------------------------------------------------------------------------
procedure list_set_next (
    item           : in out p_list_item);
-- Sets [item] to the next item in the list.
----------------------------------------------------------------------------------------------------
procedure list_iterator_init (
    iterator       : out t_list_iterator;        -- iterator to be initialized
    list           : in p_list;                  -- a list to be walked through
    direction      : in t_list_walking_direction -- the direction of walking through a list
                   := tlwd_forward);
-- Initializes an iterator used for walking through a list.
----------------------------------------------------------------------------------------------------
procedure list_iterator_reset (
    iterator       : in out t_list_iterator);    --
-- Resets the iterator to its initial position.
----------------------------------------------------------------------------------------------------
procedure list_iterator_get (
    iterator       : in out t_list_iterator;     --
    item           : out p_list_item)            --
    return t_logical;                            --
-- Retrieves one item from the list using an iterator.
----------------------------------------------------------------------------------------------------
overload list_first : list_get_first,list_set_first;
----------------------------------------------------------------------------------------------------
overload list_last  : list_get_last,list_set_last;
----------------------------------------------------------------------------------------------------
overload list_prev  : list_get_prev,list_set_prev;
----------------------------------------------------------------------------------------------------
overload list_next  : list_get_next,list_set_next;
----------------------------------------------------------------------------------------------------
overload &          : list_insert_last;
----------------------------------------------------------------------------------------------------
overload pred       : list_get_prev,list_set_prev;
----------------------------------------------------------------------------------------------------
overload succ       : list_get_next,list_set_next;
----------------------------------------------------------------------------------------------------
overload -          : list_remove;
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
protected
----------------------------------------------------------------------------------------------------

type
  -- linked list
  t_list           = record
      first        : p_list_item;                -- first item in the list
      last         : p_list_item;                -- last item in the list
      item_type    : t_tag;                      -- (root) type of its items
      homogenous   : t_logical;                  -- T-only items of type [item_type] are permitted
      circular     : t_logical;                  -- T-the list shall be circular
      end record;

  -- linked list item
  t_list_item      = record
      prev         : p_list_item;                -- previous item in the list
      next         : p_list_item;                -- next item in the list
      end record;

  -- list iterator
  t_list_iterator  = record
      list         : p_list;
      direction    : t_list_walking_direction;   -- the direction of walking through a list
      curr         : p_list_item;                -- current item
      end record;


end lists;