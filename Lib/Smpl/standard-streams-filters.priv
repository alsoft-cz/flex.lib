----------------------------------------------------------------------------------------------------
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class private abstract c_stream_reader_filter = 
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  override c_stream_reader.is_eod =
  ------------------------------------------------------------------------------------------------
  begin
    result:=c_input_stream:(this).is_eod;
    end is_eod;



  ------------------------------------------------------------------------------------------------
  override c_stream_reader.close =
  ------------------------------------------------------------------------------------------------
  begin
    c_input_stream:(this).close;
    end close;



  ------------------------------------------------------------------------------------------------
  override c_stream_reader.get_flow =
  ------------------------------------------------------------------------------------------------
  begin
    c_input_stream:(this).get_flow(bytes);
    end get_flow;



  ------------------------------------------------------------------------------------------------
  override c_stream_reader.set_optimal_packet_size =
  ------------------------------------------------------------------------------------------------
  begin
    c_input_stream:(this).set_optimal_packet_size(bytes);
    end set_optimal_packet_size;




  ------------------------------------------------------------------------------------------------
  override c_stream_reader.get_optimal_packet_size =
  ------------------------------------------------------------------------------------------------
  begin
    c_input_stream:(this).get_optimal_packet_size(bytes);
    end get_optimal_packet_size;
  end c_stream_reader_filter;



----------------------------------------------------------------------------------------------------
class private abstract c_stream_writer_filter = 
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  override c_stream_writer.is_reading =
  ------------------------------------------------------------------------------------------------
  begin
    result:=c_output_stream:(this).is_reading;
    end is_reading;



  ------------------------------------------------------------------------------------------------
  override c_stream_writer.close =
  ------------------------------------------------------------------------------------------------
  begin
    c_output_stream:(this).close;
    end close;



  ------------------------------------------------------------------------------------------------
  override c_stream_writer.flush =
  ------------------------------------------------------------------------------------------------
  begin
    c_output_stream:(this).flush;
    end flush;



  ------------------------------------------------------------------------------------------------
  override c_stream_writer.get_flow =
  ------------------------------------------------------------------------------------------------
  begin
    c_output_stream:(this).get_flow(bytes);
    end get_flow;



  ------------------------------------------------------------------------------------------------
  override c_stream_writer.set_optimal_packet_size =
  ------------------------------------------------------------------------------------------------
  begin
    c_output_stream:(this).set_optimal_packet_size(bytes);
    end set_optimal_packet_size;




  ------------------------------------------------------------------------------------------------
  override c_stream_writer.get_optimal_packet_size =
  ------------------------------------------------------------------------------------------------
  begin
    c_output_stream:(this).get_optimal_packet_size(bytes);
    end get_optimal_packet_size;



  ------------------------------------------------------------------------------------------------
  override c_stream_writer.get_lazy_buffer =
  ------------------------------------------------------------------------------------------------
  begin
    c_output_stream:(this).get_lazy_buffer(lazy);
    end get_lazy_buffer;



  ------------------------------------------------------------------------------------------------
  override c_stream_writer.set_lazy_buffer =
  ------------------------------------------------------------------------------------------------
  begin
    c_output_stream:(this).set_lazy_buffer(lazy);
    end set_lazy_buffer;
  end c_stream_writer_filter;


----------------------------------------------------------------------------------------------------
class private c_input_stream_buffer =
----------------------------------------------------------------------------------------------------
var
  que            : c_queue;
  eod            : t_logical;
  closed         : t_logical;

  --split long packet
  longpacket       : t_data_packet;
  longpos          : t_offset;

  --------------------------------------------------------------------------------------------------
  static transfer_buffered_packets =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    data           : t_data_packet;

  begin
    -- dokud je neco ve fronte, zahazuju to
    while que.try_accept_any_msg(packet,t_wait_immediate) loop
      data:=p_data_packet(packet)^;
      discard packet;
      if data.style=t_dps_signal and then data.signal=t_dpss_eod then
        if transfer_eod then
          target^.write_packet(data);
          end if;
      else
        target^.write_packet(data);
        end if;
      end loop;
    end transfer_buffered_packets;

  
  
  --------------------------------------------------------------------------------------------------
  static drop_packets =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    data           : t_data_packet;

  begin
    -- dokud je neco ve fronte, zahazuju to
    while que.try_accept_any_msg(packet,t_wait_immediate) loop
      data:=p_data_packet(packet)^;
      discard packet;
      discard_packet(data);
      end loop;
    end drop_packets;

  
  
  ------------------------------------------------------------------------------------------------
  override c_input_stream.close =
  ------------------------------------------------------------------------------------------------
  begin
    -- testuju legalnost pozadavku
    if closed then
      raise stream_already_closed;
      end if;
    if _isinitialized then
      -- zabiju pomocne cerpadlo
      c_task:(this).kill;
      
      --zavru zdroj
      _source^.close();
      
      -- uvolnim packety v bufferu
      drop_packets;
      end if;
    closed:=true;
    end close;



  ------------------------------------------------------------------------------------------------
  override c_input_stream.is_eod  =
  ------------------------------------------------------------------------------------------------
  begin
    if closed then
      raise stream_already_closed;
      end if;

    -- vratim jestli uz byl precten end of data packet
    result:=eod;
    end is_eod;



  ------------------------------------------------------------------------------------------------
  override c_input_stream.read_packet =
  ------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    size           : t_offset;

  begin
    -- otestuju opravnenost pozadavku
    if closed then
      raise stream_already_closed;
      end if;
    if eod then
      raise stream_end_of_data;
      end if;

    if longpos<>0 then
      size:=packet_size(longpacket)-longpos;
      if size>options.maximal_size then
        size:=options.maximal_size;
        end if;

      new data.data range size;
      data.style:=t_dps_dynamic;
      copy_from_packet(longpacket,longpos,data.data,data.size,size);
      if packet_size(longpacket)=longpos then
        discard_packet(longpacket);
        longpos:=0;
        end if;

      -- zapocitam prutok
      c_input_stream:(this).add_flow(data);
    else

      -- cekam na packet
      que.accept_any_msg(packet);
      longpacket:=p_data_packet(packet)^;

      -- uvolnim handle na packet
      discard packet;
   
      size:=packet_size(longpacket);
      if size>options.maximal_size then
        size:=options.maximal_size;
        new data.data range size;
        data.style:=t_dps_dynamic;
        copy_from_packet(longpacket,longpos,data.data,data.size,size);
      else
        data:=longpacket;
        longpacket:=nil;
        end if;

      -- zapocitam prutok
      c_input_stream:(this).add_flow(data);

      -- zjistim jestli uz byl posledni
      if data.style=t_dps_signal then 
        if data.signal=t_dpss_eod then
          eod:=true;
        elsif data.signal=t_dpss_bad_data then
          raise stream_invalid_data;
          end if;
        end if;
      end if;
    end read_packet;



  ------------------------------------------------------------------------------------------------
  override c_task.run =
  ------------------------------------------------------------------------------------------------
  var
    data         : t_data_packet;
    packet       : p_data_packet;

  begin
    loop
      -- prectu packet ze zdroje
      begin
        _source^.read_packet(data,t_ro_default);

        -- vytvorim handle na packet
        new packet;
      catch
        when stream_invalid_data do
          create_bad_data(packet^);
      commit
        -- zkopiruju handle pripadne i data packetu
        if packet^.style=t_dps_callstack then
          copy_to_packet(packet^,data.data,data.size);
        else
          packet^:=data;
          end if;
        end;

      -- pripojim packet nakonec fronty
      que.append_msg(packet);
      -- jestli to byl eod, koncim
      if data.style=t_dps_signal and then data.signal=t_dpss_eod then
        break;
        end if;
      end loop;
    end run;



  ------------------------------------------------------------------------------------------------
  static init_input_buffer =
  ------------------------------------------------------------------------------------------------
  begin
    -- inicializuju zdroj
    init_reader(source);
    -- spoustim cerpadlo
    c_task:(this).start;
    end init_input_buffer;
  end c_input_stream_buffer;



----------------------------------------------------------------------------------------------------
class private c_output_stream_buffer =
----------------------------------------------------------------------------------------------------
var
  que              : c_queue;
  isreading        : t_logical;
  closed           : t_logical;
  bad_data         : t_logical;

  --------------------------------------------------------------------------------------------------
  static drop_packets =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    data           : t_data_packet;

  begin
    -- dokud je neco ve fronte, zahazuju to
    while que.try_accept_any_msg(packet,t_wait_immediate) loop
      data:=p_data_packet(packet)^;
      discard packet;
      discard_packet(data);
      end loop;
    end drop_packets;

  
  
  ------------------------------------------------------------------------------------------------
  override c_output_stream.close =
  ------------------------------------------------------------------------------------------------
  begin
    if closed then
      raise stream_already_closed;
      end if;

    if _isinitialized then 
      -- jestli druha strana stale cte
      if isreading then
        -- pockam az cerpadlo vytlaci packety ven
        c_output_stream:(this).flush;
        c_output_stream:(this).write_eod;
        -- zastavim cerpadlo
        c_task:(this).wait;
      else
        --%%TODO rozmysli se rozmyli, na sve stesti pomysli
        c_task:(this).kill;
        end if;

      -- uvolnit packety a data ktere druha strana odmitla precist
      drop_packets;

      -- zavrit cil
      _target^.close;

      closed:=true;
      end if;
    end close;



  ------------------------------------------------------------------------------------------------
  override c_output_stream.is_reading =
  ------------------------------------------------------------------------------------------------
  begin
    if closed then
      raise stream_already_closed;
      end if;
    --zjistim jestli druha strana zatim jeste poslouchha
    result:=isreading;
    end is_reading;



  ------------------------------------------------------------------------------------------------
  override c_output_stream.write_packet =
  ------------------------------------------------------------------------------------------------
  var
    packet       : p_data_packet;

  begin
    -- zjistim opravnenost pozadavku
    if closed then
      raise stream_already_closed;
      end if;
    if not isreading then
      raise stream_other_side;
      end if;

    if bad_data then --%%TODO synchronize
      -- spatne data v nekterem z predchozich packetu
      bad_data:=false;--%%TODO synchronize
      raise stream_invalid_data;
      end if;

    -- vytvorim handle na packet
    new packet;

    -- zkopiruju handle nebo i data packetu
    if data.style=t_dps_callstack then
      copy_to_packet(packet^,data.data,data.size);
    else
      packet^:=data;
      end if;

    --%%TODO join short packets
    
    que.append_msg(packet);

    -- jestli to byl flush, cekam az cerpadlo vytlaci data ven
    if data.style=t_dps_signal and then data.signal=t_dpss_flush then
      que.wait_empty;
      end if;

    --zapocitam prutok
    c_output_stream:(this).add_flow(data);
    --data:=nil;
    end write_packet;



  ------------------------------------------------------------------------------------------------
  override c_task.run =
  -- pomocne cerpadlo
  ------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    data           : t_data_packet;

  begin
    loop
      -- cekam na packet
      que.accept_any_msg(packet);
      data:=p_data_packet(packet)^;

      -- uvolnim handle packetu
      discard packet;

      -- tlacim packet na cil
      begin
        _target^.write_packet(data);
      catch
        when stream_other_side do
          isreading:=false; -- %%TODO synchronize ?
        when stream_invalid_data do
          bad_data:=true;  -- %%TODO synchronize ?
        end;

      -- jestli byl posledni koncim
      if data.style=t_dps_signal and then data.signal=t_dpss_eod then
        break;
        end if;
      end loop;
    end run;



  ------------------------------------------------------------------------------------------------
  static init_output_buffer =
  ------------------------------------------------------------------------------------------------
  begin
    -- pripojim cil
    init_writer(target);

    -- zapnu cerpadlo
    c_task:(this).start;
    end init_output_buffer;



  ------------------------------------------------------------------------------------------------
  entry = 
  ------------------------------------------------------------------------------------------------
  begin
    isreading:=true;
    end entry;
  end c_output_stream_buffer;



----------------------------------------------------------------------------------------------------
class private c_output_stream_passive_buffer =
----------------------------------------------------------------------------------------------------
var
  que              : c_queue;
  closed           : t_logical;

  --------------------------------------------------------------------------------------------------
  static drop_packets =
  --------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    data           : t_data_packet;

  begin
    -- dokud je neco ve fronte, zahazuju to
    while que.try_accept_any_msg(packet,t_wait_immediate) loop
      data:=p_data_packet(packet)^;
      discard packet;
      discard_packet(data);
      end loop;
    end drop_packets;

  

  ------------------------------------------------------------------------------------------------
  override c_output_stream.close =
  ------------------------------------------------------------------------------------------------
  begin
    if closed then
      raise stream_already_closed;
      end if;

    -- uvolnit packety a data
    drop_packets;

    closed:=true;
    end close;



  ------------------------------------------------------------------------------------------------
  override c_output_stream.is_reading =
  ------------------------------------------------------------------------------------------------
  begin
    if closed then
      raise stream_already_closed;
      end if;
    result:=true;
    end is_reading;



  ------------------------------------------------------------------------------------------------
  override c_output_stream.write_packet =
  ------------------------------------------------------------------------------------------------
  var
    packet       : p_data_packet;

  begin
    -- zjistim opravnenost pozadavku
    if closed then
      raise stream_already_closed;
      end if;

    -- vytvorim handle na packet
    new packet;

    -- zkopiruju handle nebo i data packetu
    if data.style=t_dps_callstack then
      copy_to_packet(packet^,data.data,data.size);
    else
      packet^:=data;
      end if;

    --%%TODO join short packets
    
    que.append_msg(packet);

    -- jestli to byl flush, cekam az cerpadlo vytlaci data ven
    if data.style=t_dps_signal and then data.signal=t_dpss_flush then
      que.wait_empty;
      end if;

    --zapocitam prutok
    c_output_stream:(this).add_flow(data);
    --data:=nil;
    end write_packet;



  ------------------------------------------------------------------------------------------------
  static transfer_buffered_packets =
  -- pomocne cerpadlo
  ------------------------------------------------------------------------------------------------
  var
    packet         : t_pointer;
    data           : t_data_packet;

  begin
    loop
      -- cekam na packet
      que.accept_any_msg(packet);
      data:=p_data_packet(packet)^;

      -- uvolnim handle packetu
      discard packet;

      -- jestli byl posledni koncim
      if data.style=t_dps_signal and then data.signal=t_dpss_eod then
        if transfer_eod then
          target^.write_packet(data);
          end if;
        break;
      else
        -- tlacim packet na cil
        target^.write_packet(data);
        end if;
      end loop;
  leave
    -- uvolnit packety a data ktere druha strana odmitla precist
    drop_packets;
    end transfer_buffered_packets;
  end c_output_stream_passive_buffer;



---------------------------------------------------------------------------------------------------
class private c_input_stream_redirector =
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  override c_input_stream.close =
  ------------------------------------------------------------------------------------------------
  begin
    if _isinitialized then
      _source^.close();
      end if;
    end close;

  
  
  ------------------------------------------------------------------------------------------------
  override c_input_stream.read_packet =
  ------------------------------------------------------------------------------------------------
  begin
    if not _isinitialized then
      raise stream_error;
      end if;
      
    _source^.read_packet(data,options);
    c_input_stream:(this).add_flow(data);
    end read_packet;


  
  ------------------------------------------------------------------------------------------------
  override c_input_stream.is_eod =
  ------------------------------------------------------------------------------------------------
  begin
    if not _isinitialized then
      raise stream_error;
      end if;

    result:=_source^.is_eod();
    end is_eod;

  
  
  ------------------------------------------------------------------------------------------------
  static init_input_redirector =
  ------------------------------------------------------------------------------------------------
  begin
    init_reader(source);
    end init_input_redirector;



  ------------------------------------------------------------------------------------------------
  static change_input_redirector =
  ------------------------------------------------------------------------------------------------
  begin
    init_reader(source);
    end change_input_redirector;
  end c_input_stream_redirector;



----------------------------------------------------------------------------------------------------
class private c_output_stream_redirector =
----------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------------------------
  override c_output_stream.close =
  ------------------------------------------------------------------------------------------------
  begin
    if _isinitialized then
      _target^.close();
      end if;
    end close;

  
  
  ------------------------------------------------------------------------------------------------
  override c_output_stream.write_packet =
  ------------------------------------------------------------------------------------------------
  begin
    if not _isinitialized then
      raise stream_error;
      end if;

    _target^.write_packet(data);
    c_output_stream:(this).add_flow(data);
    end write_packet;

  
  
  ------------------------------------------------------------------------------------------------
  override c_output_stream.is_reading =
  ------------------------------------------------------------------------------------------------
  begin
    if not _isinitialized then
      raise stream_error;
      end if;

    result:=_target^.is_reading();
    end is_reading;

  
  
  ------------------------------------------------------------------------------------------------
  static init_output_redirector =
  ------------------------------------------------------------------------------------------------
  begin
    init_writer(target);
    end init_output_redirector;



  ------------------------------------------------------------------------------------------------
  static change_output_redirector =
  ------------------------------------------------------------------------------------------------
  begin
    init_writer(target);
    end change_output_redirector;
  end c_output_stream_redirector;



---------------------------------------------------------------------------------------------------
class private c_input_stream_frame =
----------------------------------------------------------------------------------------------------
var
    eod            : t_logical;
    closed         : t_logical;
    maxlength      : t_offset;

  ------------------------------------------------------------------------------------------------
  override c_input_stream.close =
  ------------------------------------------------------------------------------------------------
  begin
    if closed then
      raise stream_already_closed;
      end if;
    closed:=true;
    end close;

  
  
  ------------------------------------------------------------------------------------------------
  override c_input_stream.read_packet =
  ------------------------------------------------------------------------------------------------
  var
    length         : t_offset;
    _options       : t_read_options;

  begin
    c_input_stream:(this).get_flow(length);
    if length=maxlength then
      create_eod(data);
    else
      _options:=options;
      if _options.maximal_size>maxlength-length then
        _options.maximal_size:=maxlength-length;
        end if;
      _source^.read_packet(data,_options);
      c_input_stream:(this).add_flow(data);
      end if;
    end read_packet;


  
  ------------------------------------------------------------------------------------------------
  override c_input_stream.is_eod =
  ------------------------------------------------------------------------------------------------
  begin
    result:=eod;
    end is_eod;

  
  
  ------------------------------------------------------------------------------------------------
  static init_input_stream_frame =
  ------------------------------------------------------------------------------------------------
  begin
    init_reader(source);
    this.maxlength:=max_length;
    end init_input_stream_frame;
  end c_input_stream_frame;



----------------------------------------------------------------------------------------------------
class private c_output_stream_frame =
----------------------------------------------------------------------------------------------------
var
    isreading      : t_logical;
    closed         : t_logical;
    maxlength      : t_offset;

  ------------------------------------------------------------------------------------------------
  override c_output_stream.close =
  ------------------------------------------------------------------------------------------------
  begin
    if closed then
      raise stream_already_closed;
      end if;
    closed:=true;
    end close;

  
  
  ------------------------------------------------------------------------------------------------
  override c_output_stream.write_packet =
  ------------------------------------------------------------------------------------------------
  var
    length         : t_offset;

  begin
    c_output_stream:(this).get_flow(length);
    c_output_stream:(this).add_flow(data);
    _target^.write_packet(data);
    if length>maxlength then
      raise stream_other_side;
      isreading:=false;
      end if;
    if length=maxlength then
      isreading:=false;
      end if;
    end write_packet;

  
  
  ------------------------------------------------------------------------------------------------
  override c_output_stream.is_reading =
  ------------------------------------------------------------------------------------------------
  begin
    result:=isreading;
    end is_reading;

  
  
  ------------------------------------------------------------------------------------------------
  static init_output_stream_frame =
  ------------------------------------------------------------------------------------------------
  begin
    init_writer(target);
    this.maxlength:=max_length;
    isreading:=true;
    end init_output_stream_frame;
  end c_output_stream_frame;



