----------------------------------------------------------------------------------------------------
module public iso10646 =
-- Support for 32bit ISO 10646 character coding.
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

type
  t_char_category      = enum
    cc_not_valid;            -- [Cn] Other, Not Assigned (no characters in the file have this property)
    cc_control;              -- [Cc] Other, Control                                                                      
    cc_separator;            -- [Zs] Separator, Space                                                                    
    cc_punctuation_other;    -- [Po] Punctuation, Other                                                                  
    cc_symbol_currency;      -- [Sc] Symbol, Currency                                                                    
    cc_punctuation_open;     -- [Ps] Punctuation, Open                                                                   
    cc_punctuation_close;    -- [Pe] Punctuation, Close                                                                  
    cc_symbol_math;          -- [Sm] Symbol, Math                                                                        
    cc_punctuation_dash;     -- [Pd] Punctuation, Dash                                                                   
    cc_number_decimal;       -- [Nd] Number, Decimal Digit                                                               
    cc_letter_uppercase;     -- [Lu] Letter, Uppercase                                                                   
    cc_symbol_modifier;      -- [Sk] Symbol, Modifier                                                                    
    cc_punctuation_connector;-- [Pc] Punctuation, Connector                                                              
    cc_letter_lowercase;     -- [Ll] Letter, Lowercase                                                                   
    cc_symbol_other;         -- [So] Symbol, Other                                                                       
    cc_punctuation_initial;  -- [Pi] Punctuation, Initial quote (may behave like Ps or Pe depending on usage)            
    cc_number_other;         -- [No] Number, Other                                                                       
    cc_punctuation_final;    -- [Pf] Punctuation, Final quote (may behave like Ps or Pe depending on usage)              
    cc_letter_other;         -- [Lo] Letter, Other                                                                       
    cc_letter_titlecase;     -- [Lt] Letter, Titlecase                                                                   
    cc_letter_modifier;      -- [Lm] Letter, Modifier                                                                    
    cc_mark_non_spacing;     -- [Mn] Mark, Non-Spacing                                                                   
    cc_mark_enclosing;       -- [Me] Mark, Enclosing                                                                     
    cc_format;               -- [Cf] Other, Format                                                                       
    cc_mark_spacing_combining;    -- [Mc] Mark, Spacing Combining                                                             
    cc_number_letter;        -- [Nl] Number, Letter                                                                      
    cc_separator_line;       -- [Zl] Separator, Line                                                                     
    cc_separator_paragraph;  -- [Zp] Separator, Paragraph                                                                
    cc_surrogate;            -- [Cs] Other, Surrogate                                                                    
    cc_other_private;        -- [Co] Other, Private Use                                                                  
    end enum;


  t_unicode_block_name = enum                    -- names of blocks of unicode values 
    Basic_Latin;
    Latin_1_Supplement;
    Latin_Extended_A;
    Latin_Extended_B;
    IPA_Extensions;
    Spacing_Modifier_Letters_Chart;
    Combining_Diacritical_Marks;
    Greek;
    Cyrillic;
    Cyrillic_Supplement;
    Armenian;
    Hebrew;
    Arabic;
    Syriac;
    Thaana;
    Devanagari;
    Bengali;
    Gurmukhi;
    Gujarati;
    Oriya;
    Tamil;
    Telugu;
    Kannada;
    Malayalam;
    Sinhala;
    Thai;
    Lao;
    Tibetan;
    Myanmar;
    Georgian;
    Hangul_Jamo;                    
    Ethiopic;
    Cherokee;
    Unified_Canadian_Aboriginal_Syllabic;
    Ogham;
    Runic;
    Tagalog;
    Hanunoo;
    Buhid;
    Tagbanwa;
    Khmer;
    Mongolian;
    Latin_Extended_Additional;
    Greek_Extended;
    General_Punctuation;
    Superscripts_and_Subscripts;
    Currency_Symbols;
    Combining_Marks_for_Symbols;
    Letterlike_Symbols;
    Number_Forms;
    Arrows;
    Mathematical_Operators;
    Miscellaneous_Technical_Supplementary;
    Control_Pictures_Supplementary;
    Optical_Character_Recognition;
    Enclosed_Alphanumerics;
    Box_Drawing;
    Block_Elements;
    Geometric_Shapes;
    Miscellaneous_Symbols;
    Dingbats;
    Miscellaneous_Mathematical_Symbols_A;
    Supplemental_Arrows_A;
    Braille_Patterns;
    Supplemental_Arrows_B;
    Miscellaneous_Mathematical_Symbols_B;
    Supplemental_Mathematical_Operators;
    CJK_Radicals_Supplement;
    Kangxi_Radicals;
    Ideographic_Description_Characters;
    CJK_Symbols_and_Punctuation;
    Hiragana;
    Katakana;
    Bopomofo;
    Hangul_Compatibility_Jamo;
    Kanbun;
    Bopomofo_Extended;
    Enclosed_CJK_Letters_and_Months;            
    CJK_Compatibility;                          
    CJK_Unified_Ideographs_Extension_A;
    CJK_Unified_Ideographs;
    Yi_Syllables;
    Yi_Radicals;
    Hangul_Syllables;
    High_Surrogates;
    Low_Surrogates;
    Private_Use_Area;
    CJK_Compatibility_Ideographs;
    Alphabetic_Presentation_Forms;
    Arabic_Presentation_Forms_A;
    Variation_Selectors;
    Combining_Half_Marks;
    CJK_Compatibility_Forms;
    Small_Form_Variants;
    Arabic_Presentation_Forms_B;
    Halfwidth_and_Fullwidth_Forms;
    Specials;
    Old_Italic;
    Gothic;
    Deseret;
    Byzantine_Musical_Symbols;
    Musical_Symbols;
    Mathematical_Alphanumeric_Symbols;
    CJK_Unified_Ideographs_Extension_B;
    CJK_Compatibility_Ideographs_Supplement;
    Tags;
    Supplementary_Private_Use_Area_A;
    Supplementary_Private_Use_Area_B;
    end enum;

  
  t_unicode_block  = record
    name           : t_unicode_block_name;       -- name of the block
    start          : t_char32;                   -- first character in the block
    end record;



----------------------------------------------------------------------------------------------------
procedure iso_char_to_upper (
    c          : in t_char32)                    -- character to convert
    return t_char32;                             -- converted character
-- Convers given character <par>c</par> that is an upper-case letter to corresponding lower-case
-- letter. If <par>c</par> is already a lower-case letter or any other non-letter character, it is
-- returned unchanged.
----------------------------------------------------------------------------------------------------
procedure iso_char_to_lower (
    c          : in t_char32)                    -- character to convert
    return t_char32;                             -- converted character
-- Convers given character <par>c</par> that is a lower-case letter to corresponding upper-case
-- letter. If <par>c</par> is already an upper-case letter or any other non-letter character, it is
-- returned unchanged.
----------------------------------------------------------------------------------------------------
procedure iso_char_to_title (
    c          : in t_char32)                    -- character to convert
    return t_char32;                             -- converted character
-- Convers given character <par>c</par> that is an upper-case or a lower-case letter to 
-- corresponding tittle-case letter. If <par>c</par> is already a lower-case letter or any other 
-- non-letter character, it is returned unchanged.
----------------------------------------------------------------------------------------------------
procedure iso_get_char_category (
    c          : in t_char32)                    -- character to convert
    return t_char_category;                      -- value of character category
-- Returns ordinal value of category to the given character <par>c</par>. If zero than given 
-- character <par>c</par> is not a valid character.
----------------------------------------------------------------------------------------------------
procedure iso_char_get_numeric_value (
    c          : in t_char16)                    -- character 
    return t_signed32;                           -- numeric value represented by the character
-- Returns numeric value to the given character <par>c</par>.
----------------------------------------------------------------------------------------------------
procedure iso_char_is_lower (
    c          : in t_char32)                    -- character to evaluate
    return t_logical;                             
-- Returns true if the given character <par>c</par> is a lower-case.
----------------------------------------------------------------------------------------------------
procedure iso_char_is_upper (
    c          : in t_char32)                    -- character to evaluate
    return t_logical;                             
-- Returns true if the given character <par>c</par> is a upper-case.
----------------------------------------------------------------------------------------------------
procedure iso_char_is_title (
    c          : in t_char32)                    -- character to evaluate
    return t_logical;                             
-- Returns true if the given character <par>c</par> is a tittle-case.
----------------------------------------------------------------------------------------------------
procedure iso_char_is_letter (
    c          : in t_char32)                    -- character to evaluate
    return t_logical;                             
-- Returns true if the given character <par>c</par> is a letter.
----------------------------------------------------------------------------------------------------
procedure iso_char_is_digit (
    c          : in t_char32)                    -- character to evaluate
    return t_logical;                             
-- Returns true if the given character <par>c</par> is a decimal digit.
----------------------------------------------------------------------------------------------------
procedure iso_char_is_number (
    c          : in t_char32)                    -- character to evaluate
    return t_logical;                             
-- Returns true if the given character <par>c</par> is a number.
----------------------------------------------------------------------------------------------------
procedure iso_get_char_property (
    c          : in t_char32)                    -- character to evaluate
    return t_mod_unsigned32;                     -- value of character category
-- working procedure to be deleted
-- %% FLEX
----------------------------------------------------------------------------------------------------
procedure iso_get_block (
    c          : in t_char32)                    -- character to evaluate
    return t_unicode_block;                      -- block which character belongs to
-- Returns type of block which given character <par>c</par> belongs to.
----------------------------------------------------------------------------------------------------

end iso10646;
