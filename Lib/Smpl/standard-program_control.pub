----------------------------------------------------------------------------------------------------
module public program_control =
-- Flex Standard Library
-- General program execution control.
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

message
  process_start_error;

type
  -- sigle environment variable
  t_environment_variable = record
      env_name     : p_char32ustr;               -- name of the environment variable
      env_value    : p_char32ustr;               -- value of the environment variable
      end record;
  p_environment_variable = ^t_environment_variable;

  -- block of environment variables
  t_environment_variables = string of t_environment_variable;
  p_environment_variables = ^t_environment_variables;

  -- block of command line parameters
  t_command_line_parameters = string of p_char32ustr;
  p_command_line_parameters = ^t_command_line_parameters;

----------------------------------------------------------------------------------------------------
procedure get_command_line (
    cmd_line       : out p_char32ustr);          -- the command line string
-- Returns the command line string of the program. The command line is taken from the operating
-- system without any modifications except character encodig changes.
--   The caller is responsible for freeing the memory.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
procedure get_command_line_parameters (
    cmd_line       : out p_command_line_parameters); -- the command line string
-- Returns the command line string of the program split into separate parameters. The command line
-- is taken from the operating system without any modifications except character encodig changes and
-- removal of the actual program name, if placed into the command line string by the operating
-- system.
--   The caller is responsible for freeing the memory. The [discard_command_line_parameters] 
-- subprogram is provided to ease this task.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
procedure parse_command_line_parameters (
    full_cmd_line  : in p_char32ustr;            -- the command line string
    cmd_line       : out p_command_line_parameters;
    ignore_first   : in t_logical := false);     -- T-ignore the first "parameter"
-- %%TODO(DOCUMENTATION)
----------------------------------------------------------------------------------------------------
procedure compose_command_line_parameters (
    full_cmd_line  : out p_char32ustr;            -- the command line string
    cmd_line       : in p_command_line_parameters;
    ignore_first   : in t_logical := false);     -- T-ignore the first "parameter"
-- %%TODO(DOCUMENTATION)
----------------------------------------------------------------------------------------------------
procedure get_environment_variables (
    env_vars       : out p_environment_variables;-- list of environment variables
    error          : out t_logical);             -- result of an operation
-- Returns pointer to a list of all environment variables [env_vars]. Environment variables are 
-- taken from the operating system without any modifications except character encoding changes. If
-- there are no environment variables at all, [env_vars] points to an empty string.
--   The caller is responsible for freeing the memory. The [discard_environment_variables] 
-- subprogram is provided to ease this task.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
procedure get_environment_variable (
    env_var        : in t_char32ustr;            -- environment variable name
    env_value      : out p_char32ustr;           -- environment variable value
    error          : out t_logical);             -- result of an operation
-- Returns the environment variable`s [env_var] value. The value is taken from the operating
-- system without any modifications except character encodig changes. When no such environment
-- variable exists, the subprogram fails.
--   The caller is responsible for freeing the memory.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
procedure set_environment_variable (
    env_var        : in t_char32ustr;            -- environment variable name
    env_value      : in t_char32ustr;            -- environment variable value
    error          : out t_logical);             -- result of an operation
-- Sets the environment variable`s [env_var] value. Neither [env_var] nor [env_value] may be an 
-- empty string, otherwise the subprogram fails.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
procedure delete_environment_variable (
    env_var        : in t_char32ustr;            -- environment variable name
    error          : out t_logical);             -- result of an operation
-- Deletes the environment variable [env_var]. [env_var] may not be an empty string, otherwise the 
-- subprogram fails.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
procedure discard_environment_variables (
    env_vars       : in out p_environment_variables); -- list to be discarded
-- Helper subprogram to discard a block of environment variables.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
procedure discard_command_line_parameters (
    cmd_line       : in out p_command_line_parameters); -- list to be discarded
-- Helper subprogram to discard a block of command line parameters.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
procedure run_external_program(
    cmd_line       : in p_command_line_parameters;
    directory      : in p_char32ustr:=nil;
    env_vars       : in p_environment_variables:=nil;
    exitcode       : in p_unsigned:=nil);
-- Starts new process
-- [cmd_line] list of parameters, first parameter is name of executable file
-- [directory] startup directyory, if nil process inherits current
-- [env_vars] is optional list of environment variables, if nil is passed new process inherits environment
-- [exitcode] if is not nil caller is blocked until child process finish and [exitcode^] is set to exitcode of process
-- Result:
--  raise process_start_error when program didn't started succesfuly
----------------------------------------------------------------------------------------------------
procedure set_task_exit_code(
    exitcode       : t_unsigned);
-- sets exitcode for current task
----------------------------------------------------------------------------------------------------

end program_control;