type
  -- typ pro unchecked data v datov˜ch proudech a ulo‘i¨t¡ch
  t_data_byte      = protected mod unsigned 8;
  t_data_string    = string of aliased t_data_byte;
  t_data_array     = array of aliased t_data_byte;
  t_data_array_long= array 0..$FFFF_FFFF of aliased t_data_byte;
  
  p_data_array      = ^t_data_array      for machine_pointer use true;
  p_data_array_long = ^t_data_array_long for machine_pointer use true;
  p_data_string     = ^t_data_string     for machine_pointer use true;

const
    dp_optimal_packet_size = 65536;

const
    t_dpss_invalid : t_unsigned = 0;             -- no signal
    t_dpss_eod     : t_unsigned = 1;             -- end of data signal
    t_dpss_flush   : t_unsigned = 2;             -- flush signal
    t_dpss_seek    : t_unsigned = 3;             -- seek

type
  t_data_packet;
  p_data_packet  = ^t_data_packet for machine_pointer use true;

  t_data_packet_style = enum
    t_dps_invalid;                               -- invalid
    t_dps_signal;                                -- signal packet
    t_dps_temporary;                             -- on stack
    t_dps_heap;                                  -- data is pointer to memory deallocated by stream using discard
    t_dps_immortal;                              -- data is pointer to Data or Code segment or very long lived data
    t_dps_other;                                 -- data is pointer memory with special t_data_packet_dispose method
    end enum
      for size use 2;

  t_data_packet_hint = enum
    t_dph_invalid;                               -- no hint
    t_dph_flex_string;                           -- string :legnth at data-4 possition
    end enum
      for size use 2;

  t_data_packet_dispose = procedure(
    packet         : in ref t_data_packet);
  p_data_packet_dispose = ^t_data_packet_dispose;

  t_data_packet_read = procedure(
    packet         : in ref t_data_packet;
    data           : out p_data_array;
    size           : out t_offset);
  p_data_packet_read = ^t_data_packet_read;

  t_data_packet_other = record
    read           : p_data_packet_read;
    dispose        : p_data_packet_dispose;
    end record;
  p_data_packet_other = ^t_data_packet_other for machine_pointer use true;

  t_data_packet = record
    style          : t_data_packet_style         for position use 0;
    phint          : t_data_packet_hint          for position use 2;
    data           : p_data_array                for position use 4;
    signal         : t_unsigned                  for position use 4;
    other          : p_data_packet_other         for position use 8;
    size           : t_offset                    for position use 8;
    signal_data    : p_data_array                for position use 8;
    end record;



----------------------------------------------------------------------------------------------------
procedure create_flush(
    packet         : out t_data_packet);
-- create flush packet
----------------------------------------------------------------------------------------------------
procedure create_eod(
    packet         : out t_data_packet);
-- create end of data packet
----------------------------------------------------------------------------------------------------
procedure create_signal(
    packet         : out t_data_packet;
    signal         : in t_unsigned;
    userdata       : in p_data_array:=nil);
-- create user signal
-- userdata on heap, auto discard by receiver
----------------------------------------------------------------------------------------------------
procedure create_temporary_text(
    packet         : out t_data_packet;
    text           : in ref t_char32ustr);
-- create text packet
----------------------------------------------------------------------------------------------------
procedure create_packet(
    packet         : out t_data_packet;
    data           : in p_data_array;
    size           : in t_offset;
    style          : in t_data_packet_style);
-- create packet, freeing data by [style]
----------------------------------------------------------------------------------------------------
procedure copy_to_packet(
    packet         : out t_data_packet;
    data           : in p_data_array;
    size           : in t_offset);
-- create packet, copying data
----------------------------------------------------------------------------------------------------
procedure discard_packet(
    packet         : in t_data_packet);
-- destroy packet
----------------------------------------------------------------------------------------------------
procedure read_packet(
    packet         : in ref t_data_packet;
    data           : out p_data_array;
    size           : out t_offset);
-- reads packet data
----------------------------------------------------------------------------------------------------
procedure read_temporary_text(
    packet         : in ref t_data_packet;
    text           : out p_char32ustr);
-- reads text packet
----------------------------------------------------------------------------------------------------
procedure copy_from_packet(
    packet         : in t_data_packet;
    poffset        : in out t_offset;
    data           : in p_data_array;
    doffset        : in out t_offset;
    size           : in t_offset);
-- reads packet data
----------------------------------------------------------------------------------------------------
