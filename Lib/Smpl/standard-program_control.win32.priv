----------------------------------------------------------------------------------------------------
module private program_control =
-- General program execution control.
-- Flex Standard Multi-Platform Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

with 
  standard.strings;

----------------------------------------------------------------------------------------------------
procedure get_command_line =
-- Returns the command line string of the program. The command line is taken from the operating
-- system without any modifications except character encodig changes. The caller is responsible for
-- freeing the memory.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
begin
  from_system_string(system.windows.winbase.getcommandlinew,cmd_line);
  end get_command_line;



----------------------------------------------------------------------------------------------------
procedure get_command_line_parameters =
-- Returns the command line string of the program split into separate parameters. The command line
-- is taken from the operating system without any modifications except character encodig changes and
-- removal of the actual program name, if placed into the command line string by the operating
-- system.
--   The caller is responsible for freeing the memory.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
var
  full_cmd_line    : p_char32ustr;               -- full command line

begin
  -- retrieve the command line string
  get_command_line(full_cmd_line);

  -- split into separate parameters
  parse_command_line_parameters(full_cmd_line,cmd_line,for ignore_first use true);

leave
  -- free memory
  discard full_cmd_line;
  end get_command_line_parameters;



----------------------------------------------------------------------------------------------------
procedure parse_command_line_parameters =
-- %%TODO(DOCUMENTATION)
----------------------------------------------------------------------------------------------------
var
  parameter        : p_char32ustr;               -- single parameter
  in_quotes        : t_logical;                  -- text is between quotes
  skip_whitespace  : t_logical;                  -- skip whitespace
  first_parameter  : t_logical;                  -- the actual parametr is the first parameter

begin
  -- there will be at least one command line parameter
  new cmd_line range {%%TODO(ADJUST) předělat!}30;

  -- split into separate parameters
  first_parameter:=ignore_first;
  for i in full_cmd_line^:range loop
    -- handle new parameter
    if (full_cmd_line^[i]=" "{%%TODO(SET) in [" ",\9]} and not in_quotes and not skip_whitespace) or i=full_cmd_line^:first then
      -- append previous parameter to the list
      if parameter<>nil then
        if first_parameter

          -- if it is the first parameter, discard it, because it contains just the program name
          then 
            discard parameter;
            first_parameter:=false;

          -- pass out all other parameters
          else cmd_line^ & parameter;
          end if;
        end if;

      -- prepare a new parameter
      new parameter range {%%TODO(ADJUST) předělat!}100;

      -- and skip all white space
      skip_whitespace:=true;
      end if;

    -- handle quotes
    if full_cmd_line^[i]=""" then
      not in_quotes;
      end if;

    -- prefixed quote
    if (full_cmd_line^[i]="\" and i<full_cmd_line^:length) and then full_cmd_line^[i+1]=""" then
      parameter^ & """;
      skip_whitespace:=false;

    -- ignore quotes
    elsif full_cmd_line^[i]=""" then
      -- ignore
      skip_whitespace:=false;

    -- white space
    elsif full_cmd_line^[i]=" "{%%TODO(SET) in [" ",\9]} then
      if not skip_whitespace then
        parameter^ & full_cmd_line^[i];
        end if;

    -- other characters
    else 
      parameter^ & full_cmd_line^[i];
      skip_whitespace:=false;
      end if;
    end loop;

  -- finally append the last parameter, if not empty and not being also the first parameter
  if parameter<>nil and then parameter^:length>0 and then not first_parameter
    then cmd_line^ & parameter;
    else discard parameter;
    end if;
  end parse_command_line_parameters;



----------------------------------------------------------------------------------------------------
procedure compose_command_line_parameters =
----------------------------------------------------------------------------------------------------
begin
  new full_cmd_line range 1000;
  if full_cmd_line<>nil then
    for p in cmd_line^:range loop
      full_cmd_line^ & '"';
      full_cmd_line^ & cmd_line^[p]^;
      full_cmd_line^ & '" ';
      end loop;
    end if;
  end compose_command_line_parameters;


----------------------------------------------------------------------------------------------------
procedure get_environment_variables =
-- Returns pointer to a list of all environment variables [env_vars]. Environment variables are 
-- taken from the operating system without any modifications except character encoding changes. If
-- there are no environment variables at all, [env_vars] points to an empty string.
--   The caller is responsible for freeing the memory.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
var
  penv_strings     : windows.windef.lpvoid;      -- pointer to block of with environment strings
  env_var          : t_environment_variable;     -- one environment variable
  strings_count    : t_unsigned;                 -- number of strings in returned block 
  i                : t_unsigned;                 -- counter 
  sep_position     : t_unsigned;                 -- position of string separator
  tmp_str          : p_char32ustr;               -- temporary string pointer

begin
  -- make system call
  penv_strings:=system.windows.winbase.getenvironmentstrings;
  
  -- count number of strings returned by system call
  while windows.windef.winnt.wcharstr(penv_strings^)[i]<>\0 or 
        windows.windef.winnt.wcharstr(penv_strings^)[i+1]<>\0 loop; 
    if windows.windef.winnt.wcharstr(penv_strings^)[i]=\0 then strings_count+1 end if;
    i+1;
    end loop;
  if i>0 
    -- add one to strings_count
    then
    strings_count+1;
    -- no string returned from system
    else return;
    end if;
    
  -- allocate memory for result
  new env_vars range strings_count;

  -- fill the result list
  i:=0;
  loop; 
    -- get environment strings element and increment i by size of it
    -- %%TO CHECK tohle přetypování se mi moc nelíbí 
    from_system_string(windows.windef.winnt.pwstr(windows.windef.lpvoid(^(windows.windef.winnt.pwstr(penv_strings)^[i]))),tmp_str);
    i+tmp_str^:length;
    i+1;

    -- separete string into enviroment variable record
    sep_position:=str_pos_substring(tmp_str^,'=');
    if sep_position<2 
      then 
        new env_var.env_name range 1;  -- %% there should be a zero size
        env_var.env_name^:='';
      else str_create_copy(tmp_str^,env_var.env_name,1,str_pos_substring(tmp_str^,'=')-1);
      end if;
    if sep_position>=tmp_str^:length
      then 
        new env_var.env_value range 1;  -- %% there should be a zero size
        env_var.env_value^:='';
      else str_create_copy(tmp_str^,env_var.env_value,str_pos_substring(tmp_str^,'=')+1,tmp_str^:length);
      end if;
    discard tmp_str;

    -- add to result
    env_vars^ & env_var;
    until windows.windef.winnt.wcharstr(penv_strings^)[i]=\0;

leave
  -- free memory
  discard penv_strings;
  end get_environment_variables;



----------------------------------------------------------------------------------------------------
procedure get_environment_variable =
-- Returns the environment variable`s [env_var] value. The value is taken from the operating
-- system without any modifications except character encodig changes. When no such environment
-- variable exists, the subprogram fails.
--   The caller is responsible for freeing the memory.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
var
  env_value_size   : windows.windef.dword;       -- the real length of string returned as [env_value]
  penv_var         : windows.windef.winnt.pwstr; -- system pointer
  penv_value       : windows.windef.winnt.pwstr; -- system pointer

begin
  -- initialize passed parameters
  to_system_string(env_var,penv_var);

  -- get the size of env_value string
  env_value_size:=system.windows.winbase.getenvironmentvariablew(penv_var,nil,env_value_size);

  -- if no enviroment valiable is found
  if env_value_size=0 then
    error:=true;
    return;
    end if;

  -- allocate space for output string
  new penv_value range t_unsigned(env_value_size);

  -- make system call again to realy get the variables value
  env_value_size:=system.windows.winbase.getenvironmentvariablew(penv_var,penv_value,env_value_size);

  -- convert system string
  from_system_string(penv_value,env_value);

leave
  -- free memory
  discard penv_value;
  discard penv_var;
  end get_environment_variable; 



----------------------------------------------------------------------------------------------------
procedure set_environment_variable =
-- Sets the environment variable`s [env_var] value. Neither [env_var] nor [env_value] may be an 
-- empty string, otherwise the subprogram fails.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
var                  
  penv_var         : windows.windef.winnt.pwstr; -- system pointer
  penv_value       : windows.windef.winnt.pwstr; -- system pointer

begin
  -- Entry condition, no input parametr can be an empty string
  if env_var='' or env_value='' then
    error:=true;
    return;
    end if;

  -- convert passed parameters
  to_system_string(env_var,penv_var);
  to_system_string(env_value,penv_value);

  -- make system call
  error:=not system.windows.winbase.setenvironmentvariablew(penv_var,penv_value);

leave
  -- free memory
  discard penv_value;
  discard penv_var;
  end set_environment_variable;



----------------------------------------------------------------------------------------------------
procedure delete_environment_variable =
-- Deletes the environment variable [env_var]. [env_var] may not be an empty string, otherwise the 
-- subprogram fails.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
var 
  penv_var         : windows.windef.winnt.pwstr; -- system pointer
  penv_value       : windows.windef.winnt.pwstr; -- system pointer

begin
  -- Entry condition, no input parametr can be an empty string
  if env_var='' then
    error:=true;
    return;
    end if;

  -- convert passed parameter
  to_system_string(env_var,penv_var);
  
  -- make system call
  error:=not system.windows.winbase.setenvironmentvariablew(penv_var,penv_value);

leave
  -- free memory
  discard penv_var;
  end delete_environment_variable;



----------------------------------------------------------------------------------------------------
procedure discard_environment_variables =
-- Helper subprogram to discard a block of environment variables.
----------------------------------------------------------------------------------------------------
begin
  if env_vars=nil then return end if;

  -- free all memory
  for i in env_vars^:range loop
    discard env_vars^[i].env_name;
    discard env_vars^[i].env_value;
    end loop;
  discard env_vars;
  end discard_environment_variables;



----------------------------------------------------------------------------------------------------
procedure discard_command_line_parameters =
-- Helper subprogram to discard a block of command line parameters.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
begin
  if cmd_line=nil then return end if;

  -- free all memory
  for i in cmd_line^:range loop
    discard cmd_line^[i];
    end loop;
  discard cmd_line;
  end discard_command_line_parameters;



----------------------------------------------------------------------------------------------------
procedure set_task_exit_code =
----------------------------------------------------------------------------------------------------
with
  flex,
  flex.tasks;

begin
--  rtl_set_task_exitcode(t_rtl_native_unsigned(exitcode));
  end set_task_exit_code;



----------------------------------------------------------------------------------------------------
procedure run_external_program = 
-- Runs an external program as a child process of the current process and optinaly waits for its
-- completion.
----------------------------------------------------------------------------------------------------
var
  ps_params        : windows.windef.winnt.pwstr;
  ps_directory     : windows.windef.winnt.pwstr;
  ps_eviron        : windows.windef.lpvoid;
  s_st_info        : aliased windows.winbase._STARTUPINFOW;
  s_pr_info        : windows.winbase._PROCESS_INFORMATION;
  f_params         : p_char32ustr;

begin
  -- the command line has to be supplied
  if cmd_line=nil then
    raise parameter_error;
    end if;

  -- convert the command line into a system string representation
  compose_command_line_parameters(f_params,cmd_line,false);
  to_system_string(f_params^,ps_params);

  -- convert environment
  if env_vars<>nil then
    --%%TODO env_vars,ps_eviron
    raise feature_not_implemented;
    end if;

  -- convert directory
  if directory<>nil then
    to_system_string(directory^,ps_directory);
    end if;
  
  -- convert command
  s_st_info.cb:=s_st_info:size;

  -- create process
  if not windows.winbase.CreateProcessW(nil,ps_params,nil,nil,false,windows.winbase.NORMAL_PRIORITY_CLASS,ps_eviron,ps_directory,^s_st_info,s_pr_info) then
    raise program_control_error;
    end if;

  -- wait for child process termination, if requested
  if exit_code<>nil then
    -- wait until child process exits
    if windows.winbase.WaitForSingleObject(s_pr_info.hProcess,windows.winbase.INFINITE)<>windows.winbase.WAIT_OBJECT_0 then
      raise tasking_error;
      end if;
    
    -- retrieve exit code
    if not windows.winbase.GetExitCodeProcess(s_pr_info.hProcess,windows.windef.DWORD(exit_code^:unchecked)) then
      raise program_control_error;
      end if;
    end if;

leave 
  -- close all handles
  if s_pr_info.hProcess<>nil then
    if not windows.winbase.CloseHandle(s_pr_info.hProcess) then
      raise program_control_error;
      end if;
    if not windows.winbase.CloseHandle(s_pr_info.hThread) then
      raise program_control_error;
      end if;
    end if;

  -- free memory
  discard ps_params;
  discard ps_directory;
  discard ps_eviron;
  discard f_params;
  end run_external_program;



end program_control;