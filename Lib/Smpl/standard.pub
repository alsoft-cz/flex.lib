----------------------------------------------------------------------------------------------------
module public standard =
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
-- To do:
--   -- unconstrained array and string types of all elementary types,
--   -- declare some universal treal (like t(un)signed is),
----------------------------------------------------------------------------------------------------
{
Datove struktury:
  -- seznam -- jednosmerny, dvojsmerny, kruhovy
  -- fronta pro planovani udalosti, operace: naplanovat udalost, zrusit urcitou udalost,
     zrusit urcity typ udalosti, naplanovat udalost tesne pred urcitou udalosti/prvni
     udalosti zadaneho typu, tesne po urcite udalosti/posledni udalosti zadaneho typu
  -- stromy -- binarni, n-arni, vyvazeny, AVL-vyvazeny, optimalizovany pro vyhledavani
     retezcu
  -- hash tabulky pro pridelovani inkrementalnich cisel objektu s moznosti pseudoindexniho
     pristupu
  -- nejaky univerzalni (ne)deterministicky automat
}

#if #environment target_os_family;='WIN32' then;
use
  system,
  system.windows,
  system.windows.windef,
  system.windows.windef.winnt;
#end if;

const
  -- library version and revision information
  smpl_version     = 1;
  smpl_revision    = 1;

message
  feature_not_implemented : exception;

message
  -- raised when disallowed parameter value or combination 
  -- of parameter values is passed to a subprogram
  parameter_error  : exception;

type
{%%TODO(ABSTRACT)
  -- root type
  t_root_type      = abstract;

  -- abstract type
  t_abstract       = t_root_type;
}
  -- integer types
  t_signed8        = {%%TODO(ABSTRACT) t_root_type extend} signed 8;
  t_signed16       = {%%TODO(ABSTRACT) t_root_type extend} signed 16;
  t_signed32       = {%%TODO(ABSTRACT) t_root_type extend} signed 32;
  t_signed         = {%%TODO(ABSTRACT) t_root_type extend} signed #environment target_machine_bits;;
  t_unsigned8      = unsigned 8;
  t_unsigned16     = unsigned 16;
  t_unsigned32     = unsigned 32;
  t_unsigned       = unsigned #environment target_machine_bits;;
  p_signed8        = ^t_signed8;
  p_signed16       = ^t_signed16;
  p_signed32       = ^t_signed32;
  p_signed         = ^t_signed;
  p_unsigned8      = ^t_unsigned8;
  p_unsigned16     = ^t_unsigned16;
  p_unsigned32     = ^t_unsigned32;
  p_unsigned       = ^t_unsigned;

  -- arrays of integer types
  t_signed8array   = array of t_signed8;
  t_signed16array  = array of t_signed16;
  t_signed32array  = array of t_signed32;
  t_signedarray    = array of t_signed;
  t_unsigned8array = array of t_unsigned8;
  t_unsigned16array= array of t_unsigned16;
  t_unsigned32array= array of t_unsigned32;
  t_unsignedarray  = array of t_unsigned;
  p_signed8array   = ^t_signed8array;
  p_signed16array  = ^t_signed16array;
  p_signed32array  = ^t_signed32array;
  p_signedarray    = ^t_signedarray;
  p_unsigned8array = ^t_unsigned8array;
  p_unsigned16array= ^t_unsigned16array;
  p_unsigned32array= ^t_unsigned32array;
  p_unsignedarray  = ^t_unsignedarray;

  -- strings of integer types
  t_signed8string   = string of t_signed8;
  t_signed16string  = string of t_signed16;
  t_signed32string  = string of t_signed32;
  t_signedstring    = string of t_signed;
  t_unsigned8string = string of t_unsigned8;
  t_unsigned16string= string of t_unsigned16;
  t_unsigned32string= string of t_unsigned32;
  t_unsignedstring  = string of t_unsigned;
  p_signed8string   = ^t_signed8string;
  p_signed16string  = ^t_signed16string;
  p_signed32string  = ^t_signed32string;
  p_signedstring    = ^t_signedstring;
  p_unsigned8string = ^t_unsigned8string;
  p_unsigned16string= ^t_unsigned16string;
  p_unsigned32string= ^t_unsigned32string;
  p_unsignedstring  = ^t_unsignedstring;

  -- modular integer types
  t_mod_signed8     = mod signed 8;
  t_mod_signed16    = mod signed 16;
  t_mod_signed32    = mod signed 32;
  t_mod_signed      = mod signed #environment target_machine_bits;;
  t_mod_unsigned8   = mod unsigned 8;
  t_mod_unsigned16  = mod unsigned 16;
  t_mod_unsigned32  = mod unsigned 32;
  t_mod_unsigned    = mod unsigned #environment target_machine_bits;;
  p_mod_signed8     = ^t_mod_signed8;
  p_mod_signed16    = ^t_mod_signed16;
  p_mod_signed32    = ^t_mod_signed32;
  p_mod_signed      = ^t_mod_signed;
  p_mod_unsigned8   = ^t_mod_unsigned8;
  p_mod_unsigned16  = ^t_mod_unsigned16;
  p_mod_unsigned32  = ^t_mod_unsigned32;
  p_mod_unsigned    = ^t_mod_unsigned;

  -- character types
  t_char8          = character 8;
  t_char16         = character 16;
  t_char32         = character 32;
  p_char8          = ^t_char8;
  p_char16         = ^t_char16;
  p_char32         = ^t_char32;

  -- strings and arrays of character types
  t_char8ustr      = string of t_char8;
  t_char16ustr     = string of t_char16;
  t_char32ustr     = string of t_char32;
  t_char32uarray   = array of t_char32;
#if #environment compiler_version;='4.0.3.14' then;
  t_char8str       = t_char8ustr  range 100;
  t_char16str      = t_char16ustr range 100;
  t_char32str      = t_char32ustr range 100;
#else;
  t_char8str       = t_char8ustr  range 200;
  t_char16str      = t_char16ustr range 200;
  t_char32str      = t_char32ustr range 200;
#end if;                                  
  t_char8lstr      = t_char8ustr  range 1000;
  t_char16lstr     = t_char16ustr range 1000;
  t_char32lstr     = t_char32ustr range 1000;
  p_char8str       = ^t_char8str;
  p_char16str      = ^t_char16str;
  p_char32str      = ^t_char32str;
  p_char8ustr      = ^t_char8ustr;
  p_char16ustr     = ^t_char16ustr;
  p_char32ustr     = ^t_char32ustr;
  p_char32uarray   = ^t_char32uarray;

  -- logical types
  t_logical8       = logical 8;
  t_logical16      = logical 16;
  t_logical32      = logical 32;
  t_logical        = logical #environment target_machine_bits;;
  p_logical8       = ^t_logical8;
  p_logical16      = ^t_logical16;
  p_logical32      = ^t_logical32;
  p_logical        = ^t_logical;

  -- floating-point types
  t_float32        = float 32;
  t_float64        = float 64;
  t_float80        = float 80;
  p_float32        = ^t_float32;
  p_float64        = ^t_float64;
  p_float80        = ^t_float80;

  -- pointers
  t_pointer        = ^unchecked {%%FLEX t_abstract};
  p_pointer        = ^t_pointer;

  -- type tag
  t_tag            = tag;
  p_tag            = ^t_tag;

  -- file and stream offset
  t_offset         = t_unsigned;                 --%%TODO change to double native unsigned (64bit on windows)

  -- system used constants
const
#if #environment target_os_family;='WIN32' then;
  null_handle      = system.windows.windef.winnt.t_handle(0);
#end if;
{
%%TODO c_class návrh 
----------------------------------------------------------------------------------------------------
class c_class =
-- generic ancestor for all classes
----------------------------------------------------------------------------------------------------

    var
      uuid         : protected t_unsigned128;

    private
     
    entry =
      -- compute uuid
      end entry;

    end c_class;


----------------------------------------------------------------------------------------------------
class c_triggered_class = extend c_class; expose c_trigger_container;
-- generic ancestor for all classes
----------------------------------------------------------------------------------------------------


    end c_triggered_class;}


----------------------------------------------------------------------------------------------------
#separate templates;
-- Miscellaneous #templates.
----------------------------------------------------------------------------------------------------
#separate public common;
-- 
----------------------------------------------------------------------------------------------------
#separate public triggers;
-- Event triggers.
----------------------------------------------------------------------------------------------------
#separate public synchronization;
-- synchronization
----------------------------------------------------------------------------------------------------
#separate public tasks;
-- Tasks.
----------------------------------------------------------------------------------------------------
#separate public streams;
-- Data streams.
----------------------------------------------------------------------------------------------------
#separate public characters;
-- Support for different character coding schemes (ASCII/UNICODE/ISO 10646).
----------------------------------------------------------------------------------------------------
#separate public datetime;
-- Date/time.
----------------------------------------------------------------------------------------------------
#separate public strings;
-- Character strings' manipulation.
----------------------------------------------------------------------------------------------------
#separate public structures;
-- Data structures (lists, trees).
----------------------------------------------------------------------------------------------------
#separate public classes;
-- Object data structers
----------------------------------------------------------------------------------------------------
#separate public input;
-- Input operations routines.
----------------------------------------------------------------------------------------------------
#separate public console;
-- Console I/O.
----------------------------------------------------------------------------------------------------
#separate public sockets;
-- Network I/O.
----------------------------------------------------------------------------------------------------
#separate public conversions;
-- Miscellaneous conversion routines.
----------------------------------------------------------------------------------------------------
#separate public numerics;
-- Mathematical computations.
----------------------------------------------------------------------------------------------------
#separate public random;
-- random numers
----------------------------------------------------------------------------------------------------
#separate public names;
-- Object names.
----------------------------------------------------------------------------------------------------
#separate public files;
-- Files.
----------------------------------------------------------------------------------------------------
#separate public program_control;
-- General program execution control.
----------------------------------------------------------------------------------------------------
#separate public state_machine;
-- State machine.
----------------------------------------------------------------------------------------------------
#if #declared radekr_text; #and then; radekr_text then;
#separate public text;
#end if;
-- Text processing.
----------------------------------------------------------------------------------------------------

end standard;
