----------------------------------------------------------------------------------------------------
module private strings_test =
-- Test of Classes library - Strings.
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

with
  standard,
  standard.strings,
  standard.random,
  quality,
  quality.debugging;

----------------------------------------------------------------------------------------------------
procedure get_rnd_unsigned (
    min            : in t_unsigned;              -- minimální hodnota
    max            : in t_unsigned)              -- maximální hodnota
    return t_unsigned =
-- Vrací náhodně generované číslo z intervalu <[min], [max]>. Je-li [max]<[min], vrací 0.
----------------------------------------------------------------------------------------------------
begin
  if max>=min then
    result:=min+(random_unsigned mod (max-min+1));
    end if; 
  end get_rnd_unsigned;



----------------------------------------------------------------------------------------------------
procedure create_string (
    str            : out t_char32ustr;           -- vytvořený řetězec
    length         : in t_unsigned;              -- délka řetězce
    count          : in t_unsigned) =            -- počet různých znaků v řetězci [str]
-- Vytvoří řetězec [str] o délce [length] náhodně generovanými znaky (ASCII 65-[count]).
----------------------------------------------------------------------------------------------------
var
  char             : t_char32;                   -- složka řetězce

begin
  -- vytvoření řetězce
  for i in 1..length loop
    char:ord:=get_rnd_unsigned(65,65+count);
    str & char;
    end loop;
  end create_string;



----------------------------------------------------------------------------------------------------
procedure get_rnd_substring (
    str            : in t_char32ustr)            -- vstupní řetězec
    return t_char32str =
-- Z řetězce [str] vrátí podřetězec náhodné délky.
----------------------------------------------------------------------------------------------------
var
    pos            : t_unsigned;                 -- náhodně generovaná pozice v řetězci [str]
    sub_len        : t_unsigned;                 -- náhodně generovaná délka nového podřetězce

begin
    -- generujeme náhodně pozici [pos] v řetězci [str] a délku podřetězce [sub_len] tak, aby bylo
    -- možné z řetězce [str] určit podřetězec začínající na pozici [pos] o délce [sub_length]
    pos:=get_rnd_unsigned(1,str:length);
    sub_len:=get_rnd_unsigned(0,str:length-pos)+1;

    -- určíme podřetězec v řetězci [str]
    for i in 1..sub_len loop
      result & str[pos+i-1];
      end loop;
  end get_rnd_substring;



----------------------------------------------------------------------------------------------------
class private removing_and_replacing_substring_test_case =
-- Testovací třída pro odstraňování podřetězců a nahrazování podřetězců jinými řetězci.
-- Na počátku dojde k vytvoření testovacího řetězce (přesněji k zaplnění jeho datové části) pomocí
-- procedury [create_string], která řetězci [str] přiřadí náhodný počet (max. [max_length]) náhodně
-- genrovaných ASCII znaků (65-65+[ascii_count]) - pozor, je zapotřebí, abychom počtem [ascii_count]
-- nepřevýšili počet náhodně generovaných ASCII znaků, tj. hodnotu 256!!
-- Dále dojde k vytvoření nového řetězce [new_str] a k vytvoření kopie řetězce [copy]. V řetězci
-- [str] náhodně vybereme podřetězec [substr] a spočteme počet jeho výskytů [occur] v řetězci [str].
-- Tento řetězec pomocí procedury [str_replace_substring] nahradíme novým řetězcem [new_str] za
-- předpokladu, že výsledný řetězec nebude větší než maximální délka řetězce [str]. Pokud tedy
-- provedeme nahrazení, určíme počet znaků v řetězci [str] a testujeme, zda má řetězec očekávanou
-- délku. Dále všechny výskyty nového řetězce [new_str] v [str] nahradíme prázdným řetězcem '' a 
-- všechny výskyty původního podřetězce [substr] v kopii [copy] odstraníme pomocí procedury
-- [str_remove_substring]. Poté testujeme, zda délka řetězce [copy] odpovídá očekávané délce a zda se
-- řetězec [copy] shoduje s řetězcem [str].
----------------------------------------------------------------------------------------------------

    var
      max_length   : t_unsigned;                 -- maximální délka testovaného řetězce
      ascii_count  : t_unsigned;                 -- počet opakujících se ASCII znaků od "A"

    ------------------------------------------------------------------------------------------------
    override run_test =
    -- Testovací metoda.
    ------------------------------------------------------------------------------------------------
    var
      str          : t_char32str;                -- testovaný řetězec
      new_str      : t_char32str;                -- nový řetězec
      copy         : t_char32str;                -- kopie řetězec [str]
      length       : t_unsigned;                 -- délka řetězce [str]
      new_length   : t_unsigned;                 -- délka řetězce [new_str]
      substr       : t_char32str;                -- podřetězec řetězce [str]
      occur        : t_unsigned;                 -- počet výskytů řetězce [substr] v [str]
      after_length : t_unsigned;                 -- velikost řetězce po provedení nahrazení

    begin
      -- určíme (náhodně) délku testovaného řetězce [str] a vyplníme ho náhodnými znaky
      length:=get_rnd_unsigned(10,max_length);
      create_string(str,length,ascii_count);

      -- určíme (náhodně) délku nového řetězce [new_str] a vyplníme ho náhodnými znaky
      new_length:=get_rnd_unsigned(10,max_length);
      create_string(new_str,new_length,ascii_count);

      -- vytvoříme kopii řetězce [str]
      copy:=str;

      -- určíme (náhodně) podřetězec řetězce [str]
      substr:=get_rnd_substring(str);

      -- zjistíme počet vykytů řetězce [substring] v [str]
      occur:=str_count_substring(str,substr);

      -- určíme budoucí velikost řetězce [str] a pokud přesáhne maximální hodnotu, ukončíme metodu
      after_length:=length-substr:length*occur+new_length*occur;
      if after_length>str:range:last then return; end if;

      -- provedeme nahrazení řetězce [substr] řetězcem [new_str]
      str:=str_replace_substring(str,substr,new_str);

      -- testujeme, zda řetězec [str] má očekávanou délku
      fail_if_false(str:length=after_length,'Expected length after replacing is not equal');

      -- v kopii [copy] odstraníme všechny výskyty pořetězce [substr]
      copy:=str_remove_substring(copy,substr);

      -- testujeme, zda řetězec [copy] má očekávanou velikost
      fail_if_false(copy:length=length-occur*substr:length,'Excpected length of copy after remove is not equal');

      -- nahradíme všechny výskyty řetězce [new_str] v řetězci [str] prázdným řetězcem ''
      str:=str_replace_substring(str,new_str,'');

      -- testujeme identičnost řetězců [str] a [copy]
      fail_if_false(str=copy,'Strings are not equal');
      end run_test;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializační metoda - inicializace interních proměnných.
    ------------------------------------------------------------------------------------------------
    begin
      -- inicializace interních proměnných
      max_length:=100;
      ascii_count:=50;
      end entry;

    end removing_and_replacing_substring_test_case;



----------------------------------------------------------------------------------------------------
class private removing_and_replacing_chars_test_case =
-- Testovací třída pro odstraňování podřetězců a nahrazování podřetězců jinými řetězci.
-- Na počátku dojde k vytvoření testovacího řetězce (přesněji k zaplnění jeho datové části) pomocí
-- procedury [create_string], která řetězci [str] přiřadí náhodný počet (max. [max_length]) náhodně
-- genrovaných ASCII znaků (65-65+[ascii_count]) - pozor, je zapotřebí, abychom počtem [ascii_count]
-- nepřevýšili počet náhodně generovaných ASCII znaků, tj. hodnotu 256!!
-- Dále dojde k vytvoření kopie [copy] řetězce [str], k náhodnému určení znaku [char] řetězce [str]
-- a k vytvoření nového znaku [new_char].
-- Poté pomocí procedury [str_count_character] určíme počet výskytů znaku [char] v kopii [copy],
-- výskyt všech znaků [char] v kopii odstraníme pomocí [str_remove_character] a testujeme, zda
-- délka výsledného řetězce odpovídá očekávané délce. Dále nahradíme výskyt všech znaků [char]
-- v řetězci [str] znakem [new_char] (pomocí procedury [str_replace_character]) a testujeme, zda se
-- počet výskytů znaku [new_char] v řetězci [str] rovná očekávanému počtu.
----------------------------------------------------------------------------------------------------

    var
      max_length   : t_unsigned;                 -- maximální délka testovaného řetězce
      ascii_count  : t_unsigned;                 -- počet opakujících se ASCII znaků od "A"

    ------------------------------------------------------------------------------------------------
    override run_test =
    -- Testovací metoda.
    ------------------------------------------------------------------------------------------------
    var
      str          : t_char32str;                -- testovaný řetězec
      copy         : t_char32str;                -- kopie řetězec [str]
      length       : t_unsigned;                 -- délka řetězce [str]
      char         : t_char32;                   -- náhodně vybraný znak testovaného řetězce [str]
      new_char     : t_char32;                   -- nový znak, kterým nahradíme znak [char] v řetězci [str]
      pos          : t_unsigned;                 -- pozice v řetězci
      occur_char   : t_unsigned;                 -- počet výskytů znaku [char] v [str]
      occur_newc   : t_unsigned;                 -- počet výskytů znaku [new_char] v [str]
      after_length : t_unsigned;                 -- velikost řetězce po provedení nahrazení

    begin
      -- určíme (náhodně) délku testovaného řetězce [str] a vyplníme ho náhodnými znaky
      length:=get_rnd_unsigned(10,max_length);
      create_string(str,length,ascii_count);

      -- vytvoříme kopii řetězce [str]
      copy:=str;

      -- určáme (náhodně) znak [char] v řetězci [str]
      char:=str[get_rnd_unsigned(1,length)];

      -- určíme nový náhodný znak
      new_char:ord:=get_rnd_unsigned(65,150);

      -- určíme počet výskytů znaku [char] v [str]
      occur_char:=str_count_character(str,char);

      -- odstraníme z kopie [copy] všechny znaky [char]
      copy:=str_remove_character(copy,char);

      -- testujeme, zda má řetězec [copy] očekávanou velikost a zda neobsahuje žádný znak [char]
      fail_if_false(copy:length=length-occur_char,'Expected length of copy is not equal');
      fail_if_false(str_count_character(copy,char)=0,'Copy has not removed all occurence of char');

      -- určíme počet výskytů znaku [new_char] v řetězci [str] (pokud se znaky [char] a [new_char]
      -- liší)
      if char<>new_char then
        occur_newc:=str_count_character(str,new_char);
        end if;

      -- nahradíme všechny výskyty znaku [char] v řetězci [str] znakem [new_char]
      str:=str_replace_character(str,char,new_char);

      -- testujeme, zda řetězec [str] obsahuje očekávaný počet výskytů znaku [new_char]
      fail_if_false(str_count_character(str,new_char)=occur_char+occur_newc,
                    'String has not expected count of character new_char');
      end run_test;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializační metoda - inicializace interních proměnných.
    ------------------------------------------------------------------------------------------------
    begin
      -- inicializace interních proměnných
      max_length:=100;
      ascii_count:=50;
      end entry;

    end removing_and_replacing_chars_test_case;



----------------------------------------------------------------------------------------------------
class private separating_test_case =
-- Testovací třída pro rozštěpení řetězce podle separátoru do řetězce řetězců a následnou zpětnou
-- kompozici.
-- Na počátku dojde k vytvoření testovacího řetězce (přesněji k zaplnění jeho datové části) pomocí
-- procedury [create_string], která řetězci [str] přiřadí náhodný počet (max. [max_length]) náhodně
-- genrovaných ASCII znaků (65-65+[ascii_count]) - pozor, je zapotřebí, abychom počtem [ascii_count]
-- nepřevýšili počet náhodně generovaných ASCII znaků, tj. hodnotu 256!!
-- Dále dojde k vytvoření kopie [copy] řetězce [str] a k náhodnému určení znaku [char] - budoucího
-- separátoru - řetězce [str].
-- Poté řetězec [str] rozštěpíme podle separátoru [char] do řetězce řetězců [pstring] pomocí proce-
-- dury [str_separate]. Testujeme, zda délka (počet řetěců) řetězce [pstring] se rovná očekávané
-- délce. Následně zpětně vytvoříme řetězec [str] z řetězců [pstring] pomocí procedury [str_combine].
-- Totéž provedeme "ručně" a výsledek uložíme do řetězce [expected]. Na závěr testujeme, zda se
-- shodují řetězce [str] a [copy] a [str] a [expected].
----------------------------------------------------------------------------------------------------

    var
      max_length   : t_unsigned;                 -- maximální délka testovaného řetězce
      ascii_count  : t_unsigned;                 -- počet opakujících se ASCII znaků od "A"

    ------------------------------------------------------------------------------------------------
    override run_test =
    -- Testovací metoda.
    ------------------------------------------------------------------------------------------------
    var
      str          : t_char32str;                -- testovaný řetězec
      copy         : t_char32str;                -- kopie řetězec [str]
      expected     : t_char32str;                -- očekávaný řetězec
      length       : t_unsigned;                 -- délka řetězce [str]
      char         : t_char32;                   -- náhodně vybraný znak testovaného řetězce [str] (separátor)
      pstring      : p_char32str_string;         -- řetězec řetězců

    begin
      -- určíme (náhodně) délku testovaného řetězce [str] a vyplníme ho náhodnými znaky
      length:=get_rnd_unsigned(10,max_length);
      create_string(str,length,ascii_count);

      -- vytvoříme kopii řetězce [str]
      copy:=str;

      -- určáme (náhodně) znak [char] v řetězci [str]
      char:=str[get_rnd_unsigned(1,length)];

      -- rozdělíme řetězec [str] podle znaku [char] na řetězec řetězců [_string]
      str_separate(str,char,pstring);

      -- testujeme velikost řetězce [pstring]
      fail_if_false(pstring^:length=str_count_character(str,char)+1,'Expected length of pstring is not equal');

      -- řetězec [str] vyprázdníme a testujeme, zda je prázdný
      str:='';
      fail_if_false(str_is_empty(str),'String is not empty');

      -- z řetězce řetězců [_string] složíme řetězec [str], přičemž oddělovacím znakem bude [char]
      str:=str_combine(pstring^,char);

      -- totéž provedme, ale "ručně" a výsledek složíme do [expected]
      for i in 1..pstring^:length-1 loop
        expected & pstring^[i];
        expected & char;
        end loop;
      expected & pstring^[pstring^:length];

      -- testujeme, zda se řetězec [str] rovná původnímu řetězci, tj. kopii [copy] a zda je roven
      -- řetězci [expected]
      fail_if_false(str=copy,'String is not equal with original string');
      fail_if_false(str=expected,'String is not equal with expected string');

    -- dealokace alokovaného paměťového prostoru
    leave
      if pstring<>nil then
        discard pstring;
        end if;
      end run_test;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializační metoda - inicializace interních proměnných.
    ------------------------------------------------------------------------------------------------
    begin
      -- inicializace interních proměnných
      max_length:=100;
      ascii_count:=50;
      end entry;

    end separating_test_case;



----------------------------------------------------------------------------------------------------
class private to_lower_test_case =
-- Testovací třída pro převod řetězce na lower-case a upper-case.
-- Na počátku dojde k vytvoření testovacího řetězce (přesněji k zaplnění jeho datové části) pomocí
-- procedury [create_string], která řetězci [str] přiřadí náhodný počet (max. [max_length]) náhodně
-- genrovaných ASCII znaků (65-65+[ascii_count]) - pozor, je zapotřebí, aby počet [ascii_count]
-- nepřevýšil počet velkých písmen anglické abecedy!!
-- Při testu pomocí procedury [str_to_lower] vytvoříme řetězec [lower] obsahující malá písmena ře-
-- tězce [str]. Tyto řetězce porovnáme pomocí procedury [str_compare_case_insensitive]. Jsou-li 
-- shodné, je test zatím OK. Dále pomocí procedury [to_upper_case] řetězec [lower] převedeme na
-- řetězec [upper] složený z velkých písmen znaků řetězce [lower]. Následuje test shodnoti obou
-- řetězců [upper] a [str].
----------------------------------------------------------------------------------------------------

    var
      max_length   : t_unsigned;                 -- maximální délka testovaného řetězce
      ascii_count  : t_unsigned;                 -- počet opakujících se ASCII znaků od "A"

    ------------------------------------------------------------------------------------------------
    override run_test =
    -- Testovací metoda.
    ------------------------------------------------------------------------------------------------
    var
      str          : t_char32str;                -- testovaný řetězec
      lower        : t_char32str;                -- řetězec [str] obsahující malá písmena
      upper        : t_char32str;                -- očekávaný řetězec obsahující velká písmena řetězce [lower]
      length       : t_unsigned;                 -- délka řetězce [str]
      char         : t_char32;                   -- náhodně vybraný znak testovaného řetězce [str] (separátor)
      pstring      : p_char32str_string;         -- řetězec řetězců

    begin
      -- určíme (náhodně) délku testovaného řetězce [str] a vyplníme ho náhodnými znaky
      length:=get_rnd_unsigned(10,max_length);
      create_string(str,length,ascii_count);

      -- převedeme řetězec [str] na malá písmena
      lower:=str_to_lower(str);

      -- testujeme, zda jsou řetězce [str] a [lower] shodné (insensitivní porovnávání)
      fail_if_false(str_compare_case_insensitive(str,lower),'Texts are not equal');

      -- převedeme řetězec [lower] na velká písmena
      upper:=str_to_upper(lower);

      -- testujeme, zda se řetězce [str] a [upper] shodují
      fail_if_false(upper=str,'String are not qeual');
      end run_test;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializační metoda - inicializace interních proměnných.
    ------------------------------------------------------------------------------------------------
    begin
      -- inicializace interních proměnných
      max_length:=100;
      ascii_count:=20;
      end entry;

    end to_lower_test_case;



----------------------------------------------------------------------------------------------------
class private trimming_test_case =
-- Testovací třída pro oříznutí řetězce.
-- Na počátku dojde k vytvoření testovacího řetězce (přesněji k zaplnění jeho datové části) pomocí
-- procedury [create_string], která řetězci [str] přiřadí náhodný počet (max. [max_length]) náhodně
-- genrovaných ASCII znaků (65-65+[ascii_count]) - pozor, je zapotřebí, abychom počtem [ascii_count]
-- nepřevýšili počet náhodně generovaných ASCII znaků, tj. hodnotu 256!!
-- Dále dochází k vytvoření náhodného znaku [char], který bude reprezentovat znak určený k oříznutí.
-- Test pomocí procedury [str_trim] ořízne celý souvislý výskyt znaku [char] zleva i zprava za
-- předpokladu, že první nebo poslední znak řetězce [str] je shodný se znakem [char]. Výsledek oříznutí
-- je uložen v [trim]. Totéž oříznutí provedeme "ručně" a výsledek uložíme do [expected]. Následuje
-- test shodnosti obou řetězců [trim] a [expected].
----------------------------------------------------------------------------------------------------

    var
      max_length   : t_unsigned;                 -- maximální délka testovaného řetězce
      ascii_count  : t_unsigned;                 -- počet opakujících se ASCII znaků od "A"

    ------------------------------------------------------------------------------------------------
    override run_test =
    -- Testovací metoda.
    ------------------------------------------------------------------------------------------------
    var
      str          : t_char32str;                -- testovaný řetězec
      trim         : t_char32str;                -- oříznutý řetězec [str] (pomocí [str_trim])
      expected     : t_char32str;                -- oříznutý řetězec [str] (ručně)
      length       : t_unsigned;                 -- délka řetězce [str]
      char         : t_char32;                   -- náhodně generovaný znak
      pstring      : p_char32str_string;         -- řetězec řetězců
      i            : t_unsigned;                 -- poslední výskyt znaku [char] zleva
      j            : t_unsigned;                 -- poslední výskyt znaku [char] zprava

    begin
      -- určíme (náhodně) délku testovaného řetězce [str] a vyplníme ho náhodnými znaky
      length:=get_rnd_unsigned(10,max_length);
      create_string(str,length,ascii_count);

      -- určáme (náhodně) znak [char]
      char:ord:=get_rnd_unsigned(65,200);

      -- ořízneme řetězec [str] zleva i zprava znakem [char]
      trim:=str_trim(str,char,[se_left,se_right]);

      -- "ruční oříznutí":
      -- nejprve zjistíme poslední výskyt znaku [char] zleva
      i:=1;
      while str[i]=char and i<str:length loop
        i+1;
        end loop;

      -- poté zjistíme poslední výskyt znaku [char] zprava
      j:=str:length;
      while str[j]=char and j>1 loop
        j-1;
        end loop;

      -- řetězec mezi složkami [i]..[j] tvoří oříznutí
      for k in i..j loop;
        expected & str[k];
        end loop;

      -- testujeme úspěšnost provedení oříznutí
      fail_if_false(expected=trim,'Trimming is not successful');
      end run_test;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializační metoda - inicializace interních proměnných.
    ------------------------------------------------------------------------------------------------
    begin
      -- inicializace interních proměnných
      max_length:=100;
      ascii_count:=50;
      end entry;

    end trimming_test_case;

  end strings_test;