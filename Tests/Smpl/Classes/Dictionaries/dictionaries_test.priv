----------------------------------------------------------------------------------------------------
module private dictionaries_test =
-- Test of Classes library - Dictionaries.
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

with
  standard,
  standard.classes.dictionaries,
  standard.classes.lists,
  standard.random,
  quality,
  quality.debugging;

-- dopředné deklarace
class c_test_list_item;         type p_test_list_item = ^class c_test_list_item;

----------------------------------------------------------------------------------------------------
class c_test_list_item = extend c_list_item;
-- Třída složky pomocného testovacího spojového seznamu, který obsahuje všechny řádky s klíčem a
-- jeho hodnotou testvaného slovníku.
----------------------------------------------------------------------------------------------------
    
    var
      key          : t_char32str;                -- klíč
      value        : t_char32str;                -- hodnota

    end c_test_list_item;



----------------------------------------------------------------------------------------------------
procedure create_random_string (
    max_length     : t_unsigned)                 -- maximální délka řetězce
    return t_char32str =
-- Generuje řetězec o náhodné délce (maximálně však [max_length] znaků). 5etězec je vyplněn náhodnými
-- znaky (ASCII 33-122).
----------------------------------------------------------------------------------------------------
var
  length           : t_unsigned;                 -- délka řegtězce (max. [max_length], min. 1)
  char             : t_char32;                   -- náhodně generovaný znak

begin
  -- určíme délku řetězce
  length:=1+(random_unsigned mod max_length);

  -- v cyklu postupně vytvoříme řetězec [result] složený z náhodně generovaných znaků
  for i in 1..length loop
    char:ord:=33+(random_unsigned mod 90);
    result & char;
    end loop;
  end create_random_string;



----------------------------------------------------------------------------------------------------
procedure create_dictionary (
    dictionary     : in p_string_string_dictionary; -- ukazatel na vyplněný slovník
    size           : in t_unsigned;              -- velikost slovníku (počet řádků)
    list           : in p_list) =                -- ukazatel na seznam klíčů a hodnot slovníku
-- Vyplní slovník [dictionary] řádky klíč-hodnota, jejichž počet je roven [size]. Klíče a hodnoty
-- jsou náhodně generované řetězce o max. velikosti 20 znaků. Každý dvojice klíč-řetězec je vložena
-- do spojového seznamu [list]. Při náhodném generování klíče testujeme, zda se klíč ve slovníku
-- nachází. Pokud ano, generujeme nová klíč až do okamžiku, kdy vygenerujeme takový klíč, který se
-- ve slovníku nenachází.
----------------------------------------------------------------------------------------------------
var
  key              : t_char32str;                -- klíč testovaného slovníku [dictionary]
  value            : t_char32str;                -- hodnota klíče testovaného slovníku [dictionary]
  item             : p_test_list_item;           -- složka seznamu [list]

begin
  -- v cyklu vytvoříme [size] řádku slovníku [dictionary]
  for i in 1..size loop
    -- dokud nevytvoříme klíč, který se ve slovníku nevyskytuje, generujeme nový klíč
    loop
     key:=create_random_string(20);
     until not dictionary^.exist_key(key);

    -- genreujeme náhodnou hodnotu klíče
    value:=create_random_string(20);

    -- vložíme klíč a jeho hodnotu do slovníku
    dictionary^.insert_value(key,value);

    -- vytvoříme novou složku seznamu [list], vložíme do ní klíč a jeho hodnotu a složku vložíme do
    -- seznamu
    new item;
    item^.key:=key;
    item^.value:=value;
    list^.insert_last(item);
    end loop;
  end create_dictionary;



----------------------------------------------------------------------------------------------------
procedure find_item_by_key (
    list           : in p_list;                  -- ukazatel na seznam, v němž je klíč [key] hledán     
    key            : in t_char32str)             -- klíč
    return p_test_list_item =
-- Nalezne v seznamu [list] složku, jejíž klíč je [key]. Pokud se v seznamu klíč nevyskytuje, vrací
-- [nil].
----------------------------------------------------------------------------------------------------
var
  iter             : c_list_iterator;            -- iterátor pro průchod seznamem [list]
  item             : p_test_list_item;           -- složka seznamu [list]

begin
  -- inicializace iterátoru [iter]
  iter.init(list^);

  -- dokud nenalezneme klíč v seznamu nebo neprojdeme celý seznam, vybíráme postupně z něho složky
  while iter.get(item) loop
    -- pokud jsme nalezli klíč v seznamu, vracíme ukazatel na složku a ukončíme proceduru
    if item^.key=key then
      result:=item;
      return;
      end if;
    end loop;
  end find_item_by_key;



----------------------------------------------------------------------------------------------------
procedure is_dictionary_empty (
    dictionary     : in p_string_string_dictionary) -- ukazatel na slovník
    return t_logical =
-- Vrací [true], pokud je slovník [dictionary] prázdný. V opačném případě vrací [false]. Test je
-- prováděn pomocí iterátoru [iter]. Pokud iterátorem získáme nějakou dvojici klíč-hodnota, pak
-- slovník není prázdný.
----------------------------------------------------------------------------------------------------
var
  iter             : c_string_string_dictionary_iterator; -- iterátor slovníku [dictionary]
  key              : t_char32str;                -- klíč slovníku [dictionary]
  value            : t_char32str;                -- hodnota klíče slovníku [dictionary]

begin
  -- inicializace iterátoru
  iter.init(dictionary^);

  -- pokud iterátor nevrátí žádnou dvojici klíč-hodnota, vracíme [true] (tj. slovník je prázdný)
  if not iter.get_value(key,value) then
    result:=true;
    end if;
  end is_dictionary_empty;


  
----------------------------------------------------------------------------------------------------
class private c_inserting_values_test_case =
-- Vloží do testovaného slovníku [dictionary] [row_count] řádků ve formě klíč-hodnota pomocí pro-
-- cedury [create_dictionary]. Klíč i jeho hodnota jsou náhodně generované řetězce maximální
-- délky 20 znaků. Spolu s vytvořením slovníku je vytvořen spojový seznam [list], který obsahuje všechny
-- dvojice klíč-hodnota slovníku.
--
-- Princip:
-- Následuje test, v němž iterátorem slovníku procházíme jednotlivé dvojice klíč-hodnota, příčemž
-- klíč vyhledáme ve spojovém seznamu [list]. Pokud se hodnota klíče ve spojovém seznamu shoduje
-- s hodnotou klíče ve slovníku, odstraníme složku s klíčem a hodnotou ze seznamu [list] a vybíráme
-- dalčí dvojici klíč-hodnota ze slovníku. Po vyčerpání všech dvojic slovníku by měl být seznam [list]
-- prázdný a tím i test úspěšný. V opačných případech je test vyhodnocen jako neúspěšný. Na závěr
-- pomocí procedury [is_dictionary_empty] testujeme, zda je slovník prázdný.
----------------------------------------------------------------------------------------------------

    var
      row_count    : t_unsigned;                 -- počet řádku v testovaném slovníku

    ------------------------------------------------------------------------------------------------
    override run_test =
    -- Testovací metoda.
    ------------------------------------------------------------------------------------------------
    var
      dictionary   : aliased c_string_string_dictionary; -- testovaný slovník
      list         : aliased c_list;             -- pomocný slovník obsahující klíče a hodnoty slovníku [dictionary]
      dict_iterator: c_string_string_dictionary_iterator; -- iterátor pro průchod slovníku [dictionary]
      key          : t_char32str;                -- klíč slovníku [dictionary]
      value        : t_char32str;                -- hodnota klíče slovníku [dictionary]
      item         : p_test_list_item;           -- složka seznamu [list]

    begin
      -- inicializace seznamu [list]
      list.init(c_test_list_item:tag);

      -- slovník [dictionary] vyplníme [row_count] řádky náhodných klíčů a jejich hodnot
      create_dictionary(^dictionary,row_count,^list);

      -- inicializace iterátoru pro průchod slovníkem [dictionary]
      dict_iterator.init(dictionary);

      -- procházíme celý slovník a testujeme, zda se jeho klíč [key] a hodnota [value] shodují
      -- s klíčem a hodnotou uloženou v seznamu [list]
      while dict_iterator.get_value(key,value) loop
        -- nalezneme složku obsahující klíč [key]
        item:=find_item_by_key(^list,key);

        -- testujeme, zda jsme nalezli nějakou složku a dále testujeme, zda se hodnota složky
        -- [item^.value] rovná hodnotě klíče ve slovníku
        fail_if_false(item<>nil,'No item of list found');
        fail_if_false(item^.value=value,'Values are not equal');

        -- ze spojového seznamu [list] odebereme složku [item]
        list.delete(item);
        end loop;

      -- testujeme, zda je seznam [list] prázdný
      fail_if_false(list.is_empty,'List is not empty');

      -- odstraníme z paměti všechny dvojice klíč-hodnota slovníku [dictionary]
      dictionary.delete_all;

      -- testujeme, zda je slovník [dictionary] prázdný
      fail_if_false(is_dictionary_empty(^dictionary),'Dictionary is not empty');
      end run_test;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializační metoda - nastavení interních proměnných.
    ------------------------------------------------------------------------------------------------
    begin
      -- provedeme nastavení interních proměnných
      row_count:=1000;
      end entry;

    end c_inserting_values_test_case;



----------------------------------------------------------------------------------------------------
class private c_getting_values_test_case =
-- Vloží do testovaného slovníku [dictionary] [row_count] řádků ve formě klíč-hodnota pomocí pro-
-- cedury [create_dictionary]. Klíč i jeho hodnota jsou náhodně generované řetězce maximální
-- délky 20 znaků. Spolu s vytvořením slovníku je vytvořen spojový seznam [list], který obsahuje všechny
-- dvojice klíč-hodnota slovníku.
--
-- Princip:
-- Následuje test, v němž postupně vybíráme složky seznamu [list]. Každá složka seznamu obsahuje klíč
-- slovníku, který se pokusíme najít ve slovníku pomocí metody [exist_key]. Pokud ho nenalezneme, je
-- test neúspěšný. Dále vyhledáme pomocí metody [get_value] hodnotu klíče. Pokud se tato hodnota
-- neshoduje s hodnotou klíče složky seznamu [list], je test opět neúspěšný. Poté odebereme nalezenou
-- dvojici klíč-hodnota (a to u sudých složek pomocí metody [delete] a u lichých pomocí [remove]).
-- Na závěr pomocí procedury [is_dictionary_empty] testujeme, zda je slovník prázdný.
----------------------------------------------------------------------------------------------------

    var
      row_count    : t_unsigned;                 -- počet řádku v testovaném slovníku

    ------------------------------------------------------------------------------------------------
    override run_test =
    -- Testovací metoda.
    ------------------------------------------------------------------------------------------------
    var
      dictionary   : aliased c_string_string_dictionary; -- testovaný slovník
      list         : aliased c_list;             -- pomocný slovník obsahující klíče a hodnoty slovníku [dictionary]
      dict_iterator: c_string_string_dictionary_iterator; -- iterátor pro průchod slovníkem [dictionary]
      list_iterator: c_list_iterator;            -- iterátor pro průchod seznamem [list]
      value        : t_char32str;                -- hodnota klíče slovníku [dictionary]
      item         : p_test_list_item;           -- složka seznamu [list]
      i            : t_unsigned;                 -- pomocná proměnná udávající počet průchodů cyklem

    begin
      -- inicializace seznamu [list]
      list.init(c_test_list_item:tag);

      -- slovník [dictionary] vyplníme [row_count] řádky náhodných klíčů a jejich hodnot
      create_dictionary(^dictionary,row_count,^list);

      -- inicializace iterátoru pro průchod seznamem [list]
      list_iterator.init(list);

      -- postupně vybíráme jednotlivé složky seznamu [list], dokud je nevybereme všechny
      while list_iterator.get(item) loop
        -- testujeme, zda byl ve slovníku [dictionary] nalezen klíč [item^.key] - pokud ne, končí
        -- test neúspěšně
        fail_if_false(dictionary.exist_key(item^.key),'Key does not exist in the dictionary');

        -- získáme hodnotu [value] klíče [item^.key] ve slovníku [dictionary]
        dictionary.get_value(item^.key,value);

        -- je [i] sudé?
        if i mod 2=0
          -- ano => odstraníme dvojici klíč-hodnota pomocí metody [delete]
          then dictionary.delete_value(item^.key);

          -- ne => odstraníme dvojici klíč-hodnota pomocí metody [remove]
          else dictionary.remove_value(item^.key);
          end if;

        -- inkrementujeme pomocné počítadlo
        i+1;
        end loop;

      -- testujeme, zda je slovník [dictionary] prázdný
      fail_if_false(is_dictionary_empty(^dictionary),'Dictionary is not empty');
      end run_test;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializační metoda - nastavení interních proměnných.
    ------------------------------------------------------------------------------------------------
    begin
      -- provedeme nastavení interních proměnných
      row_count:=1000;
      end entry;

  end c_getting_values_test_case;

  end dictionaries_test;