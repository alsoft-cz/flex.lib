#option warning(all,false);
#option hint(all,false);

----------------------------------------------------------------------------------------------------
program mdtest =
-- This program verifies whether our implementation of MessageDigest functions responds to
-- their original specifications.
----------------------------------------------------------------------------------------------------

with
  standard,
  standard.streams,
  standard.console,
  standard.conversions,
  advanced,
  advanced.cryptography,
  advanced.cryptography.message_digests,
  advanced.cryptography.message_digests.sha1,
  advanced.cryptography.message_digests.sha256;

message
  message_digest_test_error;


----------------------------------------------------------------------------------------------------
procedure test_hash (
    engine      : in out class c_crypto_message_digest;  -- Tested Message Digest Engine
    digest_size : in t_unsigned32;  -- Expected size 
    test_data   : in t_data_array;  -- 
    exp_result  : in t_data_array;
    desc        : in t_char32ustr) =
-- Performs test of message digest [engine] on provided [data]. If computed result differs from
-- provided one [result], Digest Exception will be raised.
----------------------------------------------------------------------------------------------------
var
  digest : p_message_digest;

begin
  -- write message to console
  write(desc);
  write(', ');
  write(unsigned_to_string(8*test_data:length));
  write(' bits, testing...');

  -- start digest computing
  engine.put_data_array(test_data);

  -- finish 
  engine.get_message_digest(digest);

  -- verify computed and provided values
  if digest_size<>engine.get_message_digest_size
  or digest_size<>exp_result:length
  or digest_size<>digest^:length then
    raise message_digest_test_error;
    end if;

  -- %%TODO(compare_arrays)
  for i in 0..digest_size-1 loop
    if digest^[i]<>exp_result[i] then
      raise message_digest_test_error;
      end if;
    end loop;

  discard digest;
  write_line(', DONE');
  end test_hash;



var
  -- TEST #1 - One-Block Message
  data_1 : static const array 0..2 of t_data_byte := [
               $61,$62,$63];
  hash_sha1_1 : static const array 0..19 of t_data_byte := [
               $a9,$99,$3e,$36,$47,$06,$81,$6a,$ba,$3e,$25,$71,$78,$50,$c2,$6c,$9c,$d0,$d8,$9d];
  hash_sha256_1 : static const array 0..31 of t_data_byte := [
               $ba,$78,$16,$bf,$8f,$01,$cf,$ea,$41,$41,$40,$de,$5d,$ae,$22,$23,
               $b0,$03,$61,$a3,$96,$17,$7a,$9c,$b4,$10,$ff,$61,$f2,$00,$15,$ad];

  -- TEST #2 - Multi-Block Message
  data_2 : static const array 0..55 of t_data_byte := [
               $61,$62,$63,$64,$62,$63,$64,$65,$63,$64,$65,$66,$64,$65,$66,$67,
               $65,$66,$67,$68,$66,$67,$68,$69,$67,$68,$69,$6a,$68,$69,$6a,$6b,
               $69,$6a,$6b,$6c,$6a,$6b,$6c,$6d,$6b,$6c,$6d,$6e,$6c,$6d,$6e,$6f,
               $6d,$6e,$6f,$70,$6e,$6f,$70,$71];
  hash_sha1_2 : static const array 0..19 of t_data_byte := [
               $84,$98,$3e,$44,$1c,$3b,$d2,$6e,$ba,$ae,$4a,$a1,$f9,$51,$29,$e5,$e5,$46,$70,$f1];
  hash_sha256_2 : static const array 0..31 of t_data_byte := [
               $24,$8d,$6a,$61,$d2,$06,$38,$b8,$e5,$c0,$26,$93,$0c,$3e,$60,$39,
               $a3,$3c,$e4,$59,$64,$ff,$21,$67,$f6,$ec,$ed,$d4,$19,$db,$06,$c1];


  -- TEST #3 - Long Message - ond million of the character "a";
  data_3 : static const array 0..999999 of t_data_byte := [
               for others use $61];
  hash_sha1_3 : static const array 0..19 of t_data_byte := [
               $34,$aa,$97,$3c,$d4,$c4,$da,$a4,$f6,$1e,$eb,$2b,$db,$ad,$27,$31,$65,$34,$01,$6f];
  hash_sha256_3 : static const array 0..31 of t_data_byte := [
               $cd,$c7,$6e,$5c,$99,$14,$fb,$92,$81,$a1,$c7,$e2,$84,$d7,$3e,$67,
               $f1,$80,$9a,$48,$a4,$97,$20,$0e,$04,$6d,$39,$cc,$c7,$11,$2c,$d0];



const
  sha1_md_size   = 20;
  sha256_md_size = 32;
var
  sha1        : c_crypto_message_digest_sha1;
  sha256      : c_crypto_message_digest_sha256;
                

begin
  -- SHA-1
  sha1.reset_context;
  test_hash(sha1,sha1_md_size,data_1,hash_sha1_1,'SHA-1: One-Block Message');
  sha1.reset_context;
  test_hash(sha1,sha1_md_size,data_2,hash_sha1_2,'SHA-1: Multi-Block Message');
  sha1.reset_context;
  test_hash(sha1,sha1_md_size,data_3,hash_sha1_3,'SHA-1: Long Message');
  -- SHA-256
  sha256.reset_context;
  test_hash(sha256,sha256_md_size,data_1,hash_sha256_1,'SHA-256: One-Block Message');
  sha256.reset_context;
  test_hash(sha256,sha256_md_size,data_2,hash_sha256_2,'SHA-256: Multi-Block Message');
  sha256.reset_context;
  test_hash(sha256,sha256_md_size,data_3,hash_sha256_3,'SHA-256: Long Message');
  end mdtest;
