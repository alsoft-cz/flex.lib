----------------------------------------------------------------------------------------------------
module private streams =
-- Data streams.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class private c_input_stream =
-- Data input stream.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    virtual get_input_size =
    -- Returns the number of bytes, that can be immediatelly read from the input stream.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end get_input_size;



    ------------------------------------------------------------------------------------------------
    virtual get_input_read =
    -- Returns the number of bytes already read from the stream.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end get_input_read;



    ------------------------------------------------------------------------------------------------
    virtual look =
    -- 
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;    
      end look;



    ------------------------------------------------------------------------------------------------
    virtual read =
    -- Reads <par>buffer</par>:size bytes of data and stores them into the <par>buffer</par>.
    ------------------------------------------------------------------------------------------------
    begin 
      raise feature_not_implemented;
      end read;

    end c_input_stream;



----------------------------------------------------------------------------------------------------
class private c_output_stream =
-- Data output stream.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    virtual get_output_written =
    -- Returns the number of bytes already written to the stream.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end get_output_written;



    ------------------------------------------------------------------------------------------------
    virtual write =
    -- Writes <code>buffer:size</code> bytes of data from [buffer] to the output.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end write;
    


    ------------------------------------------------------------------------------------------------
    virtual writex =
    -- To be removed: Writes [len] bytes of data from [buffer] to the output.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end writex;
    
    end c_output_stream;



----------------------------------------------------------------------------------------------------
class private c_input_text_stream =
-- Data input stream.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    virtual read_line =
    -- Reads a line of text from the input and stores it in [text].
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end read_line;    

    end c_input_text_stream;



----------------------------------------------------------------------------------------------------
class private c_output_text_stream =
-- Data output stream.
----------------------------------------------------------------------------------------------------
{
    ------------------------------------------------------------------------------------------------
    static set_encoder =
    -- Assigns a character encoder to the output stream.
    ------------------------------------------------------------------------------------------------
    begin
      this.encoder:=encoder;
      end set_encoder;
}


    ------------------------------------------------------------------------------------------------
    virtual get_output_lines =
    -- Returns the number of bytes already written to the stream.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end get_output_lines;



    ------------------------------------------------------------------------------------------------
    virtual get_output_characters =
    -- Returns the number of bytes already written to the stream.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end get_output_characters;



    ------------------------------------------------------------------------------------------------
    virtual get_output_bytes =
    -- Returns the number of bytes already written to the stream.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end get_output_bytes;



    ------------------------------------------------------------------------------------------------
    virtual write =
    -- Writes [text] to the output.                                    
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end write;



    ------------------------------------------------------------------------------------------------
    virtual write_line =
    -- Writes [text] to the output and transitions to a new line.
    ------------------------------------------------------------------------------------------------
    begin
      raise feature_not_implemented;
      end write_line;

    end c_output_text_stream;



----------------------------------------------------------------------------------------------------
class private c_output_buffer =
-- Common output buffer.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init =
    -- Initializes the buffer. The buffer is created [buffer_size] bytes long. The [write_method] 
    -- subprogram is used to physically output the buffered data, when the buffer becomes full or
    -- [flush] is called.
    --
    -- Parameters:
    --   buffer_size   [buffer_size] may not be zero.
    --   write_method  [write_method] may not be NIL.
    --
    -- Result:
    --   -- when the subprogram fails, [parameter_error] is raised,
    --   -- when the subprogram succeeds, a buffer of [buffer_size] bytes is allocated.
    ------------------------------------------------------------------------------------------------
    begin
      -- check parameters
      if buffer_size=0 or write_method=nil then
        raise parameter_error;
        end if;

      -- allocate the buffer
      new buffer range buffer_size;

      -- remember the write method
      this.write_method:=write_method;
      end init;



    ------------------------------------------------------------------------------------------------
    static write_byte =
    -- Writes a single byte of data into the buffer.
    ------------------------------------------------------------------------------------------------
    begin
      -- flush the buffer if there is not enough space to hold more data
      if buffer^:length+data:size>buffer^:last then
        flush;
        end if;

      -- append the data to the buffer
      buffer^ & data;
      end write_byte;



    ------------------------------------------------------------------------------------------------
    static write_block =
    -- Writes a block of bytes into the buffer.
    ------------------------------------------------------------------------------------------------
    begin
      -- flush the buffer if there is not enough space to hold more data
      if buffer^:length+len>buffer^:last then
        flush;
        end if;

      -- append the data to the buffer
      if buffer^:last>len

        -- the buffer is long enough to hold the data => append them to it
        then
          if len>0 then
            for i in 0..len-1 loop
              buffer^ & t_unsigned8array(data)[i];
              end loop;
            end if;

        -- the buffer is not long enough => write directly
        else
          write_method^(data,len);
          end if;
      end write_block;



    ------------------------------------------------------------------------------------------------
    static flush =
    -- Flushes the contents of the buffer to the physical output using the [write_method].
    ------------------------------------------------------------------------------------------------
    begin
      if buffer^:length<>0 then
        write_method^(buffer^[1{%%TODO(SLICE)..buffer^:length}],buffer^:length);
        buffer^:=nil;
        end if;
      end flush;



    ------------------------------------------------------------------------------------------------
    exit =
    -- Finalization.
    ------------------------------------------------------------------------------------------------
    begin
      -- discard the buffer
      discard buffer;
      end exit;

    end c_output_buffer;

end streams;