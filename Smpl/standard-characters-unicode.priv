----------------------------------------------------------------------------------------------------
module private unicode =
-- UNICODE support.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

#include 'unicode_data.src';

----------------------------------------------------------------------------------------------------
procedure to_unicode =
-- Converts ISO 10646 string to UNICODE string.
----------------------------------------------------------------------------------------------------
begin
  for i in 1..istr:length loop
    ustr & t_char16(istr[i]);
    end loop;
  end to_unicode;



----------------------------------------------------------------------------------------------------
procedure unicode_char_to_lower =
-- Convers given character <par>c</par> that is an upper-case letter to corresponding lower-case
-- letter. If <par>c</par> is already a lower-case letter or any other non-letter character, it is
-- returned unchanged.
----------------------------------------------------------------------------------------------------
var 
  val              : t_mod_unsigned32;

begin
  val:=_c[t_unsigned8(_b[t_unsigned16(_a[c:ord div compression_size] + t_mod_unsigned16(c:ord mod compression_size))])];
  if ((val and $40) = $40) then
    if (((val shr 8) and $1ff)=$1ff) 
      then
        -- characters with overflow offset
        case c:ord
          when $2126 do result:ord:=$03C9;
          when $212a do result:ord:=$006b;
          when $212b do result:ord:=$00e5;
          when others do;
          end case;
      else
        if (((val shr 8) and $100)=$100)
          then
            -- characters with negative offset
            result:ord := c:ord - t_unsigned16(((val shr 8) and $ff));
          else
            result:ord := c:ord + t_unsigned16(((val shr 8) and $ff));
            end if;
        end if;
    end if;
  end  unicode_char_to_lower;



----------------------------------------------------------------------------------------------------
procedure unicode_char_to_upper =
-- Convers given character <par>c</par> that is a lower-case letter to corresponding upper-case
-- letter. If <par>c</par> is already an upper-case letter or any other non-letter character, it is
-- returned unchanged.
----------------------------------------------------------------------------------------------------
var 
  val              : t_mod_unsigned32;

begin
  val:=_c[t_unsigned8(_b[t_unsigned16(_a[c:ord div compression_size] + t_mod_unsigned16(c:ord mod compression_size))])];
  if ((val and $20) = $20) then
    if (((val shr 8) and $1ff)=$1ff) 
      then
        -- characters with overflow offset
        case c:ord
          when $00b5 do result:ord:=$03C9;
          when $212a do result:ord:=$0053;
          when $212b do result:ord:=$0399;
          when others do;
          end case;
      else
        if (((val shr 8) and $100)=$100)
          then
            -- characters with negative offset
            result:ord := c:ord + t_unsigned16(((val shr 8) and $ff));
          else
            result:ord := c:ord - t_unsigned16(((val shr 8) and $ff));
            end if;
        end if;
    end if;
  end unicode_char_to_upper;



----------------------------------------------------------------------------------------------------
procedure unicode_char_to_tittle =
-- Convers given character <par>c</par> that is a lower-case or upper-case letter to corresponding
-- tittle-case letter. If <par>c</par> is already a tittle-case letter or any other non-letter 
-- character, it is returned unchanged.
----------------------------------------------------------------------------------------------------
const 
  lower_case       = cc_ll;
  upper_case       = cc_lu;

var 
  val              : t_mod_unsigned32;

begin
  val:=_c[t_unsigned8(_b[t_unsigned16(_a[c:ord div compression_size] + t_mod_unsigned16(c:ord mod compression_size))])];
 
  if ((val and $40) = $40) 
    then
      -- has tittle-case different from upper-case
      -- only few characters belongs here and the rule for conversion is simple
      -- add 1 to upper-case letter or substract 1 from lower-case letter
      if ((val and $1f) = t_mod_unsigned32(lower_case:ord)) then
        -- character is lower-case
        result:ord - 1;
      elsif ((val and $1f) = t_mod_unsigned32(upper_case:ord)) then
        -- character is upper-case
        result:ord + 1;
      else 
        -- anything else including tittle-case letter stays unchanged
        end if;

    else
      -- tittle-case ot this character is the same as it`s upper-case    
      result:=unicode_char_to_upper(c);
      end if;
 
  result:=c;
  end unicode_char_to_tittle;



----------------------------------------------------------------------------------------------------
procedure unicode_get_char_category =
-- Returns ordinal value of category to the given character <par>c</par>. If zero than given 
-- character <par>c</par> is not a valid character.
----------------------------------------------------------------------------------------------------
var 
  val              : t_mod_unsigned32;

begin
  val:=_c[t_unsigned8(_b[t_unsigned16(_a[c:ord div compression_size] + t_mod_unsigned16(c:ord mod compression_size))])];

  result:=t_char_category(val and $1f);
  end unicode_get_char_category;



----------------------------------------------------------------------------------------------------
procedure unicode_char_get_numeric_value =
-- Returns numeric value to the given character <par>c</par>.
----------------------------------------------------------------------------------------------------
begin
  raise feature_not_implemented;
  end unicode_char_get_numeric_value;


end unicode;