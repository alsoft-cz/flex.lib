----------------------------------------------------------------------------------------------------
module public input =
-- Input operations routines.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
-- <heading>... </heading>
-- 
----------------------------------------------------------------------------------------------------

with 
  standard.triggers;


type 
  -- keyboard modifier key
  t_key_modifier   = enum 
      tkm_left_shift;                            -- left shift key is pressed
      tkm_rigth_shift;                           -- rigth shift key is pressed
                                                 -- when shift is in action on systems that do not
                                                 -- differeciate shifts both(left and rigth shift) 
                                                 -- should be set in [t_key_modifier_mask]
      tkm_alt;                                   -- left alt key is pressed
      tkm_altgr;                                 -- rigth alt key is pressed
      tkm_left_control;                          -- left control key is pressed
      tkm_right_control;                         -- right control key is pressed
      tkm_capslock;                              -- capslock key modifier is on
      tkm_numlock;                               -- numlock key modifier is on
      tkm_scrolllock;                            -- scrolllock key modifier is on
      -- tkm_enhanced;                           -- I have no idea what this is
      end enum;

  -- mask indicating all modifier keys pressed
  t_key_modifier_mask = set of t_key_modifier;   

  -- mouse button state flag
  t_mouse_button_state = enum
      tmbs_1left_pressed;                        -- the leftmost button was pressed
      tmbs_2left_pressed;                        -- the second button from left was pressed
      tmbs_3left_pressed;                        -- the third button from left was pressed
      tmbs_4left_pressed;                        -- the fourth button from left was pressed
      tmbs_rigth_pressed;                        -- the rightmost button was pressed
      end enum;

  -- mouse button state mask
  t_mouse_button_mask = set of t_mouse_button_state;
  
  -- mouse event flag
  t_mouse_event_flag = enum
      tmef_double_click;                         -- second click of a double-click occured
      tmef_mouse_moved;                          -- mouse position changed
      tmef_mouse_wheeled;                        -- mouse wheel was rolled
      end enum;

  t_input_type     = enum
      tit_keyboard_input;                        -- keyboard input
      tit_mouse_input;                           -- mouse input
--      tit_window_buffer_size_input;              -- information about resizing window
--      tit_menu_input;                            -- menu input events, these events are used
                                                 -- internaly and should be ignored
--      tit_focus_event;                           -- focus input events, these events are used
                                                 -- internaly and should be ignored
      end enum;

  -- input type filter for input queue
  t_input_type_filter = set of t_input_type;

  -- Ancestor for all input events
  t_input_event    = record
      event_type   : t_input_type;
      end record;
  p_input_event = ^class t_input_event;

  -- keyboard input event
  t_keyboard_event = t_input_event with record
      key_down     : t_logical;                  -- if true the key been pressed,
                                                 -- if false the key has been released
      repeat_count : t_unsigned16;               -- increasing while key is being held down
      key_code     : t_unsigned16;               -- device independent key code
--      virutal_scan_code : t_unsigned16;          -- device dependent key code, generated by keyboard
      char         : t_char32;                   -- character representation
      key_modifier : t_key_modifier_mask;        -- indication of which key modifiers are pressed
      end record;
  p_keyboard_event = ^class t_keyboard_event;

  -- mouse input event
  t_mouse_event    = t_input_event with record
      mouse_position : t_unsigned32{%% t_2d_coord};-- locatilon of mouse pointer
      button_state : t_mouse_button_mask;        -- idication of which mouse buttons are pressed
      key_modifier : t_key_modifier_mask;        -- indication of which key modifiers are pressed
      event_flag   : t_mouse_event_flag;         -- type of mouse event
      end record;
  p_mouse_event = ^class t_mouse_event;

{  -- windows resize event
  t_window_buffer_event = t_input_event with record
      window_size  : t_unsigned32%% t_2d_coord;-- window size
      end record;
  p_window_buffer_event = ^class t_window_buffer_event;

  -- menu input event
  t_menu_event     = t_input_event with record
      command_id   : t_unsigned32;               -- reserved 
      end record;
  p_menu_event = ^class t_menu_event;}

  -- focus event
  -- %% tohle snad nebude pot©eba
  
  -- %% temporary to be replaced by list
  t_queue_data     = string 500 of p_input_event;
  
----------------------------------------------------------------------------------------------------
class public c_input_queue = extend c_trigger_container; -- with task
-- Input queue
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static get_event (
      event_filter : in t_input_type_filter;     -- filter for required event
      input_event  : out p_input_event;          -- returned input event
      error        : out t_logical);               -- error indication
    -- This method waits until queue does not contain an input event specified by [event_filter],
    -- it returns first such event as [input_event]. Such returned event is removed from the queue.
    -- 
    -- Result:
    --   If subprogram fails error flag wil be set to true
    ------------------------------------------------------------------------------------------------
    static look_event (
      event_filter : in t_input_type_filter;     -- filter for required event
      input_event  : out p_input_event);         -- reternud input event
    -- The same as get_event, but the returned event is not removed from the queue
    --
    -- Result:
    --   This subprogram never fails.
    ------------------------------------------------------------------------------------------------
    static test_event (
      event_filter : in t_input_type_filter)     -- filter for required event
      return t_logical;                          -- true if required event is waiting in queue
    -- This method search through the [input_queue] and returns true if the queue contains an event
    -- specified by [event_filter].
    -- 
    -- Result:
    --   True if any input event from t_input_type_filter is found in queue
    --   Otherwise returns False.
    ------------------------------------------------------------------------------------------------
    static flush_queue (
      event_filter : in t_input_type_filter);    -- filter for required events
    -- This method will remove all events the match with [event_filter] from [queue_data].
    --
    -- Result:
    --   This subprogram never fails.
    ------------------------------------------------------------------------------------------------

  protected
    
    var 
    {#if #declared radekr_key; #and then; radekr_key then;
      queue_data   : c_stack;
    #else;}
      queue_data   : t_queue_data;
    -- #end if {radekr_key}; 

    ------------------------------------------------------------------------------------------------
    virtual fill_queue (
      count        : out t_unsigned;             -- number of new events pushed into the queue
      error        : out t_logical);             -- error indication
    -- Virtual method that reads more input events into queue.
    -- has to be overriden for specific input sources.
    --
    -- Parametrs:
    --   [count] specifies how many new events was put in the queue  
    --   [error] if subprogram fails this will be set to true
    ------------------------------------------------------------------------------------------------
    virtual put_event (
      input_event  : in p_input_event)           -- input event to be put in the queue
      return t_logical;
    -- Virtual method that puts events into system input queue
    -- Has to be overriden for specific input sources.
    -- Result :
    --   Returns value should return logical result of this action.
    ------------------------------------------------------------------------------------------------


    end c_input_queue;

end input;