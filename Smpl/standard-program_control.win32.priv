----------------------------------------------------------------------------------------------------
module private program_control =
-- Flex Standard Library
-- General program execution control.
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

with 
  standard.strings;

use
  windows.windef,
  windows.windef.winnt;

----------------------------------------------------------------------------------------------------
procedure get_command_line =
-- Returns the command line string of the program. The command line is taken from the operating
-- system without any modifications except character encodig changes. The caller is responsible for
-- freeing the memory.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
begin
  from_system_string(system.windows.winbase.getcommandline,cmd_line);
  end get_command_line;



----------------------------------------------------------------------------------------------------
procedure get_command_line_parameters =
-- Returns the command line string of the program split into separate parameters. The command line
-- is taken from the operating system without any modifications except character encodig changes and
-- removal of the actual program name, if placed into the command line string by the operating
-- system.
--   The caller is responsible for freeing the memory.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
var
  full_cmd_line    : p_char32ustr;               -- full command line
  parameter        : p_char32ustr;               -- single parameter
  in_quotes        : t_logical;                  -- text is between quotes
  skip_whitespace  : t_logical;                  -- skip whitespace
  first_parameter  : t_logical;                  -- the actual parametr is the first parameter

begin
  -- retrieve the command line string
  get_command_line(full_cmd_line);

  -- there will be at least one command line parameter
  new cmd_line range {%%TODO(ADJUST) p©edˆlat!}30;

  -- split into separate parameters
  first_parameter:=true;
  for i in full_cmd_line^:range loop
    -- handle new parameter
    if (full_cmd_line^[i]=" "{%%TODO(SET) in [" ",\9]} and not in_quotes and not skip_whitespace) or i=full_cmd_line^:first then
      -- append previous parameter to the list
      if parameter<>nil then
        if first_parameter

          -- if it is the first parameter, discard it, because it contains just the program name
          then 
            discard parameter;
            first_parameter:=false;

          -- pass out all other parameters
          else cmd_line^ & parameter;
          end if;
        end if;

      -- prepare a new parameter
      new parameter range {%%TODO(ADJUST) p©edˆlat!}100;

      -- and skip all white space
      skip_whitespace:=true;
      end if;

    -- handle quotes
    if full_cmd_line^[i]=""" then
      not in_quotes;
      end if;

    -- prefixed quote
    if (full_cmd_line^[i]="\" and i<full_cmd_line^:length) and then full_cmd_line^[i+1]=""" then
      parameter^ & """;
      skip_whitespace:=false;

    -- ignore quotes
    elsif full_cmd_line^[i]=""" then
      -- ignore
      skip_whitespace:=false;

    -- white space
    elsif full_cmd_line^[i]=" "{%%TODO(SET) in [" ",\9]} then
      if not skip_whitespace then
        parameter^ & full_cmd_line^[i];
        end if;

    -- other characters
    else 
      parameter^ & full_cmd_line^[i];
      skip_whitespace:=false;
      end if;
    end loop;

  -- finally append the last parameter, if not empty and not being also the first parameter
  if parameter<>nil and then parameter^:length>0 and then not first_parameter
    then cmd_line^ & parameter;
    else discard parameter;
    end if;
  end get_command_line_parameters;



----------------------------------------------------------------------------------------------------
procedure get_environment_variables =
-- Returns pointer to a list of all environment variables [env_vars]. Environment variables are 
-- taken from the operating system without any modifications except character encoding changes. If
-- there are no environment variables at all, [env_vars] points to an empty string.
--   The caller is responsible for freeing the memory.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
var
  penv_strings     : windows.windef.psys_void;   -- pointer to block of with environment strings
  env_var          : t_environment_variable;     -- one environment variable
  strings_count    : t_unsigned;                 -- number of strings in returned block 
  i                : t_unsigned;                 -- counter 
  sep_position     : t_unsigned;                 -- position of string separator
  tmp_str          : p_char32ustr;               -- temporary string pointer

begin
  -- make system call
  penv_strings:=system.windows.winbase.getenvironmentstrings;
  
  -- count number of strings returned by system call
  while windows.windef.winnt.tsys_wstr(penv_strings^)[i]<>\0 or 
        windows.windef.winnt.tsys_wstr(penv_strings^)[i+1]<>\0 loop; 
    if windows.windef.winnt.tsys_wstr(penv_strings^)[i]=\0 then strings_count+1 end if;
    i+1;
    end loop;
  if i>0 
    -- add one to strings_count
    then
    strings_count+1;
    -- no string returned from system
    else return;
    end if;
    
  -- allocate memory for result
  new env_vars range strings_count;

  -- fill the result list
  i:=0;
  loop; 
    -- get environment strings element and increment i by size of it
    from_system_string(windows.windef.winnt.psys_wstr(
                              windows.windef.psys_void(^(
                                        windows.windef.winnt.psys_wstr(penv_strings)^[i]))),
                       tmp_str);
    i+tmp_str^:length;
    i+1;

    -- separete string into enviroment variable record
    sep_position:=str_pos_substring(tmp_str^,'=');
    if sep_position<2 
      then 
        new env_var.env_name range 1;  -- %% there should be a zero size
        env_var.env_name^:='';
      else str_create_copy(tmp_str^,env_var.env_name,1,str_pos_substring(tmp_str^,'=')-1);
      end if;
    if sep_position>=tmp_str^:length
      then 
        new env_var.env_value range 1;  -- %% there should be a zero size
        env_var.env_value^:='';
      else str_create_copy(tmp_str^,env_var.env_value,str_pos_substring(tmp_str^,'=')+1,tmp_str^:length);
      end if;
    discard tmp_str;

    -- add to result
    env_vars^ & env_var;
    until windows.windef.winnt.tsys_wstr(penv_strings^)[i]=\0;

leave
  -- free memory
  discard penv_strings;
  end get_environment_variables;



----------------------------------------------------------------------------------------------------
procedure get_environment_variable =
-- Returns the environment variable`s [env_var] value. The value is taken from the operating
-- system without any modifications except character encodig changes. When no such environment
-- variable exists, the subprogram fails.
--   The caller is responsible for freeing the memory.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
var
  env_value_size   : windows.windef.tsys_dword;  -- the real length of string returned as [env_value]
  penv_var         : windows.windef.winnt.psys_wstr;  -- system pointer
  penv_value       : windows.windef.winnt.psys_wstr;  -- system pointer

begin
  -- initialize passed parameters
  to_system_string(env_var,penv_var);

  -- get the size of env_value string
  env_value_size:=system.windows.winbase.getenvironmentvariable(penv_var,nil,env_value_size);

  -- if no enviroment valiable is found
  if env_value_size=0 then
    error:=true;
    return;
    end if;

  -- allocate space for output string
  new penv_value range env_value_size;

  -- make system call again to realy get the variables value
  env_value_size:=system.windows.winbase.getenvironmentvariable(penv_var,penv_value,env_value_size);

  -- convert system string
  from_system_string(penv_value,env_value);

leave
  -- free memory
  discard penv_value;
  discard penv_var;
  end get_environment_variable; 



----------------------------------------------------------------------------------------------------
procedure set_environment_variable =
-- Sets the environment variable`s [env_var] value. Neither [env_var] nor [env_value] may be an 
-- empty string, otherwise the subprogram fails.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
var                  
  penv_var         : windows.windef.winnt.psys_wstr;  -- system pointer
  penv_value       : windows.windef.winnt.psys_wstr;  -- system pointer

begin
  -- Entry condition, no input parametr can be an empty string
  if env_var='' or env_value='' then
    error:=true;
    return;
    end if;

  -- convert passed parameters
  to_system_string(env_var,penv_var);
  to_system_string(env_value,penv_value);

  -- make system call
  error:=not system.windows.winbase.setenvironmentvariable(penv_var,penv_value);

leave
  -- free memory
  discard penv_value;
  discard penv_var;
  end set_environment_variable;



----------------------------------------------------------------------------------------------------
procedure delete_environment_variable =
-- Deletes the environment variable [env_var]. [env_var] may not be an empty string, otherwise the 
-- subprogram fails.
--
-- Result:
--   When the subprogram fails, [error] is set to [True]. 
--   When the subprogram succeeds, [error] is set to [False]. 
----------------------------------------------------------------------------------------------------
var 
  penv_var         : windows.windef.winnt.psys_wstr;  -- system pointer
  penv_value       : windows.windef.winnt.psys_wstr;  -- system pointer

begin
  -- Entry condition, no input parametr can be an empty string
  if env_var='' then
    error:=true;
    return;
    end if;

  -- convert passed parameter
  to_system_string(env_var,penv_var);
  
  -- make system call
  error:=not system.windows.winbase.setenvironmentvariable(penv_var,penv_value);

leave
  -- free memory
  discard penv_var;
  end delete_environment_variable;



----------------------------------------------------------------------------------------------------
procedure discard_environment_variables =
-- Helper subprogram to discard a block of environment variables.
----------------------------------------------------------------------------------------------------
begin
  if env_vars=nil then return end if;

  -- free all memory
  for i in env_vars^:range loop
    discard env_vars^[i].env_name;
    discard env_vars^[i].env_value;
    end loop;
  discard env_vars;
  end discard_environment_variables;



----------------------------------------------------------------------------------------------------
procedure discard_command_line_parameters =
-- Helper subprogram to discard a block of command line parameters.
--
-- Result:
--   This subprogram never fails.
----------------------------------------------------------------------------------------------------
begin
  if cmd_line=nil then return end if;

  -- free all memory
  for i in cmd_line^:range loop
    discard cmd_line^[i];
    end loop;
  discard cmd_line;
  end discard_command_line_parameters;

end program_control;