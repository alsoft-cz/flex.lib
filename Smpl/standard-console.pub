----------------------------------------------------------------------------------------------------
module public console =
-- Console I/O.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
-- <heading>Console Coordinate System</heading>
-- The console coordinate system is zero-based two-dimensional. A position is specified by two
-- unsigned numbers - the horizontal (x) and vertical (y) coordinate.
----------------------------------------------------------------------------------------------------
-- To do:
--   -- split the [t_cursor_position] into separate types for the x and y coordinates
----------------------------------------------------------------------------------------------------

with
  standard.streams;

type
  -- position of the cursor on the console
  t_cursor_position= protected t_unsigned;

var
  -- text output stream to easy sequential console output
  console_output   : p_output_text_stream;

----------------------------------------------------------------------------------------------------
procedure write (
    s              : in t_char32ustr);           -- string to write
-- Writes the string <par>s</par> to the actual cursor position and moves the cursor to the first
-- position after the text. When the text doesn't fit to the actual line, it is splitted to as
-- many lines as necessary. When the text needs to be wrapped beyond the last line of the console, 
-- the console's content is scrolled by one line up.
----------------------------------------------------------------------------------------------------
procedure write_line (
    s              : in t_char32ustr);           -- string to write
-- Does the same as <ent>write</ent> and then moves the cursor to the beginning of the next line 
-- following the end of the text. When the output ends on the last line of the console, the 
-- console's content is scrolled by one line up.
----------------------------------------------------------------------------------------------------
procedure write_at (
    x              : in t_cursor_position;       -- horizontal position
    y              : in t_cursor_position;       -- vertical position
    s              : in t_char32ustr);           -- string to write
-- Writes the string <par>s</par> to the given position. The cursor's position is left intact.
-- When the text doesn't fit to the actual line, it is splitted to as many lines as necessary.
-- 
-- Parameters:
--   x,y           When the position is outside of the visible console area, 
--                 <ent>parameter_error</ent> is raised.
----------------------------------------------------------------------------------------------------
procedure set_cursor_position (
    x              : in t_cursor_position;       -- horizontal position
    y              : in t_cursor_position);      -- vertical position
-- Sets actual cursor position.
-- 
-- Parameters:
--   x,y           When the position is outside of the visible console area, 
--                 <ent>parameter_error</ent> is raised.
----------------------------------------------------------------------------------------------------
procedure get_cursor_position (
    x              : out t_cursor_position;      -- horizontal position
    y              : out t_cursor_position);     -- vertical position
-- Returns actual cursor position.
----------------------------------------------------------------------------------------------------
procedure get_console_info (
    w              : out t_cursor_position;      -- width of the visible area (number of columns)
    h              : out t_cursor_position);     -- height of the visible area (number of lines)
-- Returns basic information about the console.
----------------------------------------------------------------------------------------------------
{#if #declared radekr; #and then; radekr;
procedure read_key (
    key            : out t_key_event);           -- read key event
-- Reads 
#end if;}
{----------------------------------------------------------------------------------------------------
procedure get_console_event (
    console_event  : out t_console_event);       -- returned event 
-- Returns console event from the console. This event cointains information about console input 
-- that has been done.}
----------------------------------------------------------------------------------------------------
procedure read_char (
    c              : out t_char32);              -- read character
-- Reads character [char] form system console input buffer. This subprogram stop the execution and
-- wait until a character is read.
-- Ignores control character.
-- This subprogram empties the console input queue, so we do not receive any buffered characters 
-- pressed before the subprogram call.
----------------------------------------------------------------------------------------------------
#if #declared radekr_key; #and then; radekr_key then;
procedure read_key (
    key            : out t_keyboard_key);        -- keyboard key status
--  Returns a key record [key] when any keayboard event occures.
----------------------------------------------------------------------------------------------------
#end if {radekr_key};

end console;